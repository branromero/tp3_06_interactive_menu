
tdse-tp3_06-interactive_menu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004190  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  0800429c  0800429c  0000529c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800468c  0800468c  00006090  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800468c  0800468c  0000568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004694  08004694  00006090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004694  08004694  00005694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004698  08004698  00005698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  0800469c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000090  0800472c  00006090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200003d8  0800472c  000063d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000820a  00000000  00000000  000060b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d78  00000000  00000000  0000e2c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000738  00000000  00000000  00010040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000564  00000000  00000000  00010778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001834f  00000000  00000000  00010cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b27f  00000000  00000000  0002902b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083dde  00000000  00000000  000342aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8088  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000272c  00000000  00000000  000b80cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000091  00000000  00000000  000ba7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000090 	.word	0x20000090
 8000128:	00000000 	.word	0x00000000
 800012c:	08004284 	.word	0x08004284

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000094 	.word	0x20000094
 8000148:	08004284 	.word	0x08004284

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	initialise_monitor_handles();
 8000160:	f002 feda 	bl	8002f18 <initialise_monitor_handles>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000164:	f000 fa44 	bl	80005f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000168:	f000 f809 	bl	800017e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800016c:	f000 f872 	bl	8000254 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000170:	f000 f846 	bl	8000200 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	/* Application Init */
	app_init();
 8000174:	f001 fa9a 	bl	80016ac <app_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  /* Application Update */
	  app_update();
 8000178:	f001 fb4e 	bl	8001818 <app_update>
 800017c:	e7fc      	b.n	8000178 <main+0x1c>

0800017e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800017e:	b580      	push	{r7, lr}
 8000180:	b090      	sub	sp, #64	@ 0x40
 8000182:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000184:	f107 0318 	add.w	r3, r7, #24
 8000188:	2228      	movs	r2, #40	@ 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f003 f94a 	bl	8003426 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000192:	1d3b      	adds	r3, r7, #4
 8000194:	2200      	movs	r2, #0
 8000196:	601a      	str	r2, [r3, #0]
 8000198:	605a      	str	r2, [r3, #4]
 800019a:	609a      	str	r2, [r3, #8]
 800019c:	60da      	str	r2, [r3, #12]
 800019e:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001a0:	2302      	movs	r3, #2
 80001a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001a4:	2301      	movs	r3, #1
 80001a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001a8:	2310      	movs	r3, #16
 80001aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001ac:	2302      	movs	r3, #2
 80001ae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001b0:	2300      	movs	r3, #0
 80001b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001b4:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80001b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ba:	f107 0318 	add.w	r3, r7, #24
 80001be:	4618      	mov	r0, r3
 80001c0:	f000 fd86 	bl	8000cd0 <HAL_RCC_OscConfig>
 80001c4:	4603      	mov	r3, r0
 80001c6:	2b00      	cmp	r3, #0
 80001c8:	d001      	beq.n	80001ce <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001ca:	f000 f903 	bl	80003d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ce:	230f      	movs	r3, #15
 80001d0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001d2:	2302      	movs	r3, #2
 80001d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001d6:	2300      	movs	r3, #0
 80001d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001e0:	2300      	movs	r3, #0
 80001e2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001e4:	1d3b      	adds	r3, r7, #4
 80001e6:	2102      	movs	r1, #2
 80001e8:	4618      	mov	r0, r3
 80001ea:	f000 fff3 	bl	80011d4 <HAL_RCC_ClockConfig>
 80001ee:	4603      	mov	r3, r0
 80001f0:	2b00      	cmp	r3, #0
 80001f2:	d001      	beq.n	80001f8 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001f4:	f000 f8ee 	bl	80003d4 <Error_Handler>
  }
}
 80001f8:	bf00      	nop
 80001fa:	3740      	adds	r7, #64	@ 0x40
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000204:	4b11      	ldr	r3, [pc, #68]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000206:	4a12      	ldr	r2, [pc, #72]	@ (8000250 <MX_USART2_UART_Init+0x50>)
 8000208:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800020a:	4b10      	ldr	r3, [pc, #64]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800020c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000210:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000212:	4b0e      	ldr	r3, [pc, #56]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000214:	2200      	movs	r2, #0
 8000216:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000218:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800021a:	2200      	movs	r2, #0
 800021c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800021e:	4b0b      	ldr	r3, [pc, #44]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000220:	2200      	movs	r2, #0
 8000222:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000224:	4b09      	ldr	r3, [pc, #36]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000226:	220c      	movs	r2, #12
 8000228:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800022a:	4b08      	ldr	r3, [pc, #32]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 800022c:	2200      	movs	r2, #0
 800022e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000230:	4b06      	ldr	r3, [pc, #24]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000232:	2200      	movs	r2, #0
 8000234:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000236:	4805      	ldr	r0, [pc, #20]	@ (800024c <MX_USART2_UART_Init+0x4c>)
 8000238:	f001 f95a 	bl	80014f0 <HAL_UART_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000242:	f000 f8c7 	bl	80003d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	200000ac 	.word	0x200000ac
 8000250:	40004400 	.word	0x40004400

08000254 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b088      	sub	sp, #32
 8000258:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800025a:	f107 0310 	add.w	r3, r7, #16
 800025e:	2200      	movs	r2, #0
 8000260:	601a      	str	r2, [r3, #0]
 8000262:	605a      	str	r2, [r3, #4]
 8000264:	609a      	str	r2, [r3, #8]
 8000266:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000268:	4b55      	ldr	r3, [pc, #340]	@ (80003c0 <MX_GPIO_Init+0x16c>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a54      	ldr	r2, [pc, #336]	@ (80003c0 <MX_GPIO_Init+0x16c>)
 800026e:	f043 0310 	orr.w	r3, r3, #16
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b52      	ldr	r3, [pc, #328]	@ (80003c0 <MX_GPIO_Init+0x16c>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0310 	and.w	r3, r3, #16
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000280:	4b4f      	ldr	r3, [pc, #316]	@ (80003c0 <MX_GPIO_Init+0x16c>)
 8000282:	699b      	ldr	r3, [r3, #24]
 8000284:	4a4e      	ldr	r2, [pc, #312]	@ (80003c0 <MX_GPIO_Init+0x16c>)
 8000286:	f043 0320 	orr.w	r3, r3, #32
 800028a:	6193      	str	r3, [r2, #24]
 800028c:	4b4c      	ldr	r3, [pc, #304]	@ (80003c0 <MX_GPIO_Init+0x16c>)
 800028e:	699b      	ldr	r3, [r3, #24]
 8000290:	f003 0320 	and.w	r3, r3, #32
 8000294:	60bb      	str	r3, [r7, #8]
 8000296:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000298:	4b49      	ldr	r3, [pc, #292]	@ (80003c0 <MX_GPIO_Init+0x16c>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a48      	ldr	r2, [pc, #288]	@ (80003c0 <MX_GPIO_Init+0x16c>)
 800029e:	f043 0304 	orr.w	r3, r3, #4
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b46      	ldr	r3, [pc, #280]	@ (80003c0 <MX_GPIO_Init+0x16c>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0304 	and.w	r3, r3, #4
 80002ac:	607b      	str	r3, [r7, #4]
 80002ae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002b0:	4b43      	ldr	r3, [pc, #268]	@ (80003c0 <MX_GPIO_Init+0x16c>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a42      	ldr	r2, [pc, #264]	@ (80003c0 <MX_GPIO_Init+0x16c>)
 80002b6:	f043 0308 	orr.w	r3, r3, #8
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b40      	ldr	r3, [pc, #256]	@ (80003c0 <MX_GPIO_Init+0x16c>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0308 	and.w	r3, r3, #8
 80002c4:	603b      	str	r3, [r7, #0]
 80002c6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|D7_Pin|D8_Pin, GPIO_PIN_RESET);
 80002c8:	2200      	movs	r2, #0
 80002ca:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80002ce:	483d      	ldr	r0, [pc, #244]	@ (80003c4 <MX_GPIO_Init+0x170>)
 80002d0:	f000 fcc3 	bl	8000c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, D6_Pin|D5_Pin|D4_Pin, GPIO_PIN_RESET);
 80002d4:	2200      	movs	r2, #0
 80002d6:	f44f 6186 	mov.w	r1, #1072	@ 0x430
 80002da:	483b      	ldr	r0, [pc, #236]	@ (80003c8 <MX_GPIO_Init+0x174>)
 80002dc:	f000 fcbd 	bl	8000c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D9_GPIO_Port, D9_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2180      	movs	r1, #128	@ 0x80
 80002e4:	4839      	ldr	r0, [pc, #228]	@ (80003cc <MX_GPIO_Init+0x178>)
 80002e6:	f000 fcb8 	bl	8000c5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002f0:	4b37      	ldr	r3, [pc, #220]	@ (80003d0 <MX_GPIO_Init+0x17c>)
 80002f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f4:	2300      	movs	r3, #0
 80002f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002f8:	f107 0310 	add.w	r3, r7, #16
 80002fc:	4619      	mov	r1, r3
 80002fe:	4833      	ldr	r0, [pc, #204]	@ (80003cc <MX_GPIO_Init+0x178>)
 8000300:	f000 fb10 	bl	8000924 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000304:	2320      	movs	r3, #32
 8000306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000308:	2301      	movs	r3, #1
 800030a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030c:	2300      	movs	r3, #0
 800030e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000310:	2302      	movs	r3, #2
 8000312:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000314:	f107 0310 	add.w	r3, r7, #16
 8000318:	4619      	mov	r1, r3
 800031a:	482a      	ldr	r0, [pc, #168]	@ (80003c4 <MX_GPIO_Init+0x170>)
 800031c:	f000 fb02 	bl	8000924 <HAL_GPIO_Init>

  /*Configure GPIO pins : D12_Pin D11_Pin */
  GPIO_InitStruct.Pin = D12_Pin|D11_Pin;
 8000320:	23c0      	movs	r3, #192	@ 0xc0
 8000322:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000324:	2300      	movs	r3, #0
 8000326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000328:	2301      	movs	r3, #1
 800032a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800032c:	f107 0310 	add.w	r3, r7, #16
 8000330:	4619      	mov	r1, r3
 8000332:	4824      	ldr	r0, [pc, #144]	@ (80003c4 <MX_GPIO_Init+0x170>)
 8000334:	f000 faf6 	bl	8000924 <HAL_GPIO_Init>

  /*Configure GPIO pins : D6_Pin D5_Pin D4_Pin */
  GPIO_InitStruct.Pin = D6_Pin|D5_Pin|D4_Pin;
 8000338:	f44f 6386 	mov.w	r3, #1072	@ 0x430
 800033c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800033e:	2301      	movs	r3, #1
 8000340:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000342:	2301      	movs	r3, #1
 8000344:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000346:	2302      	movs	r3, #2
 8000348:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800034a:	f107 0310 	add.w	r3, r7, #16
 800034e:	4619      	mov	r1, r3
 8000350:	481d      	ldr	r0, [pc, #116]	@ (80003c8 <MX_GPIO_Init+0x174>)
 8000352:	f000 fae7 	bl	8000924 <HAL_GPIO_Init>

  /*Configure GPIO pin : D9_Pin */
  GPIO_InitStruct.Pin = D9_Pin;
 8000356:	2380      	movs	r3, #128	@ 0x80
 8000358:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800035a:	2301      	movs	r3, #1
 800035c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800035e:	2301      	movs	r3, #1
 8000360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000362:	2302      	movs	r3, #2
 8000364:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(D9_GPIO_Port, &GPIO_InitStruct);
 8000366:	f107 0310 	add.w	r3, r7, #16
 800036a:	4619      	mov	r1, r3
 800036c:	4817      	ldr	r0, [pc, #92]	@ (80003cc <MX_GPIO_Init+0x178>)
 800036e:	f000 fad9 	bl	8000924 <HAL_GPIO_Init>

  /*Configure GPIO pins : D7_Pin D8_Pin */
  GPIO_InitStruct.Pin = D7_Pin|D8_Pin;
 8000372:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000376:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000378:	2301      	movs	r3, #1
 800037a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800037c:	2301      	movs	r3, #1
 800037e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000380:	2302      	movs	r3, #2
 8000382:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000384:	f107 0310 	add.w	r3, r7, #16
 8000388:	4619      	mov	r1, r3
 800038a:	480e      	ldr	r0, [pc, #56]	@ (80003c4 <MX_GPIO_Init+0x170>)
 800038c:	f000 faca 	bl	8000924 <HAL_GPIO_Init>

  /*Configure GPIO pin : D10_Pin */
  GPIO_InitStruct.Pin = D10_Pin;
 8000390:	2340      	movs	r3, #64	@ 0x40
 8000392:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000394:	2300      	movs	r3, #0
 8000396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000398:	2301      	movs	r3, #1
 800039a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D10_GPIO_Port, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	4809      	ldr	r0, [pc, #36]	@ (80003c8 <MX_GPIO_Init+0x174>)
 80003a4:	f000 fabe 	bl	8000924 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80003a8:	2200      	movs	r2, #0
 80003aa:	2100      	movs	r1, #0
 80003ac:	2028      	movs	r0, #40	@ 0x28
 80003ae:	f000 fa7c 	bl	80008aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80003b2:	2028      	movs	r0, #40	@ 0x28
 80003b4:	f000 fa95 	bl	80008e2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003b8:	bf00      	nop
 80003ba:	3720      	adds	r7, #32
 80003bc:	46bd      	mov	sp, r7
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010800 	.word	0x40010800
 80003c8:	40010c00 	.word	0x40010c00
 80003cc:	40011000 	.word	0x40011000
 80003d0:	10110000 	.word	0x10110000

080003d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d8:	b672      	cpsid	i
}
 80003da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <Error_Handler+0x8>

080003e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b085      	sub	sp, #20
 80003e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003e6:	4b15      	ldr	r3, [pc, #84]	@ (800043c <HAL_MspInit+0x5c>)
 80003e8:	699b      	ldr	r3, [r3, #24]
 80003ea:	4a14      	ldr	r2, [pc, #80]	@ (800043c <HAL_MspInit+0x5c>)
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	6193      	str	r3, [r2, #24]
 80003f2:	4b12      	ldr	r3, [pc, #72]	@ (800043c <HAL_MspInit+0x5c>)
 80003f4:	699b      	ldr	r3, [r3, #24]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003fe:	4b0f      	ldr	r3, [pc, #60]	@ (800043c <HAL_MspInit+0x5c>)
 8000400:	69db      	ldr	r3, [r3, #28]
 8000402:	4a0e      	ldr	r2, [pc, #56]	@ (800043c <HAL_MspInit+0x5c>)
 8000404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000408:	61d3      	str	r3, [r2, #28]
 800040a:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <HAL_MspInit+0x5c>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000416:	4b0a      	ldr	r3, [pc, #40]	@ (8000440 <HAL_MspInit+0x60>)
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	60fb      	str	r3, [r7, #12]
 800041c:	68fb      	ldr	r3, [r7, #12]
 800041e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800042a:	60fb      	str	r3, [r7, #12]
 800042c:	4a04      	ldr	r2, [pc, #16]	@ (8000440 <HAL_MspInit+0x60>)
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000432:	bf00      	nop
 8000434:	3714      	adds	r7, #20
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr
 800043c:	40021000 	.word	0x40021000
 8000440:	40010000 	.word	0x40010000

08000444 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800044c:	f107 0310 	add.w	r3, r7, #16
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	4a15      	ldr	r2, [pc, #84]	@ (80004b4 <HAL_UART_MspInit+0x70>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d123      	bne.n	80004ac <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000464:	4b14      	ldr	r3, [pc, #80]	@ (80004b8 <HAL_UART_MspInit+0x74>)
 8000466:	69db      	ldr	r3, [r3, #28]
 8000468:	4a13      	ldr	r2, [pc, #76]	@ (80004b8 <HAL_UART_MspInit+0x74>)
 800046a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800046e:	61d3      	str	r3, [r2, #28]
 8000470:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <HAL_UART_MspInit+0x74>)
 8000472:	69db      	ldr	r3, [r3, #28]
 8000474:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000478:	60fb      	str	r3, [r7, #12]
 800047a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800047c:	4b0e      	ldr	r3, [pc, #56]	@ (80004b8 <HAL_UART_MspInit+0x74>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	4a0d      	ldr	r2, [pc, #52]	@ (80004b8 <HAL_UART_MspInit+0x74>)
 8000482:	f043 0304 	orr.w	r3, r3, #4
 8000486:	6193      	str	r3, [r2, #24]
 8000488:	4b0b      	ldr	r3, [pc, #44]	@ (80004b8 <HAL_UART_MspInit+0x74>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	f003 0304 	and.w	r3, r3, #4
 8000490:	60bb      	str	r3, [r7, #8]
 8000492:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000494:	230c      	movs	r3, #12
 8000496:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000498:	2302      	movs	r3, #2
 800049a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800049c:	2302      	movs	r3, #2
 800049e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a0:	f107 0310 	add.w	r3, r7, #16
 80004a4:	4619      	mov	r1, r3
 80004a6:	4805      	ldr	r0, [pc, #20]	@ (80004bc <HAL_UART_MspInit+0x78>)
 80004a8:	f000 fa3c 	bl	8000924 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80004ac:	bf00      	nop
 80004ae:	3720      	adds	r7, #32
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40004400 	.word	0x40004400
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40010800 	.word	0x40010800

080004c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c4:	bf00      	nop
 80004c6:	e7fd      	b.n	80004c4 <NMI_Handler+0x4>

080004c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	bf00      	nop
 80004d6:	e7fd      	b.n	80004d4 <MemManage_Handler+0x4>

080004d8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004dc:	bf00      	nop
 80004de:	e7fd      	b.n	80004dc <BusFault_Handler+0x4>

080004e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e4:	bf00      	nop
 80004e6:	e7fd      	b.n	80004e4 <UsageFault_Handler+0x4>

080004e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004ec:	bf00      	nop
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr

080004f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000510:	f000 f8b4 	bl	800067c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  HAL_SYSTICK_IRQHandler();
 8000514:	f000 f9ff 	bl	8000916 <HAL_SYSTICK_IRQHandler>

  /* USER CODE END SysTick_IRQn 1 */
}
 8000518:	bf00      	nop
 800051a:	bd80      	pop	{r7, pc}

0800051c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000520:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000524:	f000 fbb2 	bl	8000c8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}

0800052c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000534:	4a14      	ldr	r2, [pc, #80]	@ (8000588 <_sbrk+0x5c>)
 8000536:	4b15      	ldr	r3, [pc, #84]	@ (800058c <_sbrk+0x60>)
 8000538:	1ad3      	subs	r3, r2, r3
 800053a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000540:	4b13      	ldr	r3, [pc, #76]	@ (8000590 <_sbrk+0x64>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d102      	bne.n	800054e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000548:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <_sbrk+0x64>)
 800054a:	4a12      	ldr	r2, [pc, #72]	@ (8000594 <_sbrk+0x68>)
 800054c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800054e:	4b10      	ldr	r3, [pc, #64]	@ (8000590 <_sbrk+0x64>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4413      	add	r3, r2
 8000556:	693a      	ldr	r2, [r7, #16]
 8000558:	429a      	cmp	r2, r3
 800055a:	d207      	bcs.n	800056c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800055c:	f002 ffb2 	bl	80034c4 <__errno>
 8000560:	4603      	mov	r3, r0
 8000562:	220c      	movs	r2, #12
 8000564:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	e009      	b.n	8000580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800056c:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <_sbrk+0x64>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000572:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <_sbrk+0x64>)
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	4413      	add	r3, r2
 800057a:	4a05      	ldr	r2, [pc, #20]	@ (8000590 <_sbrk+0x64>)
 800057c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3718      	adds	r7, #24
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	20005000 	.word	0x20005000
 800058c:	00000400 	.word	0x00000400
 8000590:	200000f4 	.word	0x200000f4
 8000594:	200003d8 	.word	0x200003d8

08000598 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000598:	b480      	push	{r7}
 800059a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800059c:	bf00      	nop
 800059e:	46bd      	mov	sp, r7
 80005a0:	bc80      	pop	{r7}
 80005a2:	4770      	bx	lr

080005a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80005a4:	f7ff fff8 	bl	8000598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005a8:	480b      	ldr	r0, [pc, #44]	@ (80005d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80005aa:	490c      	ldr	r1, [pc, #48]	@ (80005dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80005ac:	4a0c      	ldr	r2, [pc, #48]	@ (80005e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80005ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005b0:	e002      	b.n	80005b8 <LoopCopyDataInit>

080005b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005b6:	3304      	adds	r3, #4

080005b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005bc:	d3f9      	bcc.n	80005b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005be:	4a09      	ldr	r2, [pc, #36]	@ (80005e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80005c0:	4c09      	ldr	r4, [pc, #36]	@ (80005e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80005c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005c4:	e001      	b.n	80005ca <LoopFillZerobss>

080005c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005c8:	3204      	adds	r2, #4

080005ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005cc:	d3fb      	bcc.n	80005c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005ce:	f002 ff7f 	bl	80034d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005d2:	f7ff fdc3 	bl	800015c <main>
  bx lr
 80005d6:	4770      	bx	lr
  ldr r0, =_sdata
 80005d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005dc:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80005e0:	0800469c 	.word	0x0800469c
  ldr r2, =_sbss
 80005e4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80005e8:	200003d8 	.word	0x200003d8

080005ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005ec:	e7fe      	b.n	80005ec <ADC1_2_IRQHandler>
	...

080005f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005f4:	4b08      	ldr	r3, [pc, #32]	@ (8000618 <HAL_Init+0x28>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a07      	ldr	r2, [pc, #28]	@ (8000618 <HAL_Init+0x28>)
 80005fa:	f043 0310 	orr.w	r3, r3, #16
 80005fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000600:	2003      	movs	r0, #3
 8000602:	f000 f947 	bl	8000894 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000606:	2000      	movs	r0, #0
 8000608:	f000 f808 	bl	800061c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800060c:	f7ff fee8 	bl	80003e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000610:	2300      	movs	r3, #0
}
 8000612:	4618      	mov	r0, r3
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40022000 	.word	0x40022000

0800061c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <HAL_InitTick+0x54>)
 8000626:	681a      	ldr	r2, [r3, #0]
 8000628:	4b12      	ldr	r3, [pc, #72]	@ (8000674 <HAL_InitTick+0x58>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	4619      	mov	r1, r3
 800062e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000632:	fbb3 f3f1 	udiv	r3, r3, r1
 8000636:	fbb2 f3f3 	udiv	r3, r2, r3
 800063a:	4618      	mov	r0, r3
 800063c:	f000 f95f 	bl	80008fe <HAL_SYSTICK_Config>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000646:	2301      	movs	r3, #1
 8000648:	e00e      	b.n	8000668 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	d80a      	bhi.n	8000666 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000650:	2200      	movs	r2, #0
 8000652:	6879      	ldr	r1, [r7, #4]
 8000654:	f04f 30ff 	mov.w	r0, #4294967295
 8000658:	f000 f927 	bl	80008aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800065c:	4a06      	ldr	r2, [pc, #24]	@ (8000678 <HAL_InitTick+0x5c>)
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000662:	2300      	movs	r3, #0
 8000664:	e000      	b.n	8000668 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000666:	2301      	movs	r3, #1
}
 8000668:	4618      	mov	r0, r3
 800066a:	3708      	adds	r7, #8
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000000 	.word	0x20000000
 8000674:	20000008 	.word	0x20000008
 8000678:	20000004 	.word	0x20000004

0800067c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <HAL_IncTick+0x1c>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	461a      	mov	r2, r3
 8000686:	4b05      	ldr	r3, [pc, #20]	@ (800069c <HAL_IncTick+0x20>)
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4413      	add	r3, r2
 800068c:	4a03      	ldr	r2, [pc, #12]	@ (800069c <HAL_IncTick+0x20>)
 800068e:	6013      	str	r3, [r2, #0]
}
 8000690:	bf00      	nop
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	20000008 	.word	0x20000008
 800069c:	200000f8 	.word	0x200000f8

080006a0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  return uwTick;
 80006a4:	4b02      	ldr	r3, [pc, #8]	@ (80006b0 <HAL_GetTick+0x10>)
 80006a6:	681b      	ldr	r3, [r3, #0]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bc80      	pop	{r7}
 80006ae:	4770      	bx	lr
 80006b0:	200000f8 	.word	0x200000f8

080006b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006bc:	f7ff fff0 	bl	80006a0 <HAL_GetTick>
 80006c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006cc:	d005      	beq.n	80006da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80006ce:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <HAL_Delay+0x44>)
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	461a      	mov	r2, r3
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	4413      	add	r3, r2
 80006d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006da:	bf00      	nop
 80006dc:	f7ff ffe0 	bl	80006a0 <HAL_GetTick>
 80006e0:	4602      	mov	r2, r0
 80006e2:	68bb      	ldr	r3, [r7, #8]
 80006e4:	1ad3      	subs	r3, r2, r3
 80006e6:	68fa      	ldr	r2, [r7, #12]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d8f7      	bhi.n	80006dc <HAL_Delay+0x28>
  {
  }
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000008 	.word	0x20000008

080006fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	f003 0307 	and.w	r3, r3, #7
 800070a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800070c:	4b0c      	ldr	r3, [pc, #48]	@ (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000712:	68ba      	ldr	r2, [r7, #8]
 8000714:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000718:	4013      	ands	r3, r2
 800071a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800072c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800072e:	4a04      	ldr	r2, [pc, #16]	@ (8000740 <__NVIC_SetPriorityGrouping+0x44>)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	60d3      	str	r3, [r2, #12]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	bc80      	pop	{r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000748:	4b04      	ldr	r3, [pc, #16]	@ (800075c <__NVIC_GetPriorityGrouping+0x18>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	0a1b      	lsrs	r3, r3, #8
 800074e:	f003 0307 	and.w	r3, r3, #7
}
 8000752:	4618      	mov	r0, r3
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076e:	2b00      	cmp	r3, #0
 8000770:	db0b      	blt.n	800078a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f003 021f 	and.w	r2, r3, #31
 8000778:	4906      	ldr	r1, [pc, #24]	@ (8000794 <__NVIC_EnableIRQ+0x34>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	095b      	lsrs	r3, r3, #5
 8000780:	2001      	movs	r0, #1
 8000782:	fa00 f202 	lsl.w	r2, r0, r2
 8000786:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800078a:	bf00      	nop
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	e000e100 	.word	0xe000e100

08000798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db0a      	blt.n	80007c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	490c      	ldr	r1, [pc, #48]	@ (80007e4 <__NVIC_SetPriority+0x4c>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c0:	e00a      	b.n	80007d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4908      	ldr	r1, [pc, #32]	@ (80007e8 <__NVIC_SetPriority+0x50>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 030f 	and.w	r3, r3, #15
 80007ce:	3b04      	subs	r3, #4
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	440b      	add	r3, r1
 80007d6:	761a      	strb	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	e000e100 	.word	0xe000e100
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	@ 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f1c3 0307 	rsb	r3, r3, #7
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf28      	it	cs
 800080a:	2304      	movcs	r3, #4
 800080c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3304      	adds	r3, #4
 8000812:	2b06      	cmp	r3, #6
 8000814:	d902      	bls.n	800081c <NVIC_EncodePriority+0x30>
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3b03      	subs	r3, #3
 800081a:	e000      	b.n	800081e <NVIC_EncodePriority+0x32>
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	f04f 32ff 	mov.w	r2, #4294967295
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43da      	mvns	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	401a      	ands	r2, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000834:	f04f 31ff 	mov.w	r1, #4294967295
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43d9      	mvns	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	4313      	orrs	r3, r2
         );
}
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	@ 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000860:	d301      	bcc.n	8000866 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000862:	2301      	movs	r3, #1
 8000864:	e00f      	b.n	8000886 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000866:	4a0a      	ldr	r2, [pc, #40]	@ (8000890 <SysTick_Config+0x40>)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3b01      	subs	r3, #1
 800086c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800086e:	210f      	movs	r1, #15
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	f7ff ff90 	bl	8000798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <SysTick_Config+0x40>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800087e:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <SysTick_Config+0x40>)
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000884:	2300      	movs	r3, #0
}
 8000886:	4618      	mov	r0, r3
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	e000e010 	.word	0xe000e010

08000894 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff ff2d 	bl	80006fc <__NVIC_SetPriorityGrouping>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b086      	sub	sp, #24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	60b9      	str	r1, [r7, #8]
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008b8:	2300      	movs	r3, #0
 80008ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008bc:	f7ff ff42 	bl	8000744 <__NVIC_GetPriorityGrouping>
 80008c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c2:	687a      	ldr	r2, [r7, #4]
 80008c4:	68b9      	ldr	r1, [r7, #8]
 80008c6:	6978      	ldr	r0, [r7, #20]
 80008c8:	f7ff ff90 	bl	80007ec <NVIC_EncodePriority>
 80008cc:	4602      	mov	r2, r0
 80008ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d2:	4611      	mov	r1, r2
 80008d4:	4618      	mov	r0, r3
 80008d6:	f7ff ff5f 	bl	8000798 <__NVIC_SetPriority>
}
 80008da:	bf00      	nop
 80008dc:	3718      	adds	r7, #24
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b082      	sub	sp, #8
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff35 	bl	8000760 <__NVIC_EnableIRQ>
}
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	b082      	sub	sp, #8
 8000902:	af00      	add	r7, sp, #0
 8000904:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000906:	6878      	ldr	r0, [r7, #4]
 8000908:	f7ff ffa2 	bl	8000850 <SysTick_Config>
 800090c:	4603      	mov	r3, r0
}
 800090e:	4618      	mov	r0, r3
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}

08000916 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800091a:	f000 ffe5 	bl	80018e8 <HAL_SYSTICK_Callback>
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000924:	b480      	push	{r7}
 8000926:	b08b      	sub	sp, #44	@ 0x2c
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000932:	2300      	movs	r3, #0
 8000934:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000936:	e169      	b.n	8000c0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000938:	2201      	movs	r2, #1
 800093a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800093c:	fa02 f303 	lsl.w	r3, r2, r3
 8000940:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	69fa      	ldr	r2, [r7, #28]
 8000948:	4013      	ands	r3, r2
 800094a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	429a      	cmp	r2, r3
 8000952:	f040 8158 	bne.w	8000c06 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	4a9a      	ldr	r2, [pc, #616]	@ (8000bc4 <HAL_GPIO_Init+0x2a0>)
 800095c:	4293      	cmp	r3, r2
 800095e:	d05e      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 8000960:	4a98      	ldr	r2, [pc, #608]	@ (8000bc4 <HAL_GPIO_Init+0x2a0>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d875      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 8000966:	4a98      	ldr	r2, [pc, #608]	@ (8000bc8 <HAL_GPIO_Init+0x2a4>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d058      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 800096c:	4a96      	ldr	r2, [pc, #600]	@ (8000bc8 <HAL_GPIO_Init+0x2a4>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d86f      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 8000972:	4a96      	ldr	r2, [pc, #600]	@ (8000bcc <HAL_GPIO_Init+0x2a8>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d052      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 8000978:	4a94      	ldr	r2, [pc, #592]	@ (8000bcc <HAL_GPIO_Init+0x2a8>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d869      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 800097e:	4a94      	ldr	r2, [pc, #592]	@ (8000bd0 <HAL_GPIO_Init+0x2ac>)
 8000980:	4293      	cmp	r3, r2
 8000982:	d04c      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 8000984:	4a92      	ldr	r2, [pc, #584]	@ (8000bd0 <HAL_GPIO_Init+0x2ac>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d863      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 800098a:	4a92      	ldr	r2, [pc, #584]	@ (8000bd4 <HAL_GPIO_Init+0x2b0>)
 800098c:	4293      	cmp	r3, r2
 800098e:	d046      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
 8000990:	4a90      	ldr	r2, [pc, #576]	@ (8000bd4 <HAL_GPIO_Init+0x2b0>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d85d      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 8000996:	2b12      	cmp	r3, #18
 8000998:	d82a      	bhi.n	80009f0 <HAL_GPIO_Init+0xcc>
 800099a:	2b12      	cmp	r3, #18
 800099c:	d859      	bhi.n	8000a52 <HAL_GPIO_Init+0x12e>
 800099e:	a201      	add	r2, pc, #4	@ (adr r2, 80009a4 <HAL_GPIO_Init+0x80>)
 80009a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a4:	08000a1f 	.word	0x08000a1f
 80009a8:	080009f9 	.word	0x080009f9
 80009ac:	08000a0b 	.word	0x08000a0b
 80009b0:	08000a4d 	.word	0x08000a4d
 80009b4:	08000a53 	.word	0x08000a53
 80009b8:	08000a53 	.word	0x08000a53
 80009bc:	08000a53 	.word	0x08000a53
 80009c0:	08000a53 	.word	0x08000a53
 80009c4:	08000a53 	.word	0x08000a53
 80009c8:	08000a53 	.word	0x08000a53
 80009cc:	08000a53 	.word	0x08000a53
 80009d0:	08000a53 	.word	0x08000a53
 80009d4:	08000a53 	.word	0x08000a53
 80009d8:	08000a53 	.word	0x08000a53
 80009dc:	08000a53 	.word	0x08000a53
 80009e0:	08000a53 	.word	0x08000a53
 80009e4:	08000a53 	.word	0x08000a53
 80009e8:	08000a01 	.word	0x08000a01
 80009ec:	08000a15 	.word	0x08000a15
 80009f0:	4a79      	ldr	r2, [pc, #484]	@ (8000bd8 <HAL_GPIO_Init+0x2b4>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d013      	beq.n	8000a1e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80009f6:	e02c      	b.n	8000a52 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	623b      	str	r3, [r7, #32]
          break;
 80009fe:	e029      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	3304      	adds	r3, #4
 8000a06:	623b      	str	r3, [r7, #32]
          break;
 8000a08:	e024      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a0a:	683b      	ldr	r3, [r7, #0]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	3308      	adds	r3, #8
 8000a10:	623b      	str	r3, [r7, #32]
          break;
 8000a12:	e01f      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	330c      	adds	r3, #12
 8000a1a:	623b      	str	r3, [r7, #32]
          break;
 8000a1c:	e01a      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d102      	bne.n	8000a2c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a26:	2304      	movs	r3, #4
 8000a28:	623b      	str	r3, [r7, #32]
          break;
 8000a2a:	e013      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	689b      	ldr	r3, [r3, #8]
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d105      	bne.n	8000a40 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a34:	2308      	movs	r3, #8
 8000a36:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	69fa      	ldr	r2, [r7, #28]
 8000a3c:	611a      	str	r2, [r3, #16]
          break;
 8000a3e:	e009      	b.n	8000a54 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a40:	2308      	movs	r3, #8
 8000a42:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	69fa      	ldr	r2, [r7, #28]
 8000a48:	615a      	str	r2, [r3, #20]
          break;
 8000a4a:	e003      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
          break;
 8000a50:	e000      	b.n	8000a54 <HAL_GPIO_Init+0x130>
          break;
 8000a52:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	2bff      	cmp	r3, #255	@ 0xff
 8000a58:	d801      	bhi.n	8000a5e <HAL_GPIO_Init+0x13a>
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	e001      	b.n	8000a62 <HAL_GPIO_Init+0x13e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	3304      	adds	r3, #4
 8000a62:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	2bff      	cmp	r3, #255	@ 0xff
 8000a68:	d802      	bhi.n	8000a70 <HAL_GPIO_Init+0x14c>
 8000a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a6c:	009b      	lsls	r3, r3, #2
 8000a6e:	e002      	b.n	8000a76 <HAL_GPIO_Init+0x152>
 8000a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a72:	3b08      	subs	r3, #8
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	681a      	ldr	r2, [r3, #0]
 8000a7c:	210f      	movs	r1, #15
 8000a7e:	693b      	ldr	r3, [r7, #16]
 8000a80:	fa01 f303 	lsl.w	r3, r1, r3
 8000a84:	43db      	mvns	r3, r3
 8000a86:	401a      	ands	r2, r3
 8000a88:	6a39      	ldr	r1, [r7, #32]
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	431a      	orrs	r2, r3
 8000a92:	697b      	ldr	r3, [r7, #20]
 8000a94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	f000 80b1 	beq.w	8000c06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000aa4:	4b4d      	ldr	r3, [pc, #308]	@ (8000bdc <HAL_GPIO_Init+0x2b8>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a4c      	ldr	r2, [pc, #304]	@ (8000bdc <HAL_GPIO_Init+0x2b8>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8000bdc <HAL_GPIO_Init+0x2b8>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f003 0301 	and.w	r3, r3, #1
 8000ab8:	60bb      	str	r3, [r7, #8]
 8000aba:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000abc:	4a48      	ldr	r2, [pc, #288]	@ (8000be0 <HAL_GPIO_Init+0x2bc>)
 8000abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac0:	089b      	lsrs	r3, r3, #2
 8000ac2:	3302      	adds	r3, #2
 8000ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000acc:	f003 0303 	and.w	r3, r3, #3
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	220f      	movs	r2, #15
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	68fa      	ldr	r2, [r7, #12]
 8000adc:	4013      	ands	r3, r2
 8000ade:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4a40      	ldr	r2, [pc, #256]	@ (8000be4 <HAL_GPIO_Init+0x2c0>)
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	d013      	beq.n	8000b10 <HAL_GPIO_Init+0x1ec>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a3f      	ldr	r2, [pc, #252]	@ (8000be8 <HAL_GPIO_Init+0x2c4>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d00d      	beq.n	8000b0c <HAL_GPIO_Init+0x1e8>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	4a3e      	ldr	r2, [pc, #248]	@ (8000bec <HAL_GPIO_Init+0x2c8>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d007      	beq.n	8000b08 <HAL_GPIO_Init+0x1e4>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a3d      	ldr	r2, [pc, #244]	@ (8000bf0 <HAL_GPIO_Init+0x2cc>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d101      	bne.n	8000b04 <HAL_GPIO_Init+0x1e0>
 8000b00:	2303      	movs	r3, #3
 8000b02:	e006      	b.n	8000b12 <HAL_GPIO_Init+0x1ee>
 8000b04:	2304      	movs	r3, #4
 8000b06:	e004      	b.n	8000b12 <HAL_GPIO_Init+0x1ee>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e002      	b.n	8000b12 <HAL_GPIO_Init+0x1ee>
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e000      	b.n	8000b12 <HAL_GPIO_Init+0x1ee>
 8000b10:	2300      	movs	r3, #0
 8000b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b14:	f002 0203 	and.w	r2, r2, #3
 8000b18:	0092      	lsls	r2, r2, #2
 8000b1a:	4093      	lsls	r3, r2
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4313      	orrs	r3, r2
 8000b20:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b22:	492f      	ldr	r1, [pc, #188]	@ (8000be0 <HAL_GPIO_Init+0x2bc>)
 8000b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b26:	089b      	lsrs	r3, r3, #2
 8000b28:	3302      	adds	r3, #2
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d006      	beq.n	8000b4a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b3c:	4b2d      	ldr	r3, [pc, #180]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b3e:	689a      	ldr	r2, [r3, #8]
 8000b40:	492c      	ldr	r1, [pc, #176]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	4313      	orrs	r3, r2
 8000b46:	608b      	str	r3, [r1, #8]
 8000b48:	e006      	b.n	8000b58 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b4c:	689a      	ldr	r2, [r3, #8]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	43db      	mvns	r3, r3
 8000b52:	4928      	ldr	r1, [pc, #160]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b54:	4013      	ands	r3, r2
 8000b56:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d006      	beq.n	8000b72 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b64:	4b23      	ldr	r3, [pc, #140]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b66:	68da      	ldr	r2, [r3, #12]
 8000b68:	4922      	ldr	r1, [pc, #136]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b6a:	69bb      	ldr	r3, [r7, #24]
 8000b6c:	4313      	orrs	r3, r2
 8000b6e:	60cb      	str	r3, [r1, #12]
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b72:	4b20      	ldr	r3, [pc, #128]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b74:	68da      	ldr	r2, [r3, #12]
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	491e      	ldr	r1, [pc, #120]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b80:	683b      	ldr	r3, [r7, #0]
 8000b82:	685b      	ldr	r3, [r3, #4]
 8000b84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d006      	beq.n	8000b9a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b8c:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	4918      	ldr	r1, [pc, #96]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	604b      	str	r3, [r1, #4]
 8000b98:	e006      	b.n	8000ba8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b9a:	4b16      	ldr	r3, [pc, #88]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000b9c:	685a      	ldr	r2, [r3, #4]
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	4914      	ldr	r1, [pc, #80]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d021      	beq.n	8000bf8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000bb4:	4b0f      	ldr	r3, [pc, #60]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	490e      	ldr	r1, [pc, #56]	@ (8000bf4 <HAL_GPIO_Init+0x2d0>)
 8000bba:	69bb      	ldr	r3, [r7, #24]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	600b      	str	r3, [r1, #0]
 8000bc0:	e021      	b.n	8000c06 <HAL_GPIO_Init+0x2e2>
 8000bc2:	bf00      	nop
 8000bc4:	10320000 	.word	0x10320000
 8000bc8:	10310000 	.word	0x10310000
 8000bcc:	10220000 	.word	0x10220000
 8000bd0:	10210000 	.word	0x10210000
 8000bd4:	10120000 	.word	0x10120000
 8000bd8:	10110000 	.word	0x10110000
 8000bdc:	40021000 	.word	0x40021000
 8000be0:	40010000 	.word	0x40010000
 8000be4:	40010800 	.word	0x40010800
 8000be8:	40010c00 	.word	0x40010c00
 8000bec:	40011000 	.word	0x40011000
 8000bf0:	40011400 	.word	0x40011400
 8000bf4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000bf8:	4b0b      	ldr	r3, [pc, #44]	@ (8000c28 <HAL_GPIO_Init+0x304>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	43db      	mvns	r3, r3
 8000c00:	4909      	ldr	r1, [pc, #36]	@ (8000c28 <HAL_GPIO_Init+0x304>)
 8000c02:	4013      	ands	r3, r2
 8000c04:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c08:	3301      	adds	r3, #1
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c12:	fa22 f303 	lsr.w	r3, r2, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f47f ae8e 	bne.w	8000938 <HAL_GPIO_Init+0x14>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	372c      	adds	r7, #44	@ 0x2c
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	40010400 	.word	0x40010400

08000c2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	689a      	ldr	r2, [r3, #8]
 8000c3c:	887b      	ldrh	r3, [r7, #2]
 8000c3e:	4013      	ands	r3, r2
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d002      	beq.n	8000c4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000c44:	2301      	movs	r3, #1
 8000c46:	73fb      	strb	r3, [r7, #15]
 8000c48:	e001      	b.n	8000c4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3714      	adds	r7, #20
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr

08000c5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c5a:	b480      	push	{r7}
 8000c5c:	b083      	sub	sp, #12
 8000c5e:	af00      	add	r7, sp, #0
 8000c60:	6078      	str	r0, [r7, #4]
 8000c62:	460b      	mov	r3, r1
 8000c64:	807b      	strh	r3, [r7, #2]
 8000c66:	4613      	mov	r3, r2
 8000c68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c6a:	787b      	ldrb	r3, [r7, #1]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c70:	887a      	ldrh	r2, [r7, #2]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c76:	e003      	b.n	8000c80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c78:	887b      	ldrh	r3, [r7, #2]
 8000c7a:	041a      	lsls	r2, r3, #16
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	611a      	str	r2, [r3, #16]
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bc80      	pop	{r7}
 8000c88:	4770      	bx	lr
	...

08000c8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000c96:	4b08      	ldr	r3, [pc, #32]	@ (8000cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c98:	695a      	ldr	r2, [r3, #20]
 8000c9a:	88fb      	ldrh	r3, [r7, #6]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d006      	beq.n	8000cb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ca2:	4a05      	ldr	r2, [pc, #20]	@ (8000cb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ca4:	88fb      	ldrh	r3, [r7, #6]
 8000ca6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ca8:	88fb      	ldrh	r3, [r7, #6]
 8000caa:	4618      	mov	r0, r3
 8000cac:	f000 f806 	bl	8000cbc <HAL_GPIO_EXTI_Callback>
  }
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40010400 	.word	0x40010400

08000cbc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000cc6:	bf00      	nop
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bc80      	pop	{r7}
 8000cce:	4770      	bx	lr

08000cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b086      	sub	sp, #24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e272      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	f000 8087 	beq.w	8000dfe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cf0:	4b92      	ldr	r3, [pc, #584]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b04      	cmp	r3, #4
 8000cfa:	d00c      	beq.n	8000d16 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cfc:	4b8f      	ldr	r3, [pc, #572]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 030c 	and.w	r3, r3, #12
 8000d04:	2b08      	cmp	r3, #8
 8000d06:	d112      	bne.n	8000d2e <HAL_RCC_OscConfig+0x5e>
 8000d08:	4b8c      	ldr	r3, [pc, #560]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d14:	d10b      	bne.n	8000d2e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d16:	4b89      	ldr	r3, [pc, #548]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d06c      	beq.n	8000dfc <HAL_RCC_OscConfig+0x12c>
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	685b      	ldr	r3, [r3, #4]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d168      	bne.n	8000dfc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	e24c      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	685b      	ldr	r3, [r3, #4]
 8000d32:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d36:	d106      	bne.n	8000d46 <HAL_RCC_OscConfig+0x76>
 8000d38:	4b80      	ldr	r3, [pc, #512]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a7f      	ldr	r2, [pc, #508]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	e02e      	b.n	8000da4 <HAL_RCC_OscConfig+0xd4>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d10c      	bne.n	8000d68 <HAL_RCC_OscConfig+0x98>
 8000d4e:	4b7b      	ldr	r3, [pc, #492]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a7a      	ldr	r2, [pc, #488]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4b78      	ldr	r3, [pc, #480]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a77      	ldr	r2, [pc, #476]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d60:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e01d      	b.n	8000da4 <HAL_RCC_OscConfig+0xd4>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d70:	d10c      	bne.n	8000d8c <HAL_RCC_OscConfig+0xbc>
 8000d72:	4b72      	ldr	r3, [pc, #456]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4a71      	ldr	r2, [pc, #452]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d7c:	6013      	str	r3, [r2, #0]
 8000d7e:	4b6f      	ldr	r3, [pc, #444]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a6e      	ldr	r2, [pc, #440]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d88:	6013      	str	r3, [r2, #0]
 8000d8a:	e00b      	b.n	8000da4 <HAL_RCC_OscConfig+0xd4>
 8000d8c:	4b6b      	ldr	r3, [pc, #428]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a6a      	ldr	r2, [pc, #424]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d96:	6013      	str	r3, [r2, #0]
 8000d98:	4b68      	ldr	r3, [pc, #416]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a67      	ldr	r2, [pc, #412]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000da2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	685b      	ldr	r3, [r3, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d013      	beq.n	8000dd4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dac:	f7ff fc78 	bl	80006a0 <HAL_GetTick>
 8000db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000db2:	e008      	b.n	8000dc6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db4:	f7ff fc74 	bl	80006a0 <HAL_GetTick>
 8000db8:	4602      	mov	r2, r0
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	1ad3      	subs	r3, r2, r3
 8000dbe:	2b64      	cmp	r3, #100	@ 0x64
 8000dc0:	d901      	bls.n	8000dc6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e200      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc6:	4b5d      	ldr	r3, [pc, #372]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0f0      	beq.n	8000db4 <HAL_RCC_OscConfig+0xe4>
 8000dd2:	e014      	b.n	8000dfe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fc64 	bl	80006a0 <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fc60 	bl	80006a0 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b64      	cmp	r3, #100	@ 0x64
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e1ec      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dee:	4b53      	ldr	r3, [pc, #332]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d1f0      	bne.n	8000ddc <HAL_RCC_OscConfig+0x10c>
 8000dfa:	e000      	b.n	8000dfe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0302 	and.w	r3, r3, #2
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d063      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e0a:	4b4c      	ldr	r3, [pc, #304]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	f003 030c 	and.w	r3, r3, #12
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d00b      	beq.n	8000e2e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e16:	4b49      	ldr	r3, [pc, #292]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 030c 	and.w	r3, r3, #12
 8000e1e:	2b08      	cmp	r3, #8
 8000e20:	d11c      	bne.n	8000e5c <HAL_RCC_OscConfig+0x18c>
 8000e22:	4b46      	ldr	r3, [pc, #280]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e24:	685b      	ldr	r3, [r3, #4]
 8000e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d116      	bne.n	8000e5c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e2e:	4b43      	ldr	r3, [pc, #268]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d005      	beq.n	8000e46 <HAL_RCC_OscConfig+0x176>
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	691b      	ldr	r3, [r3, #16]
 8000e3e:	2b01      	cmp	r3, #1
 8000e40:	d001      	beq.n	8000e46 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e1c0      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e46:	4b3d      	ldr	r3, [pc, #244]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	695b      	ldr	r3, [r3, #20]
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	4939      	ldr	r1, [pc, #228]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e56:	4313      	orrs	r3, r2
 8000e58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e5a:	e03a      	b.n	8000ed2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d020      	beq.n	8000ea6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e64:	4b36      	ldr	r3, [pc, #216]	@ (8000f40 <HAL_RCC_OscConfig+0x270>)
 8000e66:	2201      	movs	r2, #1
 8000e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e6a:	f7ff fc19 	bl	80006a0 <HAL_GetTick>
 8000e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e70:	e008      	b.n	8000e84 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e72:	f7ff fc15 	bl	80006a0 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	2b02      	cmp	r3, #2
 8000e7e:	d901      	bls.n	8000e84 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e80:	2303      	movs	r3, #3
 8000e82:	e1a1      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e84:	4b2d      	ldr	r3, [pc, #180]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f0      	beq.n	8000e72 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e90:	4b2a      	ldr	r3, [pc, #168]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	695b      	ldr	r3, [r3, #20]
 8000e9c:	00db      	lsls	r3, r3, #3
 8000e9e:	4927      	ldr	r1, [pc, #156]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	600b      	str	r3, [r1, #0]
 8000ea4:	e015      	b.n	8000ed2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <HAL_RCC_OscConfig+0x270>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eac:	f7ff fbf8 	bl	80006a0 <HAL_GetTick>
 8000eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eb2:	e008      	b.n	8000ec6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb4:	f7ff fbf4 	bl	80006a0 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	693b      	ldr	r3, [r7, #16]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d901      	bls.n	8000ec6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	e180      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f003 0302 	and.w	r3, r3, #2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f0      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d03a      	beq.n	8000f54 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d019      	beq.n	8000f1a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ee6:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <HAL_RCC_OscConfig+0x274>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eec:	f7ff fbd8 	bl	80006a0 <HAL_GetTick>
 8000ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ef2:	e008      	b.n	8000f06 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ef4:	f7ff fbd4 	bl	80006a0 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	2b02      	cmp	r3, #2
 8000f00:	d901      	bls.n	8000f06 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f02:	2303      	movs	r3, #3
 8000f04:	e160      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f06:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <HAL_RCC_OscConfig+0x26c>)
 8000f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d0f0      	beq.n	8000ef4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f12:	2001      	movs	r0, #1
 8000f14:	f000 face 	bl	80014b4 <RCC_Delay>
 8000f18:	e01c      	b.n	8000f54 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <HAL_RCC_OscConfig+0x274>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f20:	f7ff fbbe 	bl	80006a0 <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f26:	e00f      	b.n	8000f48 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f28:	f7ff fbba 	bl	80006a0 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d908      	bls.n	8000f48 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e146      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
 8000f3a:	bf00      	nop
 8000f3c:	40021000 	.word	0x40021000
 8000f40:	42420000 	.word	0x42420000
 8000f44:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f48:	4b92      	ldr	r3, [pc, #584]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f4c:	f003 0302 	and.w	r3, r3, #2
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d1e9      	bne.n	8000f28 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0304 	and.w	r3, r3, #4
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	f000 80a6 	beq.w	80010ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f62:	2300      	movs	r3, #0
 8000f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f66:	4b8b      	ldr	r3, [pc, #556]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d10d      	bne.n	8000f8e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f72:	4b88      	ldr	r3, [pc, #544]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000f74:	69db      	ldr	r3, [r3, #28]
 8000f76:	4a87      	ldr	r2, [pc, #540]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f7c:	61d3      	str	r3, [r2, #28]
 8000f7e:	4b85      	ldr	r3, [pc, #532]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8e:	4b82      	ldr	r3, [pc, #520]	@ (8001198 <HAL_RCC_OscConfig+0x4c8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d118      	bne.n	8000fcc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001198 <HAL_RCC_OscConfig+0x4c8>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001198 <HAL_RCC_OscConfig+0x4c8>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fa6:	f7ff fb7b 	bl	80006a0 <HAL_GetTick>
 8000faa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fac:	e008      	b.n	8000fc0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fae:	f7ff fb77 	bl	80006a0 <HAL_GetTick>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	1ad3      	subs	r3, r2, r3
 8000fb8:	2b64      	cmp	r3, #100	@ 0x64
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e103      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc0:	4b75      	ldr	r3, [pc, #468]	@ (8001198 <HAL_RCC_OscConfig+0x4c8>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0f0      	beq.n	8000fae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	68db      	ldr	r3, [r3, #12]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d106      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x312>
 8000fd4:	4b6f      	ldr	r3, [pc, #444]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	4a6e      	ldr	r2, [pc, #440]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000fda:	f043 0301 	orr.w	r3, r3, #1
 8000fde:	6213      	str	r3, [r2, #32]
 8000fe0:	e02d      	b.n	800103e <HAL_RCC_OscConfig+0x36e>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d10c      	bne.n	8001004 <HAL_RCC_OscConfig+0x334>
 8000fea:	4b6a      	ldr	r3, [pc, #424]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	4a69      	ldr	r2, [pc, #420]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000ff0:	f023 0301 	bic.w	r3, r3, #1
 8000ff4:	6213      	str	r3, [r2, #32]
 8000ff6:	4b67      	ldr	r3, [pc, #412]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	6a1b      	ldr	r3, [r3, #32]
 8000ffa:	4a66      	ldr	r2, [pc, #408]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8000ffc:	f023 0304 	bic.w	r3, r3, #4
 8001000:	6213      	str	r3, [r2, #32]
 8001002:	e01c      	b.n	800103e <HAL_RCC_OscConfig+0x36e>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	2b05      	cmp	r3, #5
 800100a:	d10c      	bne.n	8001026 <HAL_RCC_OscConfig+0x356>
 800100c:	4b61      	ldr	r3, [pc, #388]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 800100e:	6a1b      	ldr	r3, [r3, #32]
 8001010:	4a60      	ldr	r2, [pc, #384]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001012:	f043 0304 	orr.w	r3, r3, #4
 8001016:	6213      	str	r3, [r2, #32]
 8001018:	4b5e      	ldr	r3, [pc, #376]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 800101a:	6a1b      	ldr	r3, [r3, #32]
 800101c:	4a5d      	ldr	r2, [pc, #372]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	6213      	str	r3, [r2, #32]
 8001024:	e00b      	b.n	800103e <HAL_RCC_OscConfig+0x36e>
 8001026:	4b5b      	ldr	r3, [pc, #364]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	4a5a      	ldr	r2, [pc, #360]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	6213      	str	r3, [r2, #32]
 8001032:	4b58      	ldr	r3, [pc, #352]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001034:	6a1b      	ldr	r3, [r3, #32]
 8001036:	4a57      	ldr	r2, [pc, #348]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001038:	f023 0304 	bic.w	r3, r3, #4
 800103c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d015      	beq.n	8001072 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001046:	f7ff fb2b 	bl	80006a0 <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800104c:	e00a      	b.n	8001064 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800104e:	f7ff fb27 	bl	80006a0 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	f241 3288 	movw	r2, #5000	@ 0x1388
 800105c:	4293      	cmp	r3, r2
 800105e:	d901      	bls.n	8001064 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001060:	2303      	movs	r3, #3
 8001062:	e0b1      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001064:	4b4b      	ldr	r3, [pc, #300]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001066:	6a1b      	ldr	r3, [r3, #32]
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b00      	cmp	r3, #0
 800106e:	d0ee      	beq.n	800104e <HAL_RCC_OscConfig+0x37e>
 8001070:	e014      	b.n	800109c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001072:	f7ff fb15 	bl	80006a0 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001078:	e00a      	b.n	8001090 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800107a:	f7ff fb11 	bl	80006a0 <HAL_GetTick>
 800107e:	4602      	mov	r2, r0
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	1ad3      	subs	r3, r2, r3
 8001084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001088:	4293      	cmp	r3, r2
 800108a:	d901      	bls.n	8001090 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	e09b      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001090:	4b40      	ldr	r3, [pc, #256]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	f003 0302 	and.w	r3, r3, #2
 8001098:	2b00      	cmp	r3, #0
 800109a:	d1ee      	bne.n	800107a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800109c:	7dfb      	ldrb	r3, [r7, #23]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d105      	bne.n	80010ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 80010a4:	69db      	ldr	r3, [r3, #28]
 80010a6:	4a3b      	ldr	r2, [pc, #236]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	69db      	ldr	r3, [r3, #28]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 8087 	beq.w	80011c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b8:	4b36      	ldr	r3, [pc, #216]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b08      	cmp	r3, #8
 80010c2:	d061      	beq.n	8001188 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d146      	bne.n	800115a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010cc:	4b33      	ldr	r3, [pc, #204]	@ (800119c <HAL_RCC_OscConfig+0x4cc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d2:	f7ff fae5 	bl	80006a0 <HAL_GetTick>
 80010d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d8:	e008      	b.n	80010ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010da:	f7ff fae1 	bl	80006a0 <HAL_GetTick>
 80010de:	4602      	mov	r2, r0
 80010e0:	693b      	ldr	r3, [r7, #16]
 80010e2:	1ad3      	subs	r3, r2, r3
 80010e4:	2b02      	cmp	r3, #2
 80010e6:	d901      	bls.n	80010ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010e8:	2303      	movs	r3, #3
 80010ea:	e06d      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ec:	4b29      	ldr	r3, [pc, #164]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1f0      	bne.n	80010da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6a1b      	ldr	r3, [r3, #32]
 80010fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001100:	d108      	bne.n	8001114 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001102:	4b24      	ldr	r3, [pc, #144]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689b      	ldr	r3, [r3, #8]
 800110e:	4921      	ldr	r1, [pc, #132]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001110:	4313      	orrs	r3, r2
 8001112:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001114:	4b1f      	ldr	r3, [pc, #124]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a19      	ldr	r1, [r3, #32]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001124:	430b      	orrs	r3, r1
 8001126:	491b      	ldr	r1, [pc, #108]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 8001128:	4313      	orrs	r3, r2
 800112a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800112c:	4b1b      	ldr	r3, [pc, #108]	@ (800119c <HAL_RCC_OscConfig+0x4cc>)
 800112e:	2201      	movs	r2, #1
 8001130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001132:	f7ff fab5 	bl	80006a0 <HAL_GetTick>
 8001136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001138:	e008      	b.n	800114c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800113a:	f7ff fab1 	bl	80006a0 <HAL_GetTick>
 800113e:	4602      	mov	r2, r0
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	2b02      	cmp	r3, #2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e03d      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d0f0      	beq.n	800113a <HAL_RCC_OscConfig+0x46a>
 8001158:	e035      	b.n	80011c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800115a:	4b10      	ldr	r3, [pc, #64]	@ (800119c <HAL_RCC_OscConfig+0x4cc>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fa9e 	bl	80006a0 <HAL_GetTick>
 8001164:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001166:	e008      	b.n	800117a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001168:	f7ff fa9a 	bl	80006a0 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	2b02      	cmp	r3, #2
 8001174:	d901      	bls.n	800117a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001176:	2303      	movs	r3, #3
 8001178:	e026      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <HAL_RCC_OscConfig+0x4c4>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001182:	2b00      	cmp	r3, #0
 8001184:	d1f0      	bne.n	8001168 <HAL_RCC_OscConfig+0x498>
 8001186:	e01e      	b.n	80011c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69db      	ldr	r3, [r3, #28]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d107      	bne.n	80011a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001190:	2301      	movs	r3, #1
 8001192:	e019      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
 8001194:	40021000 	.word	0x40021000
 8001198:	40007000 	.word	0x40007000
 800119c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011a0:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <HAL_RCC_OscConfig+0x500>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d106      	bne.n	80011c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011be:	429a      	cmp	r2, r3
 80011c0:	d001      	beq.n	80011c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e000      	b.n	80011c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011c6:	2300      	movs	r3, #0
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3718      	adds	r7, #24
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40021000 	.word	0x40021000

080011d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0d0      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d910      	bls.n	8001218 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b67      	ldr	r3, [pc, #412]	@ (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 0207 	bic.w	r2, r3, #7
 80011fe:	4965      	ldr	r1, [pc, #404]	@ (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001206:	4b63      	ldr	r3, [pc, #396]	@ (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d001      	beq.n	8001218 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e0b8      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d020      	beq.n	8001266 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d005      	beq.n	800123c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001230:	4b59      	ldr	r3, [pc, #356]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4a58      	ldr	r2, [pc, #352]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001236:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800123a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0308 	and.w	r3, r3, #8
 8001244:	2b00      	cmp	r3, #0
 8001246:	d005      	beq.n	8001254 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001248:	4b53      	ldr	r3, [pc, #332]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4a52      	ldr	r2, [pc, #328]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800124e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001252:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001254:	4b50      	ldr	r3, [pc, #320]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	494d      	ldr	r1, [pc, #308]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	4313      	orrs	r3, r2
 8001264:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d040      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800127a:	4b47      	ldr	r3, [pc, #284]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d115      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e07f      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001292:	4b41      	ldr	r3, [pc, #260]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e073      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	4b3d      	ldr	r3, [pc, #244]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e06b      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b2:	4b39      	ldr	r3, [pc, #228]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f023 0203 	bic.w	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4936      	ldr	r1, [pc, #216]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c4:	f7ff f9ec 	bl	80006a0 <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012cc:	f7ff f9e8 	bl	80006a0 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e053      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f003 020c 	and.w	r2, r3, #12
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d1eb      	bne.n	80012cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012f4:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d210      	bcs.n	8001324 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b24      	ldr	r3, [pc, #144]	@ (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f023 0207 	bic.w	r2, r3, #7
 800130a:	4922      	ldr	r1, [pc, #136]	@ (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4313      	orrs	r3, r2
 8001310:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d001      	beq.n	8001324 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	e032      	b.n	800138a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d008      	beq.n	8001342 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001330:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	4916      	ldr	r1, [pc, #88]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800133e:	4313      	orrs	r3, r2
 8001340:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	2b00      	cmp	r3, #0
 800134c:	d009      	beq.n	8001362 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800134e:	4b12      	ldr	r3, [pc, #72]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	00db      	lsls	r3, r3, #3
 800135c:	490e      	ldr	r1, [pc, #56]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800135e:	4313      	orrs	r3, r2
 8001360:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001362:	f000 f821 	bl	80013a8 <HAL_RCC_GetSysClockFreq>
 8001366:	4602      	mov	r2, r0
 8001368:	4b0b      	ldr	r3, [pc, #44]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	091b      	lsrs	r3, r3, #4
 800136e:	f003 030f 	and.w	r3, r3, #15
 8001372:	490a      	ldr	r1, [pc, #40]	@ (800139c <HAL_RCC_ClockConfig+0x1c8>)
 8001374:	5ccb      	ldrb	r3, [r1, r3]
 8001376:	fa22 f303 	lsr.w	r3, r2, r3
 800137a:	4a09      	ldr	r2, [pc, #36]	@ (80013a0 <HAL_RCC_ClockConfig+0x1cc>)
 800137c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800137e:	4b09      	ldr	r3, [pc, #36]	@ (80013a4 <HAL_RCC_ClockConfig+0x1d0>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f94a 	bl	800061c <HAL_InitTick>

  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40022000 	.word	0x40022000
 8001398:	40021000 	.word	0x40021000
 800139c:	080045b8 	.word	0x080045b8
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000004 	.word	0x20000004

080013a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013c2:	4b1e      	ldr	r3, [pc, #120]	@ (800143c <HAL_RCC_GetSysClockFreq+0x94>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d002      	beq.n	80013d8 <HAL_RCC_GetSysClockFreq+0x30>
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d003      	beq.n	80013de <HAL_RCC_GetSysClockFreq+0x36>
 80013d6:	e027      	b.n	8001428 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013d8:	4b19      	ldr	r3, [pc, #100]	@ (8001440 <HAL_RCC_GetSysClockFreq+0x98>)
 80013da:	613b      	str	r3, [r7, #16]
      break;
 80013dc:	e027      	b.n	800142e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	0c9b      	lsrs	r3, r3, #18
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	4a17      	ldr	r2, [pc, #92]	@ (8001444 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013e8:	5cd3      	ldrb	r3, [r2, r3]
 80013ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d010      	beq.n	8001418 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_RCC_GetSysClockFreq+0x94>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	0c5b      	lsrs	r3, r3, #17
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	4a11      	ldr	r2, [pc, #68]	@ (8001448 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001402:	5cd3      	ldrb	r3, [r2, r3]
 8001404:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	4a0d      	ldr	r2, [pc, #52]	@ (8001440 <HAL_RCC_GetSysClockFreq+0x98>)
 800140a:	fb03 f202 	mul.w	r2, r3, r2
 800140e:	68bb      	ldr	r3, [r7, #8]
 8001410:	fbb2 f3f3 	udiv	r3, r2, r3
 8001414:	617b      	str	r3, [r7, #20]
 8001416:	e004      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	4a0c      	ldr	r2, [pc, #48]	@ (800144c <HAL_RCC_GetSysClockFreq+0xa4>)
 800141c:	fb02 f303 	mul.w	r3, r2, r3
 8001420:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001422:	697b      	ldr	r3, [r7, #20]
 8001424:	613b      	str	r3, [r7, #16]
      break;
 8001426:	e002      	b.n	800142e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001428:	4b05      	ldr	r3, [pc, #20]	@ (8001440 <HAL_RCC_GetSysClockFreq+0x98>)
 800142a:	613b      	str	r3, [r7, #16]
      break;
 800142c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800142e:	693b      	ldr	r3, [r7, #16]
}
 8001430:	4618      	mov	r0, r3
 8001432:	371c      	adds	r7, #28
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	40021000 	.word	0x40021000
 8001440:	007a1200 	.word	0x007a1200
 8001444:	080045d0 	.word	0x080045d0
 8001448:	080045e0 	.word	0x080045e0
 800144c:	003d0900 	.word	0x003d0900

08001450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001454:	4b02      	ldr	r3, [pc, #8]	@ (8001460 <HAL_RCC_GetHCLKFreq+0x10>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20000000 	.word	0x20000000

08001464 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001468:	f7ff fff2 	bl	8001450 <HAL_RCC_GetHCLKFreq>
 800146c:	4602      	mov	r2, r0
 800146e:	4b05      	ldr	r3, [pc, #20]	@ (8001484 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	0a1b      	lsrs	r3, r3, #8
 8001474:	f003 0307 	and.w	r3, r3, #7
 8001478:	4903      	ldr	r1, [pc, #12]	@ (8001488 <HAL_RCC_GetPCLK1Freq+0x24>)
 800147a:	5ccb      	ldrb	r3, [r1, r3]
 800147c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001480:	4618      	mov	r0, r3
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40021000 	.word	0x40021000
 8001488:	080045c8 	.word	0x080045c8

0800148c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001490:	f7ff ffde 	bl	8001450 <HAL_RCC_GetHCLKFreq>
 8001494:	4602      	mov	r2, r0
 8001496:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	0adb      	lsrs	r3, r3, #11
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	4903      	ldr	r1, [pc, #12]	@ (80014b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80014a2:	5ccb      	ldrb	r3, [r1, r3]
 80014a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	080045c8 	.word	0x080045c8

080014b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014bc:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <RCC_Delay+0x34>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <RCC_Delay+0x38>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	0a5b      	lsrs	r3, r3, #9
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014d0:	bf00      	nop
  }
  while (Delay --);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1e5a      	subs	r2, r3, #1
 80014d6:	60fa      	str	r2, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f9      	bne.n	80014d0 <RCC_Delay+0x1c>
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000000 	.word	0x20000000
 80014ec:	10624dd3 	.word	0x10624dd3

080014f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e042      	b.n	8001588 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d106      	bne.n	800151c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	2200      	movs	r2, #0
 8001512:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f7fe ff94 	bl	8000444 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2224      	movs	r2, #36	@ 0x24
 8001520:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	68da      	ldr	r2, [r3, #12]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f000 f82b 	bl	8001590 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	691a      	ldr	r2, [r3, #16]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	695a      	ldr	r2, [r3, #20]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	68da      	ldr	r2, [r3, #12]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2200      	movs	r2, #0
 800156e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2220      	movs	r2, #32
 8001574:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2220      	movs	r2, #32
 800157c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2200      	movs	r2, #0
 8001584:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001586:	2300      	movs	r3, #0
}
 8001588:	4618      	mov	r0, r3
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}

08001590 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	691b      	ldr	r3, [r3, #16]
 800159e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68da      	ldr	r2, [r3, #12]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	430a      	orrs	r2, r1
 80015ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	689a      	ldr	r2, [r3, #8]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	691b      	ldr	r3, [r3, #16]
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	695b      	ldr	r3, [r3, #20]
 80015bc:	4313      	orrs	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80015ca:	f023 030c 	bic.w	r3, r3, #12
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6812      	ldr	r2, [r2, #0]
 80015d2:	68b9      	ldr	r1, [r7, #8]
 80015d4:	430b      	orrs	r3, r1
 80015d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699a      	ldr	r2, [r3, #24]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a2c      	ldr	r2, [pc, #176]	@ (80016a4 <UART_SetConfig+0x114>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d103      	bne.n	8001600 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80015f8:	f7ff ff48 	bl	800148c <HAL_RCC_GetPCLK2Freq>
 80015fc:	60f8      	str	r0, [r7, #12]
 80015fe:	e002      	b.n	8001606 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001600:	f7ff ff30 	bl	8001464 <HAL_RCC_GetPCLK1Freq>
 8001604:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001606:	68fa      	ldr	r2, [r7, #12]
 8001608:	4613      	mov	r3, r2
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	4413      	add	r3, r2
 800160e:	009a      	lsls	r2, r3, #2
 8001610:	441a      	add	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	fbb2 f3f3 	udiv	r3, r2, r3
 800161c:	4a22      	ldr	r2, [pc, #136]	@ (80016a8 <UART_SetConfig+0x118>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	0119      	lsls	r1, r3, #4
 8001626:	68fa      	ldr	r2, [r7, #12]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	009a      	lsls	r2, r3, #2
 8001630:	441a      	add	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	fbb2 f2f3 	udiv	r2, r2, r3
 800163c:	4b1a      	ldr	r3, [pc, #104]	@ (80016a8 <UART_SetConfig+0x118>)
 800163e:	fba3 0302 	umull	r0, r3, r3, r2
 8001642:	095b      	lsrs	r3, r3, #5
 8001644:	2064      	movs	r0, #100	@ 0x64
 8001646:	fb00 f303 	mul.w	r3, r0, r3
 800164a:	1ad3      	subs	r3, r2, r3
 800164c:	011b      	lsls	r3, r3, #4
 800164e:	3332      	adds	r3, #50	@ 0x32
 8001650:	4a15      	ldr	r2, [pc, #84]	@ (80016a8 <UART_SetConfig+0x118>)
 8001652:	fba2 2303 	umull	r2, r3, r2, r3
 8001656:	095b      	lsrs	r3, r3, #5
 8001658:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800165c:	4419      	add	r1, r3
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4613      	mov	r3, r2
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	4413      	add	r3, r2
 8001666:	009a      	lsls	r2, r3, #2
 8001668:	441a      	add	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	fbb2 f2f3 	udiv	r2, r2, r3
 8001674:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <UART_SetConfig+0x118>)
 8001676:	fba3 0302 	umull	r0, r3, r3, r2
 800167a:	095b      	lsrs	r3, r3, #5
 800167c:	2064      	movs	r0, #100	@ 0x64
 800167e:	fb00 f303 	mul.w	r3, r0, r3
 8001682:	1ad3      	subs	r3, r2, r3
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	3332      	adds	r3, #50	@ 0x32
 8001688:	4a07      	ldr	r2, [pc, #28]	@ (80016a8 <UART_SetConfig+0x118>)
 800168a:	fba2 2303 	umull	r2, r3, r2, r3
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	f003 020f 	and.w	r2, r3, #15
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	440a      	add	r2, r1
 800169a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40013800 	.word	0x40013800
 80016a8:	51eb851f 	.word	0x51eb851f

080016ac <app_init>:

task_dta_t task_dta_list[TASK_QTY];

/********************** external functions definition ************************/
void app_init(void)
{
 80016ac:	b590      	push	{r4, r7, lr}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af02      	add	r7, sp, #8
	uint32_t index;

	/* Print out: Application Initialized */
	LOGGER_LOG("\r\n");
 80016b2:	b672      	cpsid	i
 80016b4:	4b4a      	ldr	r3, [pc, #296]	@ (80017e0 <app_init+0x134>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a4a      	ldr	r2, [pc, #296]	@ (80017e4 <app_init+0x138>)
 80016ba:	213f      	movs	r1, #63	@ 0x3f
 80016bc:	4618      	mov	r0, r3
 80016be:	f001 fe39 	bl	8003334 <sniprintf>
 80016c2:	4603      	mov	r3, r0
 80016c4:	4a48      	ldr	r2, [pc, #288]	@ (80017e8 <app_init+0x13c>)
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b45      	ldr	r3, [pc, #276]	@ (80017e0 <app_init+0x134>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fc6d 	bl	8001fac <logger_log_print_>
 80016d2:	b662      	cpsie	i
	LOGGER_LOG("%s is running - Tick [mS] = %d\r\n", GET_NAME(app_init), (int)HAL_GetTick());
 80016d4:	b672      	cpsid	i
 80016d6:	4b42      	ldr	r3, [pc, #264]	@ (80017e0 <app_init+0x134>)
 80016d8:	681c      	ldr	r4, [r3, #0]
 80016da:	f7fe ffe1 	bl	80006a0 <HAL_GetTick>
 80016de:	4603      	mov	r3, r0
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	4b42      	ldr	r3, [pc, #264]	@ (80017ec <app_init+0x140>)
 80016e4:	4a42      	ldr	r2, [pc, #264]	@ (80017f0 <app_init+0x144>)
 80016e6:	213f      	movs	r1, #63	@ 0x3f
 80016e8:	4620      	mov	r0, r4
 80016ea:	f001 fe23 	bl	8003334 <sniprintf>
 80016ee:	4603      	mov	r3, r0
 80016f0:	4a3d      	ldr	r2, [pc, #244]	@ (80017e8 <app_init+0x13c>)
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	4b3a      	ldr	r3, [pc, #232]	@ (80017e0 <app_init+0x134>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f000 fc57 	bl	8001fac <logger_log_print_>
 80016fe:	b662      	cpsie	i

	LOGGER_LOG(p_sys);
 8001700:	b672      	cpsid	i
 8001702:	4b37      	ldr	r3, [pc, #220]	@ (80017e0 <app_init+0x134>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a3b      	ldr	r2, [pc, #236]	@ (80017f4 <app_init+0x148>)
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	213f      	movs	r1, #63	@ 0x3f
 800170c:	4618      	mov	r0, r3
 800170e:	f001 fe11 	bl	8003334 <sniprintf>
 8001712:	4603      	mov	r3, r0
 8001714:	4a34      	ldr	r2, [pc, #208]	@ (80017e8 <app_init+0x13c>)
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	4b31      	ldr	r3, [pc, #196]	@ (80017e0 <app_init+0x134>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f000 fc45 	bl	8001fac <logger_log_print_>
 8001722:	b662      	cpsie	i
	LOGGER_LOG(p_app);
 8001724:	b672      	cpsid	i
 8001726:	4b2e      	ldr	r3, [pc, #184]	@ (80017e0 <app_init+0x134>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a33      	ldr	r2, [pc, #204]	@ (80017f8 <app_init+0x14c>)
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	213f      	movs	r1, #63	@ 0x3f
 8001730:	4618      	mov	r0, r3
 8001732:	f001 fdff 	bl	8003334 <sniprintf>
 8001736:	4603      	mov	r3, r0
 8001738:	4a2b      	ldr	r2, [pc, #172]	@ (80017e8 <app_init+0x13c>)
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <app_init+0x134>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f000 fc33 	bl	8001fac <logger_log_print_>
 8001746:	b662      	cpsie	i

	g_app_cnt = G_APP_CNT_INI;
 8001748:	4b2c      	ldr	r3, [pc, #176]	@ (80017fc <app_init+0x150>)
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]

	/* Print out: Application execution counter */
	LOGGER_LOG(" %s = %d\r\n", GET_NAME(g_app_cnt), (int)g_app_cnt);
 800174e:	b672      	cpsid	i
 8001750:	4b23      	ldr	r3, [pc, #140]	@ (80017e0 <app_init+0x134>)
 8001752:	6818      	ldr	r0, [r3, #0]
 8001754:	4b29      	ldr	r3, [pc, #164]	@ (80017fc <app_init+0x150>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	4b29      	ldr	r3, [pc, #164]	@ (8001800 <app_init+0x154>)
 800175c:	4a29      	ldr	r2, [pc, #164]	@ (8001804 <app_init+0x158>)
 800175e:	213f      	movs	r1, #63	@ 0x3f
 8001760:	f001 fde8 	bl	8003334 <sniprintf>
 8001764:	4603      	mov	r3, r0
 8001766:	4a20      	ldr	r2, [pc, #128]	@ (80017e8 <app_init+0x13c>)
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b1d      	ldr	r3, [pc, #116]	@ (80017e0 <app_init+0x134>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4618      	mov	r0, r3
 8001770:	f000 fc1c 	bl	8001fac <logger_log_print_>
 8001774:	b662      	cpsie	i

	/* Go through the task arrays */
	for (index = 0; TASK_QTY > index; index++)
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	e01a      	b.n	80017b2 <app_init+0x106>
	{
		/* Run task_x_init */
		(*task_cfg_list[index].task_init)(task_cfg_list[index].parameters);
 800177c:	4922      	ldr	r1, [pc, #136]	@ (8001808 <app_init+0x15c>)
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	6819      	ldr	r1, [r3, #0]
 800178c:	481e      	ldr	r0, [pc, #120]	@ (8001808 <app_init+0x15c>)
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	4403      	add	r3, r0
 800179a:	3308      	adds	r3, #8
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	4788      	blx	r1

		/* Init variables */
		task_dta_list[index].WCET = TASK_X_WCET_INI;
 80017a2:	4a1a      	ldr	r2, [pc, #104]	@ (800180c <app_init+0x160>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2100      	movs	r1, #0
 80017a8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (index = 0; TASK_QTY > index; index++)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	3301      	adds	r3, #1
 80017b0:	607b      	str	r3, [r7, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d9e1      	bls.n	800177c <app_init+0xd0>
	}

	cycle_counter_init();
 80017b8:	4b15      	ldr	r3, [pc, #84]	@ (8001810 <app_init+0x164>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	4a14      	ldr	r2, [pc, #80]	@ (8001810 <app_init+0x164>)
 80017be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80017c2:	60d3      	str	r3, [r2, #12]
 80017c4:	4b13      	ldr	r3, [pc, #76]	@ (8001814 <app_init+0x168>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <app_init+0x168>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a11      	ldr	r2, [pc, #68]	@ (8001814 <app_init+0x168>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6013      	str	r3, [r2, #0]
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	bd90      	pop	{r4, r7, pc}
 80017de:	bf00      	nop
 80017e0:	080045fc 	.word	0x080045fc
 80017e4:	080042e8 	.word	0x080042e8
 80017e8:	20000168 	.word	0x20000168
 80017ec:	080042ec 	.word	0x080042ec
 80017f0:	080042f8 	.word	0x080042f8
 80017f4:	2000000c 	.word	0x2000000c
 80017f8:	20000010 	.word	0x20000010
 80017fc:	200000fc 	.word	0x200000fc
 8001800:	0800431c 	.word	0x0800431c
 8001804:	08004328 	.word	0x08004328
 8001808:	080045e4 	.word	0x080045e4
 800180c:	20000108 	.word	0x20000108
 8001810:	e000edf0 	.word	0xe000edf0
 8001814:	e0001000 	.word	0xe0001000

08001818 <app_update>:

void app_update(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
	uint32_t index;
	uint32_t cycle_counter;
	uint32_t cycle_counter_time_us;

	/* Check if it's time to run tasks */
	if (G_APP_TICK_CNT_INI < g_app_tick_cnt)
 800181e:	4b2a      	ldr	r3, [pc, #168]	@ (80018c8 <app_update+0xb0>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d04c      	beq.n	80018c0 <app_update+0xa8>
    {
    	g_app_tick_cnt--;
 8001826:	4b28      	ldr	r3, [pc, #160]	@ (80018c8 <app_update+0xb0>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	3b01      	subs	r3, #1
 800182c:	4a26      	ldr	r2, [pc, #152]	@ (80018c8 <app_update+0xb0>)
 800182e:	6013      	str	r3, [r2, #0]

    	/* Update App Counter */
    	g_app_cnt++;
 8001830:	4b26      	ldr	r3, [pc, #152]	@ (80018cc <app_update+0xb4>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	3301      	adds	r3, #1
 8001836:	4a25      	ldr	r2, [pc, #148]	@ (80018cc <app_update+0xb4>)
 8001838:	6013      	str	r3, [r2, #0]
    	g_app_time_us = 0;
 800183a:	4b25      	ldr	r3, [pc, #148]	@ (80018d0 <app_update+0xb8>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]

    	/* Go through the task arrays */
    	for (index = 0; TASK_QTY > index; index++)
 8001840:	2300      	movs	r3, #0
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e039      	b.n	80018ba <app_update+0xa2>
    	{
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
			cycle_counter_reset();
 8001846:	4b23      	ldr	r3, [pc, #140]	@ (80018d4 <app_update+0xbc>)
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]

    		/* Run task_x_update */
			(*task_cfg_list[index].task_update)(task_cfg_list[index].parameters);
 800184c:	4922      	ldr	r1, [pc, #136]	@ (80018d8 <app_update+0xc0>)
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	3304      	adds	r3, #4
 800185c:	6819      	ldr	r1, [r3, #0]
 800185e:	481e      	ldr	r0, [pc, #120]	@ (80018d8 <app_update+0xc0>)
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4403      	add	r3, r0
 800186c:	3308      	adds	r3, #8
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	4788      	blx	r1

			cycle_counter = cycle_counter_get();
 8001874:	4b17      	ldr	r3, [pc, #92]	@ (80018d4 <app_update+0xbc>)
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	60bb      	str	r3, [r7, #8]
			cycle_counter_time_us = cycle_counter_time_us();
 800187a:	4b16      	ldr	r3, [pc, #88]	@ (80018d4 <app_update+0xbc>)
 800187c:	685a      	ldr	r2, [r3, #4]
 800187e:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <app_update+0xc4>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4917      	ldr	r1, [pc, #92]	@ (80018e0 <app_update+0xc8>)
 8001884:	fba1 1303 	umull	r1, r3, r1, r3
 8001888:	0c9b      	lsrs	r3, r3, #18
 800188a:	fbb2 f3f3 	udiv	r3, r2, r3
 800188e:	607b      	str	r3, [r7, #4]
			//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);

			/* Update variables */
	    	g_app_time_us += cycle_counter_time_us;
 8001890:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <app_update+0xb8>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4413      	add	r3, r2
 8001898:	4a0d      	ldr	r2, [pc, #52]	@ (80018d0 <app_update+0xb8>)
 800189a:	6013      	str	r3, [r2, #0]

			if (task_dta_list[index].WCET < cycle_counter_time_us)
 800189c:	4a11      	ldr	r2, [pc, #68]	@ (80018e4 <app_update+0xcc>)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d904      	bls.n	80018b4 <app_update+0x9c>
			{
				task_dta_list[index].WCET = cycle_counter_time_us;
 80018aa:	490e      	ldr	r1, [pc, #56]	@ (80018e4 <app_update+0xcc>)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    	for (index = 0; TASK_QTY > index; index++)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	3301      	adds	r3, #1
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d9c2      	bls.n	8001846 <app_update+0x2e>
			}
	    }
    }
}
 80018c0:	bf00      	nop
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000104 	.word	0x20000104
 80018cc:	200000fc 	.word	0x200000fc
 80018d0:	20000100 	.word	0x20000100
 80018d4:	e0001000 	.word	0xe0001000
 80018d8:	080045e4 	.word	0x080045e4
 80018dc:	20000000 	.word	0x20000000
 80018e0:	431bde83 	.word	0x431bde83
 80018e4:	20000108 	.word	0x20000108

080018e8 <HAL_SYSTICK_Callback>:

void HAL_SYSTICK_Callback(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
	g_app_tick_cnt++;
 80018ec:	4b09      	ldr	r3, [pc, #36]	@ (8001914 <HAL_SYSTICK_Callback+0x2c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	4a08      	ldr	r2, [pc, #32]	@ (8001914 <HAL_SYSTICK_Callback+0x2c>)
 80018f4:	6013      	str	r3, [r2, #0]

	g_task_sensor_tick_cnt++;
 80018f6:	4b08      	ldr	r3, [pc, #32]	@ (8001918 <HAL_SYSTICK_Callback+0x30>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3301      	adds	r3, #1
 80018fc:	4a06      	ldr	r2, [pc, #24]	@ (8001918 <HAL_SYSTICK_Callback+0x30>)
 80018fe:	6013      	str	r3, [r2, #0]
	g_task_menu_tick_cnt++;
 8001900:	4b06      	ldr	r3, [pc, #24]	@ (800191c <HAL_SYSTICK_Callback+0x34>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	3301      	adds	r3, #1
 8001906:	4a05      	ldr	r2, [pc, #20]	@ (800191c <HAL_SYSTICK_Callback+0x34>)
 8001908:	6013      	str	r3, [r2, #0]

	//HAL_GPIO_TogglePin(LED_A_PORT, LED_A_PIN);
}
 800190a:	bf00      	nop
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000104 	.word	0x20000104
 8001918:	200001dc 	.word	0x200001dc
 800191c:	2000019c 	.word	0x2000019c

08001920 <displayInit>:
/********************** external data declaration ****************************/
/********************** external functions definition ************************/


void displayInit( displayConnection_t connection )
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
    display.connection = connection;
 800192a:	4a38      	ldr	r2, [pc, #224]	@ (8001a0c <displayInit+0xec>)
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	7013      	strb	r3, [r2, #0]

    if( display.connection == DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER) {
 8001930:	4b36      	ldr	r3, [pc, #216]	@ (8001a0c <displayInit+0xec>)
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	2b02      	cmp	r3, #2
 8001936:	d109      	bne.n	800194c <displayInit+0x2c>
        pcf8574.address = PCF8574_I2C_BUS_8BIT_WRITE_ADDRESS ;
 8001938:	4b35      	ldr	r3, [pc, #212]	@ (8001a10 <displayInit+0xf0>)
 800193a:	224e      	movs	r2, #78	@ 0x4e
 800193c:	601a      	str	r2, [r3, #0]
        pcf8574.data = 0b00000000;
 800193e:	4b34      	ldr	r3, [pc, #208]	@ (8001a10 <displayInit+0xf0>)
 8001940:	2200      	movs	r2, #0
 8001942:	711a      	strb	r2, [r3, #4]
        /*Definido en el .ioc*/
        //i2cPcf8574.frequency(100000);

        displayPinWrite( DISPLAY_PIN_A_PCF8574,  ON );
 8001944:	2101      	movs	r1, #1
 8001946:	2003      	movs	r0, #3
 8001948:	f000 f8f6 	bl	8001b38 <displayPinWrite>
    }

    initial8BitCommunicationIsCompleted = false;
 800194c:	4b31      	ldr	r3, [pc, #196]	@ (8001a14 <displayInit+0xf4>)
 800194e:	2200      	movs	r2, #0
 8001950:	701a      	strb	r2, [r3, #0]

    HAL_Delay(50);
 8001952:	2032      	movs	r0, #50	@ 0x32
 8001954:	f7fe feae 	bl	80006b4 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001958:	2130      	movs	r1, #48	@ 0x30
 800195a:	2000      	movs	r0, #0
 800195c:	f000 f8c8 	bl	8001af0 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(5);
 8001960:	2005      	movs	r0, #5
 8001962:	f7fe fea7 	bl	80006b4 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001966:	2130      	movs	r1, #48	@ 0x30
 8001968:	2000      	movs	r0, #0
 800196a:	f000 f8c1 	bl	8001af0 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 800196e:	2001      	movs	r0, #1
 8001970:	f7fe fea0 	bl	80006b4 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001974:	2130      	movs	r1, #48	@ 0x30
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f8ba 	bl	8001af0 <displayCodeWrite>
                      DISPLAY_IR_FUNCTION_SET |
                      DISPLAY_IR_FUNCTION_SET_8BITS );
    HAL_Delay(1);
 800197c:	2001      	movs	r0, #1
 800197e:	f7fe fe99 	bl	80006b4 <HAL_Delay>

    switch( display.connection ) {
 8001982:	4b22      	ldr	r3, [pc, #136]	@ (8001a0c <displayInit+0xec>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d00d      	beq.n	80019a6 <displayInit+0x86>
 800198a:	2b02      	cmp	r3, #2
 800198c:	dc1d      	bgt.n	80019ca <displayInit+0xaa>
 800198e:	2b00      	cmp	r3, #0
 8001990:	d009      	beq.n	80019a6 <displayInit+0x86>
 8001992:	2b01      	cmp	r3, #1
 8001994:	d119      	bne.n	80019ca <displayInit+0xaa>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001996:	2138      	movs	r1, #56	@ 0x38
 8001998:	2000      	movs	r0, #0
 800199a:	f000 f8a9 	bl	8001af0 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_8BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 800199e:	2001      	movs	r0, #1
 80019a0:	f7fe fe88 	bl	80006b4 <HAL_Delay>
        break;
 80019a4:	e011      	b.n	80019ca <displayInit+0xaa>

        case DISPLAY_CONNECTION_GPIO_4BITS:
        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019a6:	2120      	movs	r1, #32
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 f8a1 	bl	8001af0 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS );
            HAL_Delay(1);
 80019ae:	2001      	movs	r0, #1
 80019b0:	f7fe fe80 	bl	80006b4 <HAL_Delay>

            initial8BitCommunicationIsCompleted = true;
 80019b4:	4b17      	ldr	r3, [pc, #92]	@ (8001a14 <displayInit+0xf4>)
 80019b6:	2201      	movs	r2, #1
 80019b8:	701a      	strb	r2, [r3, #0]

            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019ba:	2128      	movs	r1, #40	@ 0x28
 80019bc:	2000      	movs	r0, #0
 80019be:	f000 f897 	bl	8001af0 <displayCodeWrite>
                              DISPLAY_IR_FUNCTION_SET |
                              DISPLAY_IR_FUNCTION_SET_4BITS |
                              DISPLAY_IR_FUNCTION_SET_2LINES |
                              DISPLAY_IR_FUNCTION_SET_5x8DOTS );
            HAL_Delay(1);
 80019c2:	2001      	movs	r0, #1
 80019c4:	f7fe fe76 	bl	80006b4 <HAL_Delay>
        break;
 80019c8:	bf00      	nop
    }

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019ca:	2108      	movs	r1, #8
 80019cc:	2000      	movs	r0, #0
 80019ce:	f000 f88f 	bl	8001af0 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 80019d2:	2001      	movs	r0, #1
 80019d4:	f7fe fe6e 	bl	80006b4 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019d8:	2101      	movs	r1, #1
 80019da:	2000      	movs	r0, #0
 80019dc:	f000 f888 	bl	8001af0 <displayCodeWrite>
                      DISPLAY_IR_CLEAR_DISPLAY );
    HAL_Delay(1);
 80019e0:	2001      	movs	r0, #1
 80019e2:	f7fe fe67 	bl	80006b4 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019e6:	2106      	movs	r1, #6
 80019e8:	2000      	movs	r0, #0
 80019ea:	f000 f881 	bl	8001af0 <displayCodeWrite>
                      DISPLAY_IR_ENTRY_MODE_SET |
                      DISPLAY_IR_ENTRY_MODE_SET_INCREMENT |
                      DISPLAY_IR_ENTRY_MODE_SET_NO_SHIFT );
    HAL_Delay(1);
 80019ee:	2001      	movs	r0, #1
 80019f0:	f7fe fe60 	bl	80006b4 <HAL_Delay>

    displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 80019f4:	210c      	movs	r1, #12
 80019f6:	2000      	movs	r0, #0
 80019f8:	f000 f87a 	bl	8001af0 <displayCodeWrite>
                      DISPLAY_IR_DISPLAY_CONTROL |
                      DISPLAY_IR_DISPLAY_CONTROL_DISPLAY_ON |
                      DISPLAY_IR_DISPLAY_CONTROL_CURSOR_OFF |
                      DISPLAY_IR_DISPLAY_CONTROL_BLINK_OFF );
    HAL_Delay(1);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f7fe fe59 	bl	80006b4 <HAL_Delay>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20000110 	.word	0x20000110
 8001a10:	20000114 	.word	0x20000114
 8001a14:	20000124 	.word	0x20000124

08001a18 <displayCharPositionWrite>:

void displayCharPositionWrite( uint8_t charPositionX, uint8_t charPositionY )
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460a      	mov	r2, r1
 8001a22:	71fb      	strb	r3, [r7, #7]
 8001a24:	4613      	mov	r3, r2
 8001a26:	71bb      	strb	r3, [r7, #6]
    switch( charPositionY ) {
 8001a28:	79bb      	ldrb	r3, [r7, #6]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d846      	bhi.n	8001abc <displayCharPositionWrite+0xa4>
 8001a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001a34 <displayCharPositionWrite+0x1c>)
 8001a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a34:	08001a45 	.word	0x08001a45
 8001a38:	08001a5d 	.word	0x08001a5d
 8001a3c:	08001a7d 	.word	0x08001a7d
 8001a40:	08001a9d 	.word	0x08001a9d
        case 0:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a44:	79fb      	ldrb	r3, [r7, #7]
 8001a46:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	2000      	movs	r0, #0
 8001a50:	f000 f84e 	bl	8001af0 <displayCodeWrite>
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE1_FIRST_CHARACTER_ADDRESS +
                                charPositionX ) );
            HAL_Delay(1);
 8001a54:	2001      	movs	r0, #1
 8001a56:	f7fe fe2d 	bl	80006b4 <HAL_Delay>
        break;
 8001a5a:	e02f      	b.n	8001abc <displayCharPositionWrite+0xa4>

        case 1:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE2_FIRST_CHARACTER_ADDRESS +
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	3340      	adds	r3, #64	@ 0x40
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001a64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a68:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	2000      	movs	r0, #0
 8001a70:	f000 f83e 	bl	8001af0 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 8001a74:	2001      	movs	r0, #1
 8001a76:	f7fe fe1d 	bl	80006b4 <HAL_Delay>
        break;
 8001a7a:	e01f      	b.n	8001abc <displayCharPositionWrite+0xa4>

        case 2:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE3_FIRST_CHARACTER_ADDRESS +
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	3314      	adds	r3, #20
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001a84:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001a88:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f82e 	bl	8001af0 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7fe fe0d 	bl	80006b4 <HAL_Delay>
        break;
 8001a9a:	e00f      	b.n	8001abc <displayCharPositionWrite+0xa4>

        case 3:
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
                              DISPLAY_IR_SET_DDRAM_ADDR |
                              ( DISPLAY_20x4_LINE4_FIRST_CHARACTER_ADDRESS +
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	3354      	adds	r3, #84	@ 0x54
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	b25b      	sxtb	r3, r3
                              DISPLAY_IR_SET_DDRAM_ADDR |
 8001aa4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001aa8:	b25b      	sxtb	r3, r3
            displayCodeWrite( DISPLAY_RS_INSTRUCTION,
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4619      	mov	r1, r3
 8001aae:	2000      	movs	r0, #0
 8001ab0:	f000 f81e 	bl	8001af0 <displayCodeWrite>
                                charPositionX ) );
            HAL_Delay(1);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f7fe fdfd 	bl	80006b4 <HAL_Delay>
        break;
 8001aba:	bf00      	nop
    }
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <displayStringWrite>:

void displayStringWrite( const char * str )
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001acc:	e007      	b.n	8001ade <displayStringWrite+0x1a>
        displayCodeWrite(DISPLAY_RS_DATA, *str++);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	607a      	str	r2, [r7, #4]
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f000 f809 	bl	8001af0 <displayCodeWrite>
    while (*str) {
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f3      	bne.n	8001ace <displayStringWrite+0xa>
    }
}
 8001ae6:	bf00      	nop
 8001ae8:	bf00      	nop
 8001aea:	3708      	adds	r7, #8
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}

08001af0 <displayCodeWrite>:
/********************** internal functions definition ************************/
static void displayCodeWrite( bool type, uint8_t dataBus) {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	460a      	mov	r2, r1
 8001afa:	71fb      	strb	r3, [r7, #7]
 8001afc:	4613      	mov	r3, r2
 8001afe:	71bb      	strb	r3, [r7, #6]
	if (type == DISPLAY_RS_INSTRUCTION)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f083 0301 	eor.w	r3, r3, #1
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d004      	beq.n	8001b16 <displayCodeWrite+0x26>
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_INSTRUCTION);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2004      	movs	r0, #4
 8001b10:	f000 f812 	bl	8001b38 <displayPinWrite>
 8001b14:	e003      	b.n	8001b1e <displayCodeWrite+0x2e>
	else
		displayPinWrite( DISPLAY_PIN_RS, DISPLAY_RS_DATA);
 8001b16:	2101      	movs	r1, #1
 8001b18:	2004      	movs	r0, #4
 8001b1a:	f000 f80d 	bl	8001b38 <displayPinWrite>
	displayPinWrite( DISPLAY_PIN_RW, DISPLAY_RW_WRITE);
 8001b1e:	2100      	movs	r1, #0
 8001b20:	2005      	movs	r0, #5
 8001b22:	f000 f809 	bl	8001b38 <displayPinWrite>
	displayDataBusWrite(dataBus);
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 f9ad 	bl	8001e88 <displayDataBusWrite>
}
 8001b2e:	bf00      	nop
 8001b30:	3708      	adds	r7, #8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
	...

08001b38 <displayPinWrite>:

static void displayPinWrite( uint8_t pinName, int value )
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	71fb      	strb	r3, [r7, #7]
    switch( display.connection ) {
 8001b44:	4b99      	ldr	r3, [pc, #612]	@ (8001dac <displayPinWrite+0x274>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b02      	cmp	r3, #2
 8001b4a:	f000 80ab 	beq.w	8001ca4 <displayPinWrite+0x16c>
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	f300 8193 	bgt.w	8001e7a <displayPinWrite+0x342>
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d053      	beq.n	8001c00 <displayPinWrite+0xc8>
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	f040 818e 	bne.w	8001e7a <displayPinWrite+0x342>

    	case DISPLAY_CONNECTION_GPIO_8BITS:
            switch( pinName ) {
 8001b5e:	79fb      	ldrb	r3, [r7, #7]
 8001b60:	3b04      	subs	r3, #4
 8001b62:	2b0a      	cmp	r3, #10
 8001b64:	d84a      	bhi.n	8001bfc <displayPinWrite+0xc4>
 8001b66:	a201      	add	r2, pc, #4	@ (adr r2, 8001b6c <displayPinWrite+0x34>)
 8001b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6c:	08001bdd 	.word	0x08001bdd
 8001b70:	08001bfd 	.word	0x08001bfd
 8001b74:	08001bed 	.word	0x08001bed
 8001b78:	08001bfd 	.word	0x08001bfd
 8001b7c:	08001bfd 	.word	0x08001bfd
 8001b80:	08001bfd 	.word	0x08001bfd
 8001b84:	08001bfd 	.word	0x08001bfd
 8001b88:	08001b99 	.word	0x08001b99
 8001b8c:	08001bab 	.word	0x08001bab
 8001b90:	08001bbd 	.word	0x08001bbd
 8001b94:	08001bcd 	.word	0x08001bcd
//                case DISPLAY_PIN_D0: HAL_GPIO_WritePin(D2_GPIO_Port,  D2_Pin,  value);   break;
//                case DISPLAY_PIN_D1: HAL_GPIO_WritePin(D4_GPIO_Port,  D4_Pin,  value);   break;
//                case DISPLAY_PIN_D2: HAL_GPIO_WritePin(D5_GPIO_Port,  D5_Pin,  value);   break;
//                case DISPLAY_PIN_D3: HAL_GPIO_WritePin(D6_GPIO_Port,  D6_Pin,  value);   break;
                case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D7_GPIO_Port,  D7_Pin,  value);   break;
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ba2:	4883      	ldr	r0, [pc, #524]	@ (8001db0 <displayPinWrite+0x278>)
 8001ba4:	f7ff f859 	bl	8000c5a <HAL_GPIO_WritePin>
 8001ba8:	e029      	b.n	8001bfe <displayPinWrite+0xc6>
                case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D8_GPIO_Port,  D8_Pin,  value);   break;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001bb4:	487e      	ldr	r0, [pc, #504]	@ (8001db0 <displayPinWrite+0x278>)
 8001bb6:	f7ff f850 	bl	8000c5a <HAL_GPIO_WritePin>
 8001bba:	e020      	b.n	8001bfe <displayPinWrite+0xc6>
                case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D9_GPIO_Port,  D9_Pin,  value);   break;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	2180      	movs	r1, #128	@ 0x80
 8001bc4:	487b      	ldr	r0, [pc, #492]	@ (8001db4 <displayPinWrite+0x27c>)
 8001bc6:	f7ff f848 	bl	8000c5a <HAL_GPIO_WritePin>
 8001bca:	e018      	b.n	8001bfe <displayPinWrite+0xc6>
                case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, value);   break;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2140      	movs	r1, #64	@ 0x40
 8001bd4:	4878      	ldr	r0, [pc, #480]	@ (8001db8 <displayPinWrite+0x280>)
 8001bd6:	f7ff f840 	bl	8000c5a <HAL_GPIO_WritePin>
 8001bda:	e010      	b.n	8001bfe <displayPinWrite+0xc6>
                case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, value);   break;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	461a      	mov	r2, r3
 8001be2:	2180      	movs	r1, #128	@ 0x80
 8001be4:	4872      	ldr	r0, [pc, #456]	@ (8001db0 <displayPinWrite+0x278>)
 8001be6:	f7ff f838 	bl	8000c5a <HAL_GPIO_WritePin>
 8001bea:	e008      	b.n	8001bfe <displayPinWrite+0xc6>
                case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, value);   break;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	2140      	movs	r1, #64	@ 0x40
 8001bf4:	486e      	ldr	r0, [pc, #440]	@ (8001db0 <displayPinWrite+0x278>)
 8001bf6:	f7ff f830 	bl	8000c5a <HAL_GPIO_WritePin>
 8001bfa:	e000      	b.n	8001bfe <displayPinWrite+0xc6>
                case DISPLAY_PIN_RW: break;
                default: break;
 8001bfc:	bf00      	nop
            }
            break;
 8001bfe:	e13c      	b.n	8001e7a <displayPinWrite+0x342>


        case DISPLAY_CONNECTION_GPIO_4BITS:
            switch( pinName ) {
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	3b04      	subs	r3, #4
 8001c04:	2b0a      	cmp	r3, #10
 8001c06:	d84b      	bhi.n	8001ca0 <displayPinWrite+0x168>
 8001c08:	a201      	add	r2, pc, #4	@ (adr r2, 8001c10 <displayPinWrite+0xd8>)
 8001c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c0e:	bf00      	nop
 8001c10:	08001c81 	.word	0x08001c81
 8001c14:	08001ca1 	.word	0x08001ca1
 8001c18:	08001c91 	.word	0x08001c91
 8001c1c:	08001ca1 	.word	0x08001ca1
 8001c20:	08001ca1 	.word	0x08001ca1
 8001c24:	08001ca1 	.word	0x08001ca1
 8001c28:	08001ca1 	.word	0x08001ca1
 8001c2c:	08001c3d 	.word	0x08001c3d
 8001c30:	08001c4f 	.word	0x08001c4f
 8001c34:	08001c61 	.word	0x08001c61
 8001c38:	08001c71 	.word	0x08001c71
            	case DISPLAY_PIN_D4: HAL_GPIO_WritePin(D7_GPIO_Port,  D7_Pin,  value);   break;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	461a      	mov	r2, r3
 8001c42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001c46:	485a      	ldr	r0, [pc, #360]	@ (8001db0 <displayPinWrite+0x278>)
 8001c48:	f7ff f807 	bl	8000c5a <HAL_GPIO_WritePin>
 8001c4c:	e029      	b.n	8001ca2 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D5: HAL_GPIO_WritePin(D8_GPIO_Port,  D8_Pin,  value);   break;
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	461a      	mov	r2, r3
 8001c54:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c58:	4855      	ldr	r0, [pc, #340]	@ (8001db0 <displayPinWrite+0x278>)
 8001c5a:	f7fe fffe 	bl	8000c5a <HAL_GPIO_WritePin>
 8001c5e:	e020      	b.n	8001ca2 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D6: HAL_GPIO_WritePin(D9_GPIO_Port,  D9_Pin,  value);   break;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	2180      	movs	r1, #128	@ 0x80
 8001c68:	4852      	ldr	r0, [pc, #328]	@ (8001db4 <displayPinWrite+0x27c>)
 8001c6a:	f7fe fff6 	bl	8000c5a <HAL_GPIO_WritePin>
 8001c6e:	e018      	b.n	8001ca2 <displayPinWrite+0x16a>
				case DISPLAY_PIN_D7: HAL_GPIO_WritePin(D10_GPIO_Port, D10_Pin, value);   break;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	2140      	movs	r1, #64	@ 0x40
 8001c78:	484f      	ldr	r0, [pc, #316]	@ (8001db8 <displayPinWrite+0x280>)
 8001c7a:	f7fe ffee 	bl	8000c5a <HAL_GPIO_WritePin>
 8001c7e:	e010      	b.n	8001ca2 <displayPinWrite+0x16a>
				case DISPLAY_PIN_RS: HAL_GPIO_WritePin(D11_GPIO_Port, D11_Pin, value);   break;
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	2180      	movs	r1, #128	@ 0x80
 8001c88:	4849      	ldr	r0, [pc, #292]	@ (8001db0 <displayPinWrite+0x278>)
 8001c8a:	f7fe ffe6 	bl	8000c5a <HAL_GPIO_WritePin>
 8001c8e:	e008      	b.n	8001ca2 <displayPinWrite+0x16a>
				case DISPLAY_PIN_EN: HAL_GPIO_WritePin(D12_GPIO_Port, D12_Pin, value);   break;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	461a      	mov	r2, r3
 8001c96:	2140      	movs	r1, #64	@ 0x40
 8001c98:	4845      	ldr	r0, [pc, #276]	@ (8001db0 <displayPinWrite+0x278>)
 8001c9a:	f7fe ffde 	bl	8000c5a <HAL_GPIO_WritePin>
 8001c9e:	e000      	b.n	8001ca2 <displayPinWrite+0x16a>
                case DISPLAY_PIN_RW: break;
                default: break;
 8001ca0:	bf00      	nop
            }
            break;
 8001ca2:	e0ea      	b.n	8001e7a <displayPinWrite+0x342>

        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
           if ( value ) {
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d03e      	beq.n	8001d28 <displayPinWrite+0x1f0>
                switch( pinName ) {
 8001caa:	79fb      	ldrb	r3, [r7, #7]
 8001cac:	3b03      	subs	r3, #3
 8001cae:	2b0b      	cmp	r3, #11
 8001cb0:	d87a      	bhi.n	8001da8 <displayPinWrite+0x270>
 8001cb2:	a201      	add	r2, pc, #4	@ (adr r2, 8001cb8 <displayPinWrite+0x180>)
 8001cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb8:	08001d21 	.word	0x08001d21
 8001cbc:	08001d09 	.word	0x08001d09
 8001cc0:	08001d19 	.word	0x08001d19
 8001cc4:	08001d11 	.word	0x08001d11
 8001cc8:	08001da9 	.word	0x08001da9
 8001ccc:	08001da9 	.word	0x08001da9
 8001cd0:	08001da9 	.word	0x08001da9
 8001cd4:	08001da9 	.word	0x08001da9
 8001cd8:	08001ce9 	.word	0x08001ce9
 8001cdc:	08001cf1 	.word	0x08001cf1
 8001ce0:	08001cf9 	.word	0x08001cf9
 8001ce4:	08001d01 	.word	0x08001d01
                    case DISPLAY_PIN_D4: pcf8574.displayPinD4 = ON; break;
 8001ce8:	4b34      	ldr	r3, [pc, #208]	@ (8001dbc <displayPinWrite+0x284>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	725a      	strb	r2, [r3, #9]
 8001cee:	e068      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D5: pcf8574.displayPinD5 = ON; break;
 8001cf0:	4b32      	ldr	r3, [pc, #200]	@ (8001dbc <displayPinWrite+0x284>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	729a      	strb	r2, [r3, #10]
 8001cf6:	e064      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D6: pcf8574.displayPinD6 = ON; break;
 8001cf8:	4b30      	ldr	r3, [pc, #192]	@ (8001dbc <displayPinWrite+0x284>)
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	72da      	strb	r2, [r3, #11]
 8001cfe:	e060      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D7: pcf8574.displayPinD7 = ON; break;
 8001d00:	4b2e      	ldr	r3, [pc, #184]	@ (8001dbc <displayPinWrite+0x284>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	731a      	strb	r2, [r3, #12]
 8001d06:	e05c      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RS: pcf8574.displayPinRs = ON; break;
 8001d08:	4b2c      	ldr	r3, [pc, #176]	@ (8001dbc <displayPinWrite+0x284>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	715a      	strb	r2, [r3, #5]
 8001d0e:	e058      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_EN: pcf8574.displayPinEn = ON; break;
 8001d10:	4b2a      	ldr	r3, [pc, #168]	@ (8001dbc <displayPinWrite+0x284>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	71da      	strb	r2, [r3, #7]
 8001d16:	e054      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RW: pcf8574.displayPinRw = ON; break;
 8001d18:	4b28      	ldr	r3, [pc, #160]	@ (8001dbc <displayPinWrite+0x284>)
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	719a      	strb	r2, [r3, #6]
 8001d1e:	e050      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_A_PCF8574: pcf8574.displayPinA = ON; break;
 8001d20:	4b26      	ldr	r3, [pc, #152]	@ (8001dbc <displayPinWrite+0x284>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	721a      	strb	r2, [r3, #8]
 8001d26:	e04c      	b.n	8001dc2 <displayPinWrite+0x28a>
                    default: break;
                }
            }
            else {
                switch( pinName ) {
 8001d28:	79fb      	ldrb	r3, [r7, #7]
 8001d2a:	3b03      	subs	r3, #3
 8001d2c:	2b0b      	cmp	r3, #11
 8001d2e:	d847      	bhi.n	8001dc0 <displayPinWrite+0x288>
 8001d30:	a201      	add	r2, pc, #4	@ (adr r2, 8001d38 <displayPinWrite+0x200>)
 8001d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d36:	bf00      	nop
 8001d38:	08001da1 	.word	0x08001da1
 8001d3c:	08001d89 	.word	0x08001d89
 8001d40:	08001d99 	.word	0x08001d99
 8001d44:	08001d91 	.word	0x08001d91
 8001d48:	08001dc1 	.word	0x08001dc1
 8001d4c:	08001dc1 	.word	0x08001dc1
 8001d50:	08001dc1 	.word	0x08001dc1
 8001d54:	08001dc1 	.word	0x08001dc1
 8001d58:	08001d69 	.word	0x08001d69
 8001d5c:	08001d71 	.word	0x08001d71
 8001d60:	08001d79 	.word	0x08001d79
 8001d64:	08001d81 	.word	0x08001d81
                    case DISPLAY_PIN_D4: pcf8574.displayPinD4 = OFF; break;
 8001d68:	4b14      	ldr	r3, [pc, #80]	@ (8001dbc <displayPinWrite+0x284>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	725a      	strb	r2, [r3, #9]
 8001d6e:	e028      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D5: pcf8574.displayPinD5 = OFF; break;
 8001d70:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <displayPinWrite+0x284>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	729a      	strb	r2, [r3, #10]
 8001d76:	e024      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D6: pcf8574.displayPinD6 = OFF; break;
 8001d78:	4b10      	ldr	r3, [pc, #64]	@ (8001dbc <displayPinWrite+0x284>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	72da      	strb	r2, [r3, #11]
 8001d7e:	e020      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_D7: pcf8574.displayPinD7 = OFF; break;
 8001d80:	4b0e      	ldr	r3, [pc, #56]	@ (8001dbc <displayPinWrite+0x284>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	731a      	strb	r2, [r3, #12]
 8001d86:	e01c      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RS: pcf8574.displayPinRs = OFF; break;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	@ (8001dbc <displayPinWrite+0x284>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	715a      	strb	r2, [r3, #5]
 8001d8e:	e018      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_EN: pcf8574.displayPinEn = OFF; break;
 8001d90:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <displayPinWrite+0x284>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	71da      	strb	r2, [r3, #7]
 8001d96:	e014      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_RW: pcf8574.displayPinRw = OFF; break;
 8001d98:	4b08      	ldr	r3, [pc, #32]	@ (8001dbc <displayPinWrite+0x284>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	719a      	strb	r2, [r3, #6]
 8001d9e:	e010      	b.n	8001dc2 <displayPinWrite+0x28a>
                    case DISPLAY_PIN_A_PCF8574: pcf8574.displayPinA = OFF; break;
 8001da0:	4b06      	ldr	r3, [pc, #24]	@ (8001dbc <displayPinWrite+0x284>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	721a      	strb	r2, [r3, #8]
 8001da6:	e00c      	b.n	8001dc2 <displayPinWrite+0x28a>
                    default: break;
 8001da8:	bf00      	nop
 8001daa:	e00a      	b.n	8001dc2 <displayPinWrite+0x28a>
 8001dac:	20000110 	.word	0x20000110
 8001db0:	40010800 	.word	0x40010800
 8001db4:	40011000 	.word	0x40011000
 8001db8:	40010c00 	.word	0x40010c00
 8001dbc:	20000114 	.word	0x20000114
                    default: break;
 8001dc0:	bf00      	nop
                }
            }
            pcf8574.data = 0b00000000;
 8001dc2:	4b30      	ldr	r3, [pc, #192]	@ (8001e84 <displayPinWrite+0x34c>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinRs ) pcf8574.data |= 0b00000001;
 8001dc8:	4b2e      	ldr	r3, [pc, #184]	@ (8001e84 <displayPinWrite+0x34c>)
 8001dca:	795b      	ldrb	r3, [r3, #5]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d006      	beq.n	8001dde <displayPinWrite+0x2a6>
 8001dd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001e84 <displayPinWrite+0x34c>)
 8001dd2:	791b      	ldrb	r3, [r3, #4]
 8001dd4:	f043 0301 	orr.w	r3, r3, #1
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	4b2a      	ldr	r3, [pc, #168]	@ (8001e84 <displayPinWrite+0x34c>)
 8001ddc:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinRw ) pcf8574.data |= 0b00000010;
 8001dde:	4b29      	ldr	r3, [pc, #164]	@ (8001e84 <displayPinWrite+0x34c>)
 8001de0:	799b      	ldrb	r3, [r3, #6]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <displayPinWrite+0x2bc>
 8001de6:	4b27      	ldr	r3, [pc, #156]	@ (8001e84 <displayPinWrite+0x34c>)
 8001de8:	791b      	ldrb	r3, [r3, #4]
 8001dea:	f043 0302 	orr.w	r3, r3, #2
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b24      	ldr	r3, [pc, #144]	@ (8001e84 <displayPinWrite+0x34c>)
 8001df2:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinEn ) pcf8574.data |= 0b00000100;
 8001df4:	4b23      	ldr	r3, [pc, #140]	@ (8001e84 <displayPinWrite+0x34c>)
 8001df6:	79db      	ldrb	r3, [r3, #7]
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d006      	beq.n	8001e0a <displayPinWrite+0x2d2>
 8001dfc:	4b21      	ldr	r3, [pc, #132]	@ (8001e84 <displayPinWrite+0x34c>)
 8001dfe:	791b      	ldrb	r3, [r3, #4]
 8001e00:	f043 0304 	orr.w	r3, r3, #4
 8001e04:	b2da      	uxtb	r2, r3
 8001e06:	4b1f      	ldr	r3, [pc, #124]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e08:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinA  ) pcf8574.data |= 0b00001000;
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e0c:	7a1b      	ldrb	r3, [r3, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <displayPinWrite+0x2e8>
 8001e12:	4b1c      	ldr	r3, [pc, #112]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e14:	791b      	ldrb	r3, [r3, #4]
 8001e16:	f043 0308 	orr.w	r3, r3, #8
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e1e:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD4 ) pcf8574.data |= 0b00010000;
 8001e20:	4b18      	ldr	r3, [pc, #96]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e22:	7a5b      	ldrb	r3, [r3, #9]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d006      	beq.n	8001e36 <displayPinWrite+0x2fe>
 8001e28:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e2a:	791b      	ldrb	r3, [r3, #4]
 8001e2c:	f043 0310 	orr.w	r3, r3, #16
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b14      	ldr	r3, [pc, #80]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e34:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD5 ) pcf8574.data |= 0b00100000;
 8001e36:	4b13      	ldr	r3, [pc, #76]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e38:	7a9b      	ldrb	r3, [r3, #10]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d006      	beq.n	8001e4c <displayPinWrite+0x314>
 8001e3e:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e40:	791b      	ldrb	r3, [r3, #4]
 8001e42:	f043 0320 	orr.w	r3, r3, #32
 8001e46:	b2da      	uxtb	r2, r3
 8001e48:	4b0e      	ldr	r3, [pc, #56]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e4a:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD6 ) pcf8574.data |= 0b01000000;
 8001e4c:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e4e:	7adb      	ldrb	r3, [r3, #11]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d006      	beq.n	8001e62 <displayPinWrite+0x32a>
 8001e54:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e56:	791b      	ldrb	r3, [r3, #4]
 8001e58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e60:	711a      	strb	r2, [r3, #4]
            if ( pcf8574.displayPinD7 ) pcf8574.data |= 0b10000000;
 8001e62:	4b08      	ldr	r3, [pc, #32]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e64:	7b1b      	ldrb	r3, [r3, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <displayPinWrite+0x340>
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e6c:	791b      	ldrb	r3, [r3, #4]
 8001e6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	4b03      	ldr	r3, [pc, #12]	@ (8001e84 <displayPinWrite+0x34c>)
 8001e76:	711a      	strb	r2, [r3, #4]

            //i2cPcf8574.write( pcf8574.address, &pcf8574.data, 1);
            //HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)pcf8574.address<<1, (uint8_t *)&pcf8574.data, (uint16_t)16, HAL_MAX_DELAY);

            break;
 8001e78:	bf00      	nop
    }
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000114 	.word	0x20000114

08001e88 <displayDataBusWrite>:

static void displayDataBusWrite( uint8_t dataBus )
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	71fb      	strb	r3, [r7, #7]
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001e92:	2100      	movs	r1, #0
 8001e94:	2006      	movs	r0, #6
 8001e96:	f7ff fe4f 	bl	8001b38 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b10000000 );
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	200e      	movs	r0, #14
 8001ea4:	f7ff fe48 	bl	8001b38 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b01000000 );
 8001ea8:	79fb      	ldrb	r3, [r7, #7]
 8001eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eae:	4619      	mov	r1, r3
 8001eb0:	200d      	movs	r0, #13
 8001eb2:	f7ff fe41 	bl	8001b38 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00100000 );
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	200c      	movs	r0, #12
 8001ec0:	f7ff fe3a 	bl	8001b38 <displayPinWrite>
    displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00010000 );
 8001ec4:	79fb      	ldrb	r3, [r7, #7]
 8001ec6:	f003 0310 	and.w	r3, r3, #16
 8001eca:	4619      	mov	r1, r3
 8001ecc:	200b      	movs	r0, #11
 8001ece:	f7ff fe33 	bl	8001b38 <displayPinWrite>
    switch( display.connection ) {
 8001ed2:	4b34      	ldr	r3, [pc, #208]	@ (8001fa4 <displayDataBusWrite+0x11c>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b02      	cmp	r3, #2
 8001ed8:	d022      	beq.n	8001f20 <displayDataBusWrite+0x98>
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	dc4f      	bgt.n	8001f7e <displayDataBusWrite+0xf6>
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01e      	beq.n	8001f20 <displayDataBusWrite+0x98>
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d14b      	bne.n	8001f7e <displayDataBusWrite+0xf6>
        case DISPLAY_CONNECTION_GPIO_8BITS:
            displayPinWrite( DISPLAY_PIN_D3, dataBus & 0b00001000 );
 8001ee6:	79fb      	ldrb	r3, [r7, #7]
 8001ee8:	f003 0308 	and.w	r3, r3, #8
 8001eec:	4619      	mov	r1, r3
 8001eee:	200a      	movs	r0, #10
 8001ef0:	f7ff fe22 	bl	8001b38 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D2, dataBus & 0b00000100 );
 8001ef4:	79fb      	ldrb	r3, [r7, #7]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	2009      	movs	r0, #9
 8001efe:	f7ff fe1b 	bl	8001b38 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D1, dataBus & 0b00000010 );
 8001f02:	79fb      	ldrb	r3, [r7, #7]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	4619      	mov	r1, r3
 8001f0a:	2008      	movs	r0, #8
 8001f0c:	f7ff fe14 	bl	8001b38 <displayPinWrite>
            displayPinWrite( DISPLAY_PIN_D0, dataBus & 0b00000001 );
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 0301 	and.w	r3, r3, #1
 8001f16:	4619      	mov	r1, r3
 8001f18:	2007      	movs	r0, #7
 8001f1a:	f7ff fe0d 	bl	8001b38 <displayPinWrite>
        break;
 8001f1e:	e02e      	b.n	8001f7e <displayDataBusWrite+0xf6>

        case DISPLAY_CONNECTION_GPIO_4BITS:
        case DISPLAY_CONNECTION_I2C_PCF8574_IO_EXPANDER:
            if ( initial8BitCommunicationIsCompleted == true) {
 8001f20:	4b21      	ldr	r3, [pc, #132]	@ (8001fa8 <displayDataBusWrite+0x120>)
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d029      	beq.n	8001f7c <displayDataBusWrite+0xf4>
                displayPinWrite( DISPLAY_PIN_EN, ON );
 8001f28:	2101      	movs	r1, #1
 8001f2a:	2006      	movs	r0, #6
 8001f2c:	f7ff fe04 	bl	8001b38 <displayPinWrite>
                HAL_Delay(1);
 8001f30:	2001      	movs	r0, #1
 8001f32:	f7fe fbbf 	bl	80006b4 <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001f36:	2100      	movs	r1, #0
 8001f38:	2006      	movs	r0, #6
 8001f3a:	f7ff fdfd 	bl	8001b38 <displayPinWrite>
                HAL_Delay(1);
 8001f3e:	2001      	movs	r0, #1
 8001f40:	f7fe fbb8 	bl	80006b4 <HAL_Delay>
                displayPinWrite( DISPLAY_PIN_D7, dataBus & 0b00001000 );
 8001f44:	79fb      	ldrb	r3, [r7, #7]
 8001f46:	f003 0308 	and.w	r3, r3, #8
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	200e      	movs	r0, #14
 8001f4e:	f7ff fdf3 	bl	8001b38 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D6, dataBus & 0b00000100 );
 8001f52:	79fb      	ldrb	r3, [r7, #7]
 8001f54:	f003 0304 	and.w	r3, r3, #4
 8001f58:	4619      	mov	r1, r3
 8001f5a:	200d      	movs	r0, #13
 8001f5c:	f7ff fdec 	bl	8001b38 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D5, dataBus & 0b00000010 );
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	f003 0302 	and.w	r3, r3, #2
 8001f66:	4619      	mov	r1, r3
 8001f68:	200c      	movs	r0, #12
 8001f6a:	f7ff fde5 	bl	8001b38 <displayPinWrite>
                displayPinWrite( DISPLAY_PIN_D4, dataBus & 0b00000001 );
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	4619      	mov	r1, r3
 8001f76:	200b      	movs	r0, #11
 8001f78:	f7ff fdde 	bl	8001b38 <displayPinWrite>
            }
        break;
 8001f7c:	bf00      	nop

    }
    displayPinWrite( DISPLAY_PIN_EN, ON );
 8001f7e:	2101      	movs	r1, #1
 8001f80:	2006      	movs	r0, #6
 8001f82:	f7ff fdd9 	bl	8001b38 <displayPinWrite>
    HAL_Delay(1);
 8001f86:	2001      	movs	r0, #1
 8001f88:	f7fe fb94 	bl	80006b4 <HAL_Delay>
    displayPinWrite( DISPLAY_PIN_EN, OFF );
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2006      	movs	r0, #6
 8001f90:	f7ff fdd2 	bl	8001b38 <displayPinWrite>
    HAL_Delay(1);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f7fe fb8d 	bl	80006b4 <HAL_Delay>
}
 8001f9a:	bf00      	nop
 8001f9c:	3708      	adds	r7, #8
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000110 	.word	0x20000110
 8001fa8:	20000124 	.word	0x20000124

08001fac <logger_log_print_>:

/********************** external functions definition ************************/

#if 1 == LOGGER_CONFIG_USE_SEMIHOSTING
void logger_log_print_(char* const msg)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
	printf(msg);
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f001 f9ab 	bl	8003310 <iprintf>
	fflush(stdout);
 8001fba:	4b05      	ldr	r3, [pc, #20]	@ (8001fd0 <logger_log_print_+0x24>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 f8cf 	bl	8003164 <fflush>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	20000040 	.word	0x20000040

08001fd4 <task_menu_init>:
volatile uint32_t g_task_menu_tick_cnt;
task_menu_motor_dta_t   *p_task_menu_motor_dta;

/********************** external functions definition ************************/
void task_menu_init(void *parameters)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	6078      	str	r0, [r7, #4]
	task_menu_ev_t	event;
	bool b_event;


	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_menu_init), p_task_menu);
 8001fdc:	b672      	cpsid	i
 8001fde:	4b4c      	ldr	r3, [pc, #304]	@ (8002110 <task_menu_init+0x13c>)
 8001fe0:	6818      	ldr	r0, [r3, #0]
 8001fe2:	4b4c      	ldr	r3, [pc, #304]	@ (8002114 <task_menu_init+0x140>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	9300      	str	r3, [sp, #0]
 8001fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8002118 <task_menu_init+0x144>)
 8001fea:	4a4c      	ldr	r2, [pc, #304]	@ (800211c <task_menu_init+0x148>)
 8001fec:	213f      	movs	r1, #63	@ 0x3f
 8001fee:	f001 f9a1 	bl	8003334 <sniprintf>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	4a4a      	ldr	r2, [pc, #296]	@ (8002120 <task_menu_init+0x14c>)
 8001ff6:	6013      	str	r3, [r2, #0]
 8001ff8:	4b45      	ldr	r3, [pc, #276]	@ (8002110 <task_menu_init+0x13c>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ffd5 	bl	8001fac <logger_log_print_>
 8002002:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_menu), p_task_menu_);
 8002004:	b672      	cpsid	i
 8002006:	4b42      	ldr	r3, [pc, #264]	@ (8002110 <task_menu_init+0x13c>)
 8002008:	6818      	ldr	r0, [r3, #0]
 800200a:	4b46      	ldr	r3, [pc, #280]	@ (8002124 <task_menu_init+0x150>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	4b45      	ldr	r3, [pc, #276]	@ (8002128 <task_menu_init+0x154>)
 8002012:	4a46      	ldr	r2, [pc, #280]	@ (800212c <task_menu_init+0x158>)
 8002014:	213f      	movs	r1, #63	@ 0x3f
 8002016:	f001 f98d 	bl	8003334 <sniprintf>
 800201a:	4603      	mov	r3, r0
 800201c:	4a40      	ldr	r2, [pc, #256]	@ (8002120 <task_menu_init+0x14c>)
 800201e:	6013      	str	r3, [r2, #0]
 8002020:	4b3b      	ldr	r3, [pc, #236]	@ (8002110 <task_menu_init+0x13c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ffc1 	bl	8001fac <logger_log_print_>
 800202a:	b662      	cpsie	i

	g_task_menu_cnt = G_TASK_MEN_CNT_INI;
 800202c:	4b40      	ldr	r3, [pc, #256]	@ (8002130 <task_menu_init+0x15c>)
 800202e:	2200      	movs	r2, #0
 8002030:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_menu_cnt), g_task_menu_cnt);
 8002032:	b672      	cpsid	i
 8002034:	4b36      	ldr	r3, [pc, #216]	@ (8002110 <task_menu_init+0x13c>)
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	4b3d      	ldr	r3, [pc, #244]	@ (8002130 <task_menu_init+0x15c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	4b3d      	ldr	r3, [pc, #244]	@ (8002134 <task_menu_init+0x160>)
 8002040:	4a3d      	ldr	r2, [pc, #244]	@ (8002138 <task_menu_init+0x164>)
 8002042:	213f      	movs	r1, #63	@ 0x3f
 8002044:	f001 f976 	bl	8003334 <sniprintf>
 8002048:	4603      	mov	r3, r0
 800204a:	4a35      	ldr	r2, [pc, #212]	@ (8002120 <task_menu_init+0x14c>)
 800204c:	6013      	str	r3, [r2, #0]
 800204e:	4b30      	ldr	r3, [pc, #192]	@ (8002110 <task_menu_init+0x13c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ffaa 	bl	8001fac <logger_log_print_>
 8002058:	b662      	cpsie	i

	init_queue_event_task_menu();
 800205a:	f000 fb35 	bl	80026c8 <init_queue_event_task_menu>

	/* Update Task Actuator Configuration & Data Pointer */
	p_task_menu_dta = & task_menu_dta;
 800205e:	4b37      	ldr	r3, [pc, #220]	@ (800213c <task_menu_init+0x168>)
 8002060:	60fb      	str	r3, [r7, #12]


	/* Print out: Task execution FSM */
	state = p_task_menu_dta->state;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	791b      	ldrb	r3, [r3, #4]
 8002066:	72fb      	strb	r3, [r7, #11]
	LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8002068:	b672      	cpsid	i
 800206a:	4b29      	ldr	r3, [pc, #164]	@ (8002110 <task_menu_init+0x13c>)
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	7afb      	ldrb	r3, [r7, #11]
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	4b33      	ldr	r3, [pc, #204]	@ (8002140 <task_menu_init+0x16c>)
 8002074:	4a33      	ldr	r2, [pc, #204]	@ (8002144 <task_menu_init+0x170>)
 8002076:	213f      	movs	r1, #63	@ 0x3f
 8002078:	f001 f95c 	bl	8003334 <sniprintf>
 800207c:	4603      	mov	r3, r0
 800207e:	4a28      	ldr	r2, [pc, #160]	@ (8002120 <task_menu_init+0x14c>)
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	4b23      	ldr	r3, [pc, #140]	@ (8002110 <task_menu_init+0x13c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff ff90 	bl	8001fac <logger_log_print_>
 800208c:	b662      	cpsie	i

	event = p_task_menu_dta->event;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	795b      	ldrb	r3, [r3, #5]
 8002092:	72bb      	strb	r3, [r7, #10]
	LOGGER_LOG("   %s = %lu", GET_NAME(event), (uint32_t)event);
 8002094:	b672      	cpsid	i
 8002096:	4b1e      	ldr	r3, [pc, #120]	@ (8002110 <task_menu_init+0x13c>)
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	7abb      	ldrb	r3, [r7, #10]
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	4b2a      	ldr	r3, [pc, #168]	@ (8002148 <task_menu_init+0x174>)
 80020a0:	4a28      	ldr	r2, [pc, #160]	@ (8002144 <task_menu_init+0x170>)
 80020a2:	213f      	movs	r1, #63	@ 0x3f
 80020a4:	f001 f946 	bl	8003334 <sniprintf>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4a1d      	ldr	r2, [pc, #116]	@ (8002120 <task_menu_init+0x14c>)
 80020ac:	6013      	str	r3, [r2, #0]
 80020ae:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <task_menu_init+0x13c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7ff ff7a 	bl	8001fac <logger_log_print_>
 80020b8:	b662      	cpsie	i

	b_event = p_task_menu_dta->flag;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	799b      	ldrb	r3, [r3, #6]
 80020be:	727b      	strb	r3, [r7, #9]
	LOGGER_LOG("   %s = %s\r\n", GET_NAME(b_event), (b_event ? "true" : "false"));
 80020c0:	b672      	cpsid	i
 80020c2:	4b13      	ldr	r3, [pc, #76]	@ (8002110 <task_menu_init+0x13c>)
 80020c4:	6818      	ldr	r0, [r3, #0]
 80020c6:	7a7b      	ldrb	r3, [r7, #9]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <task_menu_init+0xfc>
 80020cc:	4b1f      	ldr	r3, [pc, #124]	@ (800214c <task_menu_init+0x178>)
 80020ce:	e000      	b.n	80020d2 <task_menu_init+0xfe>
 80020d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002150 <task_menu_init+0x17c>)
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	4b1f      	ldr	r3, [pc, #124]	@ (8002154 <task_menu_init+0x180>)
 80020d6:	4a20      	ldr	r2, [pc, #128]	@ (8002158 <task_menu_init+0x184>)
 80020d8:	213f      	movs	r1, #63	@ 0x3f
 80020da:	f001 f92b 	bl	8003334 <sniprintf>
 80020de:	4603      	mov	r3, r0
 80020e0:	4a0f      	ldr	r2, [pc, #60]	@ (8002120 <task_menu_init+0x14c>)
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <task_menu_init+0x13c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff ff5f 	bl	8001fac <logger_log_print_>
 80020ee:	b662      	cpsie	i

    displayInit( DISPLAY_CONNECTION_GPIO_4BITS );
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff fc15 	bl	8001920 <displayInit>


	HAL_GPIO_WritePin(LED_A_PORT, LED_A_PIN, LED_A_ON);
 80020f6:	2201      	movs	r2, #1
 80020f8:	2120      	movs	r1, #32
 80020fa:	4818      	ldr	r0, [pc, #96]	@ (800215c <task_menu_init+0x188>)
 80020fc:	f7fe fdad 	bl	8000c5a <HAL_GPIO_WritePin>

	g_task_menu_tick_cnt = G_TASK_MEN_TICK_CNT_INI;
 8002100:	4b17      	ldr	r3, [pc, #92]	@ (8002160 <task_menu_init+0x18c>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	080045fc 	.word	0x080045fc
 8002114:	2000001c 	.word	0x2000001c
 8002118:	08004378 	.word	0x08004378
 800211c:	08004388 	.word	0x08004388
 8002120:	20000168 	.word	0x20000168
 8002124:	20000020 	.word	0x20000020
 8002128:	080043a0 	.word	0x080043a0
 800212c:	080043ac 	.word	0x080043ac
 8002130:	20000198 	.word	0x20000198
 8002134:	080043bc 	.word	0x080043bc
 8002138:	080043cc 	.word	0x080043cc
 800213c:	20000014 	.word	0x20000014
 8002140:	080043dc 	.word	0x080043dc
 8002144:	080043e4 	.word	0x080043e4
 8002148:	080043f0 	.word	0x080043f0
 800214c:	080043f8 	.word	0x080043f8
 8002150:	08004400 	.word	0x08004400
 8002154:	08004408 	.word	0x08004408
 8002158:	08004410 	.word	0x08004410
 800215c:	40010800 	.word	0x40010800
 8002160:	2000019c 	.word	0x2000019c

08002164 <task_menu_update>:

void task_menu_update(void *parameters)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08e      	sub	sp, #56	@ 0x38
 8002168:	af02      	add	r7, sp, #8
 800216a:	6078      	str	r0, [r7, #4]
	task_menu_dta_t         *p_task_menu_dta;
	task_sub_menu_dta_t     *p_task_sub_menu_dta;



	bool b_time_update_required = false;
 800216c:	2300      	movs	r3, #0
 800216e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    char menu_str[16];
    char power_st[4];
    char spin_st[2];

	p_task_sub_menu_dta = &task_sub_menu_dta;
 8002172:	4b9e      	ldr	r3, [pc, #632]	@ (80023ec <task_menu_update+0x288>)
 8002174:	62bb      	str	r3, [r7, #40]	@ 0x28

	g_task_menu_cnt++;
 8002176:	4b9e      	ldr	r3, [pc, #632]	@ (80023f0 <task_menu_update+0x28c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	3301      	adds	r3, #1
 800217c:	4a9c      	ldr	r2, [pc, #624]	@ (80023f0 <task_menu_update+0x28c>)
 800217e:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_menu_tick) */
	__asm("CPSID i");	/* disable interrupts*/
 8002180:	b672      	cpsid	i
    if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
 8002182:	4b9c      	ldr	r3, [pc, #624]	@ (80023f4 <task_menu_update+0x290>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <task_menu_update+0x36>
    {
    	g_task_menu_tick_cnt--;
 800218a:	4b9a      	ldr	r3, [pc, #616]	@ (80023f4 <task_menu_update+0x290>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	3b01      	subs	r3, #1
 8002190:	4a98      	ldr	r2, [pc, #608]	@ (80023f4 <task_menu_update+0x290>)
 8002192:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8002194:	2301      	movs	r3, #1
 8002196:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }
    __asm("CPSIE i");	/* enable interrupts*/
 800219a:	b662      	cpsie	i

    while (b_time_update_required)
 800219c:	e275      	b.n	800268a <task_menu_update+0x526>
    {
		/* Protect shared resource (g_task_menu_tick) */
		__asm("CPSID i");	/* disable interrupts*/
 800219e:	b672      	cpsid	i
		if (G_TASK_MEN_TICK_CNT_INI < g_task_menu_tick_cnt)
 80021a0:	4b94      	ldr	r3, [pc, #592]	@ (80023f4 <task_menu_update+0x290>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <task_menu_update+0x56>
		{
			g_task_menu_tick_cnt--;
 80021a8:	4b92      	ldr	r3, [pc, #584]	@ (80023f4 <task_menu_update+0x290>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	4a91      	ldr	r2, [pc, #580]	@ (80023f4 <task_menu_update+0x290>)
 80021b0:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 80021b2:	2301      	movs	r3, #1
 80021b4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80021b8:	e002      	b.n	80021c0 <task_menu_update+0x5c>
		}
		else
		{
			b_time_update_required = false;
 80021ba:	2300      	movs	r3, #0
 80021bc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		__asm("CPSIE i");	/* enable interrupts*/
 80021c0:	b662      	cpsie	i

    	/* Update Task Menu Data Pointer */
		p_task_menu_dta = &task_menu_dta;
 80021c2:	4b8d      	ldr	r3, [pc, #564]	@ (80023f8 <task_menu_update+0x294>)
 80021c4:	627b      	str	r3, [r7, #36]	@ 0x24

    	if (DEL_MEN_XX_MIN < p_task_menu_dta->tick)
 80021c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d005      	beq.n	80021da <task_menu_update+0x76>
		{
			p_task_menu_dta->tick--;
 80021ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	1e5a      	subs	r2, r3, #1
 80021d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	e257      	b.n	800268a <task_menu_update+0x526>
		}
		else
		{

			p_task_menu_dta->tick = DEL_MEN_XX_MAX;
 80021da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021dc:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80021e0:	601a      	str	r2, [r3, #0]

			if (true == any_event_task_menu())
 80021e2:	f000 fadd 	bl	80027a0 <any_event_task_menu>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d008      	beq.n	80021fe <task_menu_update+0x9a>
			{
				p_task_menu_dta->flag = true;
 80021ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ee:	2201      	movs	r2, #1
 80021f0:	719a      	strb	r2, [r3, #6]
				p_task_menu_dta->event = get_event_task_menu();
 80021f2:	f000 faaf 	bl	8002754 <get_event_task_menu>
 80021f6:	4603      	mov	r3, r0
 80021f8:	461a      	mov	r2, r3
 80021fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fc:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_menu_dta->state)
 80021fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002200:	791b      	ldrb	r3, [r3, #4]
 8002202:	3b02      	subs	r3, #2
 8002204:	2b03      	cmp	r3, #3
 8002206:	f200 8237 	bhi.w	8002678 <task_menu_update+0x514>
 800220a:	a201      	add	r2, pc, #4	@ (adr r2, 8002210 <task_menu_update+0xac>)
 800220c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002210:	08002221 	.word	0x08002221
 8002214:	08002303 	.word	0x08002303
 8002218:	08002421 	.word	0x08002421
 800221c:	08002509 	.word	0x08002509
			{
				case ST_MAIN_MENU:

	            	  	  	      p_task_menu_motor_dta = & task_menu_motor_dta_1;
 8002220:	4b76      	ldr	r3, [pc, #472]	@ (80023fc <task_menu_update+0x298>)
 8002222:	4a77      	ldr	r2, [pc, #476]	@ (8002400 <task_menu_update+0x29c>)
 8002224:	601a      	str	r2, [r3, #0]
	             	              if (p_task_menu_motor_dta->motor_power==0){strcpy(power_st,"OFF");}
 8002226:	4b75      	ldr	r3, [pc, #468]	@ (80023fc <task_menu_update+0x298>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d102      	bne.n	8002236 <task_menu_update+0xd2>
 8002230:	4b74      	ldr	r3, [pc, #464]	@ (8002404 <task_menu_update+0x2a0>)
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	e001      	b.n	800223a <task_menu_update+0xd6>
	    	            	  		  else{strcpy(power_st,"ON ");}
 8002236:	4b74      	ldr	r3, [pc, #464]	@ (8002408 <task_menu_update+0x2a4>)
 8002238:	613b      	str	r3, [r7, #16]
	    	            	      if (p_task_menu_motor_dta->motor_spin==0){strcpy(spin_st,"L");}
 800223a:	4b70      	ldr	r3, [pc, #448]	@ (80023fc <task_menu_update+0x298>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d102      	bne.n	800224a <task_menu_update+0xe6>
 8002244:	234c      	movs	r3, #76	@ 0x4c
 8002246:	81bb      	strh	r3, [r7, #12]
 8002248:	e001      	b.n	800224e <task_menu_update+0xea>
	    	            	          else{strcpy(spin_st,"R");}
 800224a:	2352      	movs	r3, #82	@ 0x52
 800224c:	81bb      	strh	r3, [r7, #12]

	            	              displayCharPositionWrite(0,0);
 800224e:	2100      	movs	r1, #0
 8002250:	2000      	movs	r0, #0
 8002252:	f7ff fbe1 	bl	8001a18 <displayCharPositionWrite>
		            	  	  	  snprintf(menu_str, sizeof(menu_str), "Motor 1:%s %lu %s",power_st, p_task_menu_motor_dta->motor_speed, spin_st);
 8002256:	4b69      	ldr	r3, [pc, #420]	@ (80023fc <task_menu_update+0x298>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f107 0110 	add.w	r1, r7, #16
 8002260:	f107 0014 	add.w	r0, r7, #20
 8002264:	f107 020c 	add.w	r2, r7, #12
 8002268:	9201      	str	r2, [sp, #4]
 800226a:	9300      	str	r3, [sp, #0]
 800226c:	460b      	mov	r3, r1
 800226e:	4a67      	ldr	r2, [pc, #412]	@ (800240c <task_menu_update+0x2a8>)
 8002270:	2110      	movs	r1, #16
 8002272:	f001 f85f 	bl	8003334 <sniprintf>
            	  	              displayStringWrite(menu_str);
 8002276:	f107 0314 	add.w	r3, r7, #20
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fc22 	bl	8001ac4 <displayStringWrite>

	            	  	  	      p_task_menu_motor_dta = & task_menu_motor_dta_2;
 8002280:	4b5e      	ldr	r3, [pc, #376]	@ (80023fc <task_menu_update+0x298>)
 8002282:	4a63      	ldr	r2, [pc, #396]	@ (8002410 <task_menu_update+0x2ac>)
 8002284:	601a      	str	r2, [r3, #0]
	            	              if (p_task_menu_motor_dta->motor_power==0){strcpy(power_st,"OFF");}
 8002286:	4b5d      	ldr	r3, [pc, #372]	@ (80023fc <task_menu_update+0x298>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d102      	bne.n	8002296 <task_menu_update+0x132>
 8002290:	4b5c      	ldr	r3, [pc, #368]	@ (8002404 <task_menu_update+0x2a0>)
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	e001      	b.n	800229a <task_menu_update+0x136>
	            	  			      else{strcpy(power_st,"ON ");}
 8002296:	4b5c      	ldr	r3, [pc, #368]	@ (8002408 <task_menu_update+0x2a4>)
 8002298:	613b      	str	r3, [r7, #16]
	            	              if (p_task_menu_motor_dta->motor_spin==0){strcpy(spin_st,"L");}
 800229a:	4b58      	ldr	r3, [pc, #352]	@ (80023fc <task_menu_update+0x298>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <task_menu_update+0x146>
 80022a4:	234c      	movs	r3, #76	@ 0x4c
 80022a6:	81bb      	strh	r3, [r7, #12]
 80022a8:	e001      	b.n	80022ae <task_menu_update+0x14a>
	            	                  else{strcpy(spin_st,"R");}
 80022aa:	2352      	movs	r3, #82	@ 0x52
 80022ac:	81bb      	strh	r3, [r7, #12]
	            	              displayCharPositionWrite(0,1);
 80022ae:	2101      	movs	r1, #1
 80022b0:	2000      	movs	r0, #0
 80022b2:	f7ff fbb1 	bl	8001a18 <displayCharPositionWrite>
	            	  	  	      snprintf(menu_str, sizeof(menu_str), "Motor 2:%s %lu %s",power_st, p_task_menu_motor_dta->motor_speed, spin_st);
 80022b6:	4b51      	ldr	r3, [pc, #324]	@ (80023fc <task_menu_update+0x298>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f107 0110 	add.w	r1, r7, #16
 80022c0:	f107 0014 	add.w	r0, r7, #20
 80022c4:	f107 020c 	add.w	r2, r7, #12
 80022c8:	9201      	str	r2, [sp, #4]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	460b      	mov	r3, r1
 80022ce:	4a51      	ldr	r2, [pc, #324]	@ (8002414 <task_menu_update+0x2b0>)
 80022d0:	2110      	movs	r1, #16
 80022d2:	f001 f82f 	bl	8003334 <sniprintf>
            	  	              displayStringWrite(menu_str);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fbf2 	bl	8001ac4 <displayStringWrite>


	            	  	  	  	  if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event)){
 80022e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e2:	799b      	ldrb	r3, [r3, #6]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	f000 81c9 	beq.w	800267c <task_menu_update+0x518>
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	795b      	ldrb	r3, [r3, #5]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	f040 81c4 	bne.w	800267c <task_menu_update+0x518>
	            	  	  	  		  p_task_menu_dta->flag = false;
 80022f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f6:	2200      	movs	r2, #0
 80022f8:	719a      	strb	r2, [r3, #6]
	            	  	  	  		  p_task_menu_dta->state = ST_01_MENU;}
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	2203      	movs	r2, #3
 80022fe:	711a      	strb	r2, [r3, #4]
	            	  	  	  	  break;
 8002300:	e1bc      	b.n	800267c <task_menu_update+0x518>

				case ST_01_MENU:
					 	 	 	 displayCharPositionWrite(0, 0);
 8002302:	2100      	movs	r1, #0
 8002304:	2000      	movs	r0, #0
 8002306:	f7ff fb87 	bl	8001a18 <displayCharPositionWrite>
					 	 	 	 displayStringWrite(" Enter/Next/Esc ");
 800230a:	4843      	ldr	r0, [pc, #268]	@ (8002418 <task_menu_update+0x2b4>)
 800230c:	f7ff fbda 	bl	8001ac4 <displayStringWrite>

					 	 	 	 if(p_task_sub_menu_dta->sub_menu_1 == MOTOR_ID_1_MEN_1){
 8002310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d118      	bne.n	800234a <task_menu_update+0x1e6>
					 	 	 		p_task_menu_motor_dta = & task_menu_motor_dta_1;
 8002318:	4b38      	ldr	r3, [pc, #224]	@ (80023fc <task_menu_update+0x298>)
 800231a:	4a39      	ldr	r2, [pc, #228]	@ (8002400 <task_menu_update+0x29c>)
 800231c:	601a      	str	r2, [r3, #0]
					 	 	 		p_task_menu_motor_dta->motor_id=MOTOR_ID_1_MEN_1+1;
 800231e:	4b37      	ldr	r3, [pc, #220]	@ (80023fc <task_menu_update+0x298>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2201      	movs	r2, #1
 8002324:	601a      	str	r2, [r3, #0]

					 	 	 		 displayCharPositionWrite(0,1);
 8002326:	2101      	movs	r1, #1
 8002328:	2000      	movs	r0, #0
 800232a:	f7ff fb75 	bl	8001a18 <displayCharPositionWrite>
						 	 		 snprintf(menu_str, sizeof(menu_str),"Motor: %lu       ",( p_task_menu_motor_dta->motor_id));
 800232e:	4b33      	ldr	r3, [pc, #204]	@ (80023fc <task_menu_update+0x298>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f107 0014 	add.w	r0, r7, #20
 8002338:	4a38      	ldr	r2, [pc, #224]	@ (800241c <task_menu_update+0x2b8>)
 800233a:	2110      	movs	r1, #16
 800233c:	f000 fffa 	bl	8003334 <sniprintf>
								 	 	     displayStringWrite(menu_str);}
 8002340:	f107 0314 	add.w	r3, r7, #20
 8002344:	4618      	mov	r0, r3
 8002346:	f7ff fbbd 	bl	8001ac4 <displayStringWrite>

					 	 	 	 if(p_task_sub_menu_dta->sub_menu_1== MOTOR_ID_2_MEN_1){
 800234a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d118      	bne.n	8002384 <task_menu_update+0x220>
					 	 	 		 p_task_menu_motor_dta =& task_menu_motor_dta_2;
 8002352:	4b2a      	ldr	r3, [pc, #168]	@ (80023fc <task_menu_update+0x298>)
 8002354:	4a2e      	ldr	r2, [pc, #184]	@ (8002410 <task_menu_update+0x2ac>)
 8002356:	601a      	str	r2, [r3, #0]
					 	 	 		 p_task_menu_motor_dta->motor_id = MOTOR_ID_2_MEN_1+1;
 8002358:	4b28      	ldr	r3, [pc, #160]	@ (80023fc <task_menu_update+0x298>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2202      	movs	r2, #2
 800235e:	601a      	str	r2, [r3, #0]

					 	 	 		 displayCharPositionWrite(0,1);
 8002360:	2101      	movs	r1, #1
 8002362:	2000      	movs	r0, #0
 8002364:	f7ff fb58 	bl	8001a18 <displayCharPositionWrite>
						 	 		 snprintf(menu_str, sizeof(menu_str),"Motor: %lu       ",( p_task_menu_motor_dta->motor_id));
 8002368:	4b24      	ldr	r3, [pc, #144]	@ (80023fc <task_menu_update+0x298>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f107 0014 	add.w	r0, r7, #20
 8002372:	4a2a      	ldr	r2, [pc, #168]	@ (800241c <task_menu_update+0x2b8>)
 8002374:	2110      	movs	r1, #16
 8002376:	f000 ffdd 	bl	8003334 <sniprintf>
								 	 	     displayStringWrite(menu_str);}
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff fba0 	bl	8001ac4 <displayStringWrite>
					 	 	 	/*-------------------------------------------------------------------------------------------*/
					 	 	 	 if ((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event)){
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	799b      	ldrb	r3, [r3, #6]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <task_menu_update+0x23a>
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	795b      	ldrb	r3, [r3, #5]
 8002390:	2b03      	cmp	r3, #3
 8002392:	d104      	bne.n	800239e <task_menu_update+0x23a>
					 	 	 		p_task_sub_menu_dta->sub_menu_1++;}
 8002394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	1c5a      	adds	r2, r3, #1
 800239a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800239c:	601a      	str	r2, [r3, #0]

					 	 	 	 if (p_task_sub_menu_dta->sub_menu_1> MENU_1_MAX ){
 800239e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d902      	bls.n	80023ac <task_menu_update+0x248>
					 	 	 		p_task_sub_menu_dta->sub_menu_1=0;}
 80023a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]

								 if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event)){
 80023ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ae:	799b      	ldrb	r3, [r3, #6]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d009      	beq.n	80023c8 <task_menu_update+0x264>
 80023b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b6:	795b      	ldrb	r3, [r3, #5]
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d105      	bne.n	80023c8 <task_menu_update+0x264>
									p_task_menu_dta->flag = false;
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	2200      	movs	r2, #0
 80023c0:	719a      	strb	r2, [r3, #6]
									p_task_menu_dta->state = ST_02_MENU;}
 80023c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c4:	2204      	movs	r2, #4
 80023c6:	711a      	strb	r2, [r3, #4]

								 if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event)){
 80023c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ca:	799b      	ldrb	r3, [r3, #6]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	f000 8157 	beq.w	8002680 <task_menu_update+0x51c>
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	795b      	ldrb	r3, [r3, #5]
 80023d6:	2b05      	cmp	r3, #5
 80023d8:	f040 8152 	bne.w	8002680 <task_menu_update+0x51c>
									p_task_menu_dta->flag = false;
 80023dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023de:	2200      	movs	r2, #0
 80023e0:	719a      	strb	r2, [r3, #6]
									p_task_menu_dta->state = ST_MAIN_MENU;}
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	2202      	movs	r2, #2
 80023e6:	711a      	strb	r2, [r3, #4]
								 break;
 80023e8:	e14a      	b.n	8002680 <task_menu_update+0x51c>
 80023ea:	bf00      	nop
 80023ec:	2000018c 	.word	0x2000018c
 80023f0:	20000198 	.word	0x20000198
 80023f4:	2000019c 	.word	0x2000019c
 80023f8:	20000014 	.word	0x20000014
 80023fc:	200001a0 	.word	0x200001a0
 8002400:	2000016c 	.word	0x2000016c
 8002404:	0046464f 	.word	0x0046464f
 8002408:	00204e4f 	.word	0x00204e4f
 800240c:	08004420 	.word	0x08004420
 8002410:	2000017c 	.word	0x2000017c
 8002414:	08004434 	.word	0x08004434
 8002418:	08004448 	.word	0x08004448
 800241c:	0800445c 	.word	0x0800445c

				     case ST_02_MENU:

							        displayCharPositionWrite(0, 0);
 8002420:	2100      	movs	r1, #0
 8002422:	2000      	movs	r0, #0
 8002424:	f7ff faf8 	bl	8001a18 <displayCharPositionWrite>
							        displayStringWrite(" Enter/Next/Esc ");
 8002428:	489d      	ldr	r0, [pc, #628]	@ (80026a0 <task_menu_update+0x53c>)
 800242a:	f7ff fb4b 	bl	8001ac4 <displayStringWrite>
							        displayCharPositionWrite(0,1);
 800242e:	2101      	movs	r1, #1
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff faf1 	bl	8001a18 <displayCharPositionWrite>

								 if(p_task_sub_menu_dta->sub_menu_2 == POWER_MEN_2){
 8002436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10d      	bne.n	800245a <task_menu_update+0x2f6>
									 snprintf(menu_str, sizeof(menu_str), "M%lu   Power    ", (p_task_menu_motor_dta->motor_id));
 800243e:	4b99      	ldr	r3, [pc, #612]	@ (80026a4 <task_menu_update+0x540>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f107 0014 	add.w	r0, r7, #20
 8002448:	4a97      	ldr	r2, [pc, #604]	@ (80026a8 <task_menu_update+0x544>)
 800244a:	2110      	movs	r1, #16
 800244c:	f000 ff72 	bl	8003334 <sniprintf>
									 displayStringWrite(menu_str);}
 8002450:	f107 0314 	add.w	r3, r7, #20
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff fb35 	bl	8001ac4 <displayStringWrite>

								 if(p_task_sub_menu_dta->sub_menu_2== SPEED_MEN_2){
 800245a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b01      	cmp	r3, #1
 8002460:	d10d      	bne.n	800247e <task_menu_update+0x31a>
									 snprintf(menu_str, sizeof(menu_str), "M%lu   Speed    ", (p_task_menu_motor_dta->motor_id));
 8002462:	4b90      	ldr	r3, [pc, #576]	@ (80026a4 <task_menu_update+0x540>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f107 0014 	add.w	r0, r7, #20
 800246c:	4a8f      	ldr	r2, [pc, #572]	@ (80026ac <task_menu_update+0x548>)
 800246e:	2110      	movs	r1, #16
 8002470:	f000 ff60 	bl	8003334 <sniprintf>
									 displayStringWrite(menu_str);}
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	4618      	mov	r0, r3
 800247a:	f7ff fb23 	bl	8001ac4 <displayStringWrite>

								 if(p_task_sub_menu_dta->sub_menu_2== SPIN_MEN_2){
 800247e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d10d      	bne.n	80024a2 <task_menu_update+0x33e>
									 snprintf(menu_str, sizeof(menu_str), "M%lu    Spin    ", (p_task_menu_motor_dta->motor_id));
 8002486:	4b87      	ldr	r3, [pc, #540]	@ (80026a4 <task_menu_update+0x540>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f107 0014 	add.w	r0, r7, #20
 8002490:	4a87      	ldr	r2, [pc, #540]	@ (80026b0 <task_menu_update+0x54c>)
 8002492:	2110      	movs	r1, #16
 8002494:	f000 ff4e 	bl	8003334 <sniprintf>
									 displayStringWrite(menu_str);}
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fb11 	bl	8001ac4 <displayStringWrite>
                             /*-------------------------------------------------------------------------------------------*/
								 if ((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event)){
 80024a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a4:	799b      	ldrb	r3, [r3, #6]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d008      	beq.n	80024bc <task_menu_update+0x358>
 80024aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ac:	795b      	ldrb	r3, [r3, #5]
 80024ae:	2b03      	cmp	r3, #3
 80024b0:	d104      	bne.n	80024bc <task_menu_update+0x358>
									p_task_sub_menu_dta->sub_menu_2++;}
 80024b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	1c5a      	adds	r2, r3, #1
 80024b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ba:	605a      	str	r2, [r3, #4]

								 if (p_task_sub_menu_dta->sub_menu_2> MENU_2_MAX ){
 80024bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d902      	bls.n	80024ca <task_menu_update+0x366>
									p_task_sub_menu_dta->sub_menu_2=0;}
 80024c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024c6:	2200      	movs	r2, #0
 80024c8:	605a      	str	r2, [r3, #4]

								 if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event)){
 80024ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024cc:	799b      	ldrb	r3, [r3, #6]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <task_menu_update+0x382>
 80024d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d4:	795b      	ldrb	r3, [r3, #5]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d105      	bne.n	80024e6 <task_menu_update+0x382>
									p_task_menu_dta->flag = false;
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	2200      	movs	r2, #0
 80024de:	719a      	strb	r2, [r3, #6]
									p_task_menu_dta->state = ST_03_MENU;}
 80024e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e2:	2205      	movs	r2, #5
 80024e4:	711a      	strb	r2, [r3, #4]

								 if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event)){
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	799b      	ldrb	r3, [r3, #6]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	f000 80ca 	beq.w	8002684 <task_menu_update+0x520>
 80024f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024f2:	795b      	ldrb	r3, [r3, #5]
 80024f4:	2b05      	cmp	r3, #5
 80024f6:	f040 80c5 	bne.w	8002684 <task_menu_update+0x520>
									p_task_menu_dta->flag = false;
 80024fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024fc:	2200      	movs	r2, #0
 80024fe:	719a      	strb	r2, [r3, #6]
									p_task_menu_dta->state = ST_01_MENU;}
 8002500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002502:	2203      	movs	r2, #3
 8002504:	711a      	strb	r2, [r3, #4]
								 break;
 8002506:	e0bd      	b.n	8002684 <task_menu_update+0x520>


				     case ST_03_MENU:
					     	 	 displayCharPositionWrite(0, 0);
 8002508:	2100      	movs	r1, #0
 800250a:	2000      	movs	r0, #0
 800250c:	f7ff fa84 	bl	8001a18 <displayCharPositionWrite>
					     	 	displayStringWrite(" Enter/Next/Esc ");
 8002510:	4863      	ldr	r0, [pc, #396]	@ (80026a0 <task_menu_update+0x53c>)
 8002512:	f7ff fad7 	bl	8001ac4 <displayStringWrite>
								 displayStringWrite(menu_str);
 8002516:	f107 0314 	add.w	r3, r7, #20
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fad2 	bl	8001ac4 <displayStringWrite>
								 displayCharPositionWrite(0, 1);
 8002520:	2101      	movs	r1, #1
 8002522:	2000      	movs	r0, #0
 8002524:	f7ff fa78 	bl	8001a18 <displayCharPositionWrite>

								 switch (p_task_sub_menu_dta->sub_menu_2)	{
 8002528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	2b02      	cmp	r3, #2
 800252e:	d04f      	beq.n	80025d0 <task_menu_update+0x46c>
 8002530:	2b02      	cmp	r3, #2
 8002532:	d876      	bhi.n	8002622 <task_menu_update+0x4be>
 8002534:	2b00      	cmp	r3, #0
 8002536:	d002      	beq.n	800253e <task_menu_update+0x3da>
 8002538:	2b01      	cmp	r3, #1
 800253a:	d029      	beq.n	8002590 <task_menu_update+0x42c>
					    	            	          else{strcpy(spin_st,"R");}
								 	 		 	snprintf(menu_str, sizeof(menu_str), "M%lu  Spin: %s ", (p_task_menu_motor_dta->motor_id),spin_st);
								 	 		 	          displayStringWrite(menu_str);
								 	     break;

					                     default:break;}
 800253c:	e071      	b.n	8002622 <task_menu_update+0x4be>
								 				if (p_task_sub_menu_dta->sub_menu_3 > MENU_3_POWER_MAX){
 800253e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d902      	bls.n	800254c <task_menu_update+0x3e8>
								 	 		 		 p_task_sub_menu_dta->sub_menu_3=0;}
 8002546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
								 	 		 	p_task_menu_motor_dta->motor_power = p_task_sub_menu_dta->sub_menu_3;
 800254c:	4b55      	ldr	r3, [pc, #340]	@ (80026a4 <task_menu_update+0x540>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002552:	6892      	ldr	r2, [r2, #8]
 8002554:	609a      	str	r2, [r3, #8]
					             	              if (p_task_menu_motor_dta->motor_power==0){strcpy(power_st,"OFF");}
 8002556:	4b53      	ldr	r3, [pc, #332]	@ (80026a4 <task_menu_update+0x540>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d102      	bne.n	8002566 <task_menu_update+0x402>
 8002560:	4b54      	ldr	r3, [pc, #336]	@ (80026b4 <task_menu_update+0x550>)
 8002562:	613b      	str	r3, [r7, #16]
 8002564:	e001      	b.n	800256a <task_menu_update+0x406>
					    	            	  		  else{strcpy(power_st,"ON ");}
 8002566:	4b54      	ldr	r3, [pc, #336]	@ (80026b8 <task_menu_update+0x554>)
 8002568:	613b      	str	r3, [r7, #16]
								 				snprintf(menu_str, sizeof(menu_str), "M%lu  Power: %s ", (p_task_menu_motor_dta->motor_id), power_st);
 800256a:	4b4e      	ldr	r3, [pc, #312]	@ (80026a4 <task_menu_update+0x540>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	f107 0014 	add.w	r0, r7, #20
 8002574:	f107 0310 	add.w	r3, r7, #16
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	4613      	mov	r3, r2
 800257c:	4a4f      	ldr	r2, [pc, #316]	@ (80026bc <task_menu_update+0x558>)
 800257e:	2110      	movs	r1, #16
 8002580:	f000 fed8 	bl	8003334 <sniprintf>
								 				        displayStringWrite(menu_str);
 8002584:	f107 0314 	add.w	r3, r7, #20
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff fa9b 	bl	8001ac4 <displayStringWrite>
								 	 	  break;
 800258e:	e049      	b.n	8002624 <task_menu_update+0x4c0>
												  if (p_task_sub_menu_dta->sub_menu_3 > MENU_3_SPEED_MAX){
 8002590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b09      	cmp	r3, #9
 8002596:	d902      	bls.n	800259e <task_menu_update+0x43a>
													 p_task_sub_menu_dta->sub_menu_3=0;}
 8002598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259a:	2200      	movs	r2, #0
 800259c:	609a      	str	r2, [r3, #8]
												  p_task_menu_motor_dta->motor_speed= p_task_sub_menu_dta->sub_menu_3;
 800259e:	4b41      	ldr	r3, [pc, #260]	@ (80026a4 <task_menu_update+0x540>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025a4:	6892      	ldr	r2, [r2, #8]
 80025a6:	605a      	str	r2, [r3, #4]
												  snprintf(menu_str, sizeof(menu_str), "M%lu  Speed: %lu ", (p_task_menu_motor_dta->motor_id), (p_task_menu_motor_dta->motor_speed));
 80025a8:	4b3e      	ldr	r3, [pc, #248]	@ (80026a4 <task_menu_update+0x540>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	4b3d      	ldr	r3, [pc, #244]	@ (80026a4 <task_menu_update+0x540>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f107 0014 	add.w	r0, r7, #20
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	4613      	mov	r3, r2
 80025bc:	4a40      	ldr	r2, [pc, #256]	@ (80026c0 <task_menu_update+0x55c>)
 80025be:	2110      	movs	r1, #16
 80025c0:	f000 feb8 	bl	8003334 <sniprintf>
												       displayStringWrite(menu_str);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff fa7b 	bl	8001ac4 <displayStringWrite>
									     break;
 80025ce:	e029      	b.n	8002624 <task_menu_update+0x4c0>
								 	 		 	 if (p_task_sub_menu_dta->sub_menu_3 > MENU_3_SPIN_MAX){
 80025d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d902      	bls.n	80025de <task_menu_update+0x47a>
								 	 		 		 p_task_sub_menu_dta->sub_menu_3=0;}
 80025d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025da:	2200      	movs	r2, #0
 80025dc:	609a      	str	r2, [r3, #8]
								 	 		 	 p_task_menu_motor_dta->motor_spin= p_task_sub_menu_dta->sub_menu_3;
 80025de:	4b31      	ldr	r3, [pc, #196]	@ (80026a4 <task_menu_update+0x540>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80025e4:	6892      	ldr	r2, [r2, #8]
 80025e6:	60da      	str	r2, [r3, #12]
								 	 		 	 if (p_task_menu_motor_dta->motor_spin==0){strcpy(spin_st,"L");}
 80025e8:	4b2e      	ldr	r3, [pc, #184]	@ (80026a4 <task_menu_update+0x540>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d102      	bne.n	80025f8 <task_menu_update+0x494>
 80025f2:	234c      	movs	r3, #76	@ 0x4c
 80025f4:	81bb      	strh	r3, [r7, #12]
 80025f6:	e001      	b.n	80025fc <task_menu_update+0x498>
					    	            	          else{strcpy(spin_st,"R");}
 80025f8:	2352      	movs	r3, #82	@ 0x52
 80025fa:	81bb      	strh	r3, [r7, #12]
								 	 		 	snprintf(menu_str, sizeof(menu_str), "M%lu  Spin: %s ", (p_task_menu_motor_dta->motor_id),spin_st);
 80025fc:	4b29      	ldr	r3, [pc, #164]	@ (80026a4 <task_menu_update+0x540>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	f107 0014 	add.w	r0, r7, #20
 8002606:	f107 030c 	add.w	r3, r7, #12
 800260a:	9300      	str	r3, [sp, #0]
 800260c:	4613      	mov	r3, r2
 800260e:	4a2d      	ldr	r2, [pc, #180]	@ (80026c4 <task_menu_update+0x560>)
 8002610:	2110      	movs	r1, #16
 8002612:	f000 fe8f 	bl	8003334 <sniprintf>
								 	 		 	          displayStringWrite(menu_str);
 8002616:	f107 0314 	add.w	r3, r7, #20
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff fa52 	bl	8001ac4 <displayStringWrite>
								 	     break;
 8002620:	e000      	b.n	8002624 <task_menu_update+0x4c0>
					                     default:break;}
 8002622:	bf00      	nop
					 /*-------------------------------------------------------------------------------------------*/
	 	 	 	 	 	 	 if ((true == p_task_menu_dta->flag) && (EV_MEN_NEX_ACTIVE == p_task_menu_dta->event)){
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	799b      	ldrb	r3, [r3, #6]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <task_menu_update+0x4da>
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	795b      	ldrb	r3, [r3, #5]
 8002630:	2b03      	cmp	r3, #3
 8002632:	d104      	bne.n	800263e <task_menu_update+0x4da>
	 	 	 	 	 	 		p_task_sub_menu_dta->sub_menu_3++;}
 8002634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	1c5a      	adds	r2, r3, #1
 800263a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263c:	609a      	str	r2, [r3, #8]


							 if ((true == p_task_menu_dta->flag) && (EV_MEN_ESC_ACTIVE == p_task_menu_dta->event)){
 800263e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002640:	799b      	ldrb	r3, [r3, #6]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <task_menu_update+0x4f6>
 8002646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002648:	795b      	ldrb	r3, [r3, #5]
 800264a:	2b05      	cmp	r3, #5
 800264c:	d105      	bne.n	800265a <task_menu_update+0x4f6>
								p_task_menu_dta->flag = false;
 800264e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002650:	2200      	movs	r2, #0
 8002652:	719a      	strb	r2, [r3, #6]
								p_task_menu_dta->state = ST_02_MENU;}
 8002654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002656:	2204      	movs	r2, #4
 8002658:	711a      	strb	r2, [r3, #4]

							  if ((true == p_task_menu_dta->flag) && (EV_MEN_ENT_ACTIVE == p_task_menu_dta->event)){
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	799b      	ldrb	r3, [r3, #6]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d012      	beq.n	8002688 <task_menu_update+0x524>
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	795b      	ldrb	r3, [r3, #5]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d10e      	bne.n	8002688 <task_menu_update+0x524>
								  p_task_menu_dta->flag = false;
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	2200      	movs	r2, #0
 800266e:	719a      	strb	r2, [r3, #6]
								  p_task_menu_dta->state = ST_MAIN_MENU;}
 8002670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002672:	2202      	movs	r2, #2
 8002674:	711a      	strb	r2, [r3, #4]
							   break;
 8002676:	e007      	b.n	8002688 <task_menu_update+0x524>
				default:break;
 8002678:	bf00      	nop
 800267a:	e006      	b.n	800268a <task_menu_update+0x526>
	            	  	  	  	  break;
 800267c:	bf00      	nop
 800267e:	e004      	b.n	800268a <task_menu_update+0x526>
								 break;
 8002680:	bf00      	nop
 8002682:	e002      	b.n	800268a <task_menu_update+0x526>
								 break;
 8002684:	bf00      	nop
 8002686:	e000      	b.n	800268a <task_menu_update+0x526>
							   break;
 8002688:	bf00      	nop
    while (b_time_update_required)
 800268a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800268e:	2b00      	cmp	r3, #0
 8002690:	f47f ad85 	bne.w	800219e <task_menu_update+0x3a>
			}
		}
	}
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3730      	adds	r7, #48	@ 0x30
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	08004448 	.word	0x08004448
 80026a4:	200001a0 	.word	0x200001a0
 80026a8:	08004470 	.word	0x08004470
 80026ac:	08004484 	.word	0x08004484
 80026b0:	08004498 	.word	0x08004498
 80026b4:	0046464f 	.word	0x0046464f
 80026b8:	00204e4f 	.word	0x00204e4f
 80026bc:	080044ac 	.word	0x080044ac
 80026c0:	080044c0 	.word	0x080044c0
 80026c4:	080044d4 	.word	0x080044d4

080026c8 <init_queue_event_task_menu>:

/********************** external data declaration ****************************/

/********************** external functions definition ************************/
void init_queue_event_task_menu(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
	uint32_t i;

	queue_task_a.head = 0;
 80026ce:	4b0f      	ldr	r3, [pc, #60]	@ (800270c <init_queue_event_task_menu+0x44>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
	queue_task_a.tail = 0;
 80026d4:	4b0d      	ldr	r3, [pc, #52]	@ (800270c <init_queue_event_task_menu+0x44>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	605a      	str	r2, [r3, #4]
	queue_task_a.count = 0;
 80026da:	4b0c      	ldr	r3, [pc, #48]	@ (800270c <init_queue_event_task_menu+0x44>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]

	for (i = 0; i < MAX_EVENTS; i++)
 80026e0:	2300      	movs	r3, #0
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	e008      	b.n	80026f8 <init_queue_event_task_menu+0x30>
		queue_task_a.queue[i] = EVENT_UNDEFINED;
 80026e6:	4a09      	ldr	r2, [pc, #36]	@ (800270c <init_queue_event_task_menu+0x44>)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4413      	add	r3, r2
 80026ec:	330c      	adds	r3, #12
 80026ee:	22ff      	movs	r2, #255	@ 0xff
 80026f0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < MAX_EVENTS; i++)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3301      	adds	r3, #1
 80026f6:	607b      	str	r3, [r7, #4]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	d9f3      	bls.n	80026e6 <init_queue_event_task_menu+0x1e>
}
 80026fe:	bf00      	nop
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	bc80      	pop	{r7}
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	200001a4 	.word	0x200001a4

08002710 <put_event_task_menu>:

void put_event_task_menu(task_menu_ev_t event)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
	queue_task_a.count++;
 800271a:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <put_event_task_menu+0x40>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	3301      	adds	r3, #1
 8002720:	4a0b      	ldr	r2, [pc, #44]	@ (8002750 <put_event_task_menu+0x40>)
 8002722:	6093      	str	r3, [r2, #8]
	queue_task_a.queue[queue_task_a.head++] = event;
 8002724:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <put_event_task_menu+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	1c5a      	adds	r2, r3, #1
 800272a:	4909      	ldr	r1, [pc, #36]	@ (8002750 <put_event_task_menu+0x40>)
 800272c:	600a      	str	r2, [r1, #0]
 800272e:	4a08      	ldr	r2, [pc, #32]	@ (8002750 <put_event_task_menu+0x40>)
 8002730:	4413      	add	r3, r2
 8002732:	79fa      	ldrb	r2, [r7, #7]
 8002734:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.head)
 8002736:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <put_event_task_menu+0x40>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2b10      	cmp	r3, #16
 800273c:	d102      	bne.n	8002744 <put_event_task_menu+0x34>
		queue_task_a.head = 0;
 800273e:	4b04      	ldr	r3, [pc, #16]	@ (8002750 <put_event_task_menu+0x40>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	200001a4 	.word	0x200001a4

08002754 <get_event_task_menu>:

task_menu_ev_t get_event_task_menu(void)

{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
	task_menu_ev_t event;

	queue_task_a.count--;
 800275a:	4b10      	ldr	r3, [pc, #64]	@ (800279c <get_event_task_menu+0x48>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	3b01      	subs	r3, #1
 8002760:	4a0e      	ldr	r2, [pc, #56]	@ (800279c <get_event_task_menu+0x48>)
 8002762:	6093      	str	r3, [r2, #8]
	event = queue_task_a.queue[queue_task_a.tail];
 8002764:	4b0d      	ldr	r3, [pc, #52]	@ (800279c <get_event_task_menu+0x48>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4a0c      	ldr	r2, [pc, #48]	@ (800279c <get_event_task_menu+0x48>)
 800276a:	4413      	add	r3, r2
 800276c:	7b1b      	ldrb	r3, [r3, #12]
 800276e:	71fb      	strb	r3, [r7, #7]
	queue_task_a.queue[queue_task_a.tail++] = EVENT_UNDEFINED;
 8002770:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <get_event_task_menu+0x48>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	1c5a      	adds	r2, r3, #1
 8002776:	4909      	ldr	r1, [pc, #36]	@ (800279c <get_event_task_menu+0x48>)
 8002778:	604a      	str	r2, [r1, #4]
 800277a:	4a08      	ldr	r2, [pc, #32]	@ (800279c <get_event_task_menu+0x48>)
 800277c:	4413      	add	r3, r2
 800277e:	22ff      	movs	r2, #255	@ 0xff
 8002780:	731a      	strb	r2, [r3, #12]

	if (MAX_EVENTS == queue_task_a.tail)
 8002782:	4b06      	ldr	r3, [pc, #24]	@ (800279c <get_event_task_menu+0x48>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	2b10      	cmp	r3, #16
 8002788:	d102      	bne.n	8002790 <get_event_task_menu+0x3c>
		queue_task_a.tail = 0;
 800278a:	4b04      	ldr	r3, [pc, #16]	@ (800279c <get_event_task_menu+0x48>)
 800278c:	2200      	movs	r2, #0
 800278e:	605a      	str	r2, [r3, #4]

	return event;
 8002790:	79fb      	ldrb	r3, [r7, #7]
}
 8002792:	4618      	mov	r0, r3
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	bc80      	pop	{r7}
 800279a:	4770      	bx	lr
 800279c:	200001a4 	.word	0x200001a4

080027a0 <any_event_task_menu>:

bool any_event_task_menu(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  return (queue_task_a.head != queue_task_a.tail);
 80027a4:	4b06      	ldr	r3, [pc, #24]	@ (80027c0 <any_event_task_menu+0x20>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <any_event_task_menu+0x20>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	429a      	cmp	r2, r3
 80027ae:	bf14      	ite	ne
 80027b0:	2301      	movne	r3, #1
 80027b2:	2300      	moveq	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bc80      	pop	{r7}
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	200001a4 	.word	0x200001a4

080027c4 <task_sensor_init>:
uint32_t g_task_sensor_cnt;
volatile uint32_t g_task_sensor_tick_cnt;

/********************** external functions definition ************************/
void task_sensor_init(void *parameters)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af02      	add	r7, sp, #8
 80027ca:	6078      	str	r0, [r7, #4]
	task_sensor_dta_t *p_task_sensor_dta;
	task_sensor_st_t state;
	task_sensor_ev_t event;

	/* Print out: Task Initialized */
	LOGGER_LOG("  %s is running - %s\r\n", GET_NAME(task_sensor_init), p_task_sensor);
 80027cc:	b672      	cpsid	i
 80027ce:	4b49      	ldr	r3, [pc, #292]	@ (80028f4 <task_sensor_init+0x130>)
 80027d0:	6818      	ldr	r0, [r3, #0]
 80027d2:	4b49      	ldr	r3, [pc, #292]	@ (80028f8 <task_sensor_init+0x134>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	4b48      	ldr	r3, [pc, #288]	@ (80028fc <task_sensor_init+0x138>)
 80027da:	4a49      	ldr	r2, [pc, #292]	@ (8002900 <task_sensor_init+0x13c>)
 80027dc:	213f      	movs	r1, #63	@ 0x3f
 80027de:	f000 fda9 	bl	8003334 <sniprintf>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4a47      	ldr	r2, [pc, #284]	@ (8002904 <task_sensor_init+0x140>)
 80027e6:	6013      	str	r3, [r2, #0]
 80027e8:	4b42      	ldr	r3, [pc, #264]	@ (80028f4 <task_sensor_init+0x130>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff fbdd 	bl	8001fac <logger_log_print_>
 80027f2:	b662      	cpsie	i
	LOGGER_LOG("  %s is a %s\r\n", GET_NAME(task_sensor), p_task_sensor_);
 80027f4:	b672      	cpsid	i
 80027f6:	4b3f      	ldr	r3, [pc, #252]	@ (80028f4 <task_sensor_init+0x130>)
 80027f8:	6818      	ldr	r0, [r3, #0]
 80027fa:	4b43      	ldr	r3, [pc, #268]	@ (8002908 <task_sensor_init+0x144>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	9300      	str	r3, [sp, #0]
 8002800:	4b42      	ldr	r3, [pc, #264]	@ (800290c <task_sensor_init+0x148>)
 8002802:	4a43      	ldr	r2, [pc, #268]	@ (8002910 <task_sensor_init+0x14c>)
 8002804:	213f      	movs	r1, #63	@ 0x3f
 8002806:	f000 fd95 	bl	8003334 <sniprintf>
 800280a:	4603      	mov	r3, r0
 800280c:	4a3d      	ldr	r2, [pc, #244]	@ (8002904 <task_sensor_init+0x140>)
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b38      	ldr	r3, [pc, #224]	@ (80028f4 <task_sensor_init+0x130>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4618      	mov	r0, r3
 8002816:	f7ff fbc9 	bl	8001fac <logger_log_print_>
 800281a:	b662      	cpsie	i

	g_task_sensor_cnt = G_TASK_SEN_CNT_INIT;
 800281c:	4b3d      	ldr	r3, [pc, #244]	@ (8002914 <task_sensor_init+0x150>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]

	/* Print out: Task execution counter */
	LOGGER_LOG("   %s = %lu\r\n", GET_NAME(g_task_sensor_cnt), g_task_sensor_cnt);
 8002822:	b672      	cpsid	i
 8002824:	4b33      	ldr	r3, [pc, #204]	@ (80028f4 <task_sensor_init+0x130>)
 8002826:	6818      	ldr	r0, [r3, #0]
 8002828:	4b3a      	ldr	r3, [pc, #232]	@ (8002914 <task_sensor_init+0x150>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	9300      	str	r3, [sp, #0]
 800282e:	4b3a      	ldr	r3, [pc, #232]	@ (8002918 <task_sensor_init+0x154>)
 8002830:	4a3a      	ldr	r2, [pc, #232]	@ (800291c <task_sensor_init+0x158>)
 8002832:	213f      	movs	r1, #63	@ 0x3f
 8002834:	f000 fd7e 	bl	8003334 <sniprintf>
 8002838:	4603      	mov	r3, r0
 800283a:	4a32      	ldr	r2, [pc, #200]	@ (8002904 <task_sensor_init+0x140>)
 800283c:	6013      	str	r3, [r2, #0]
 800283e:	4b2d      	ldr	r3, [pc, #180]	@ (80028f4 <task_sensor_init+0x130>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4618      	mov	r0, r3
 8002844:	f7ff fbb2 	bl	8001fac <logger_log_print_>
 8002848:	b662      	cpsie	i

	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
 800284e:	e046      	b.n	80028de <task_sensor_init+0x11a>
	{
		/* Update Task Sensor Data Pointer */
		p_task_sensor_dta = &task_sensor_dta_list[index];
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4a32      	ldr	r2, [pc, #200]	@ (8002920 <task_sensor_init+0x15c>)
 8002856:	4413      	add	r3, r2
 8002858:	613b      	str	r3, [r7, #16]

		/* Print out: Index & Task execution FSM */
		LOGGER_LOG("   %s = %lu", GET_NAME(index), index);
 800285a:	b672      	cpsid	i
 800285c:	4b25      	ldr	r3, [pc, #148]	@ (80028f4 <task_sensor_init+0x130>)
 800285e:	6818      	ldr	r0, [r3, #0]
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	4b2f      	ldr	r3, [pc, #188]	@ (8002924 <task_sensor_init+0x160>)
 8002866:	4a30      	ldr	r2, [pc, #192]	@ (8002928 <task_sensor_init+0x164>)
 8002868:	213f      	movs	r1, #63	@ 0x3f
 800286a:	f000 fd63 	bl	8003334 <sniprintf>
 800286e:	4603      	mov	r3, r0
 8002870:	4a24      	ldr	r2, [pc, #144]	@ (8002904 <task_sensor_init+0x140>)
 8002872:	6013      	str	r3, [r2, #0]
 8002874:	4b1f      	ldr	r3, [pc, #124]	@ (80028f4 <task_sensor_init+0x130>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fb97 	bl	8001fac <logger_log_print_>
 800287e:	b662      	cpsie	i

		state = p_task_sensor_dta->state;
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	791b      	ldrb	r3, [r3, #4]
 8002884:	73fb      	strb	r3, [r7, #15]
		LOGGER_LOG("   %s = %lu", GET_NAME(state), (uint32_t)state);
 8002886:	b672      	cpsid	i
 8002888:	4b1a      	ldr	r3, [pc, #104]	@ (80028f4 <task_sensor_init+0x130>)
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	7bfb      	ldrb	r3, [r7, #15]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	4b26      	ldr	r3, [pc, #152]	@ (800292c <task_sensor_init+0x168>)
 8002892:	4a25      	ldr	r2, [pc, #148]	@ (8002928 <task_sensor_init+0x164>)
 8002894:	213f      	movs	r1, #63	@ 0x3f
 8002896:	f000 fd4d 	bl	8003334 <sniprintf>
 800289a:	4603      	mov	r3, r0
 800289c:	4a19      	ldr	r2, [pc, #100]	@ (8002904 <task_sensor_init+0x140>)
 800289e:	6013      	str	r3, [r2, #0]
 80028a0:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <task_sensor_init+0x130>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4618      	mov	r0, r3
 80028a6:	f7ff fb81 	bl	8001fac <logger_log_print_>
 80028aa:	b662      	cpsie	i

		event = p_task_sensor_dta->event;
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	795b      	ldrb	r3, [r3, #5]
 80028b0:	73bb      	strb	r3, [r7, #14]
		LOGGER_LOG("   %s = %lu\r\n", GET_NAME(event), (uint32_t)event);
 80028b2:	b672      	cpsid	i
 80028b4:	4b0f      	ldr	r3, [pc, #60]	@ (80028f4 <task_sensor_init+0x130>)
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	7bbb      	ldrb	r3, [r7, #14]
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002930 <task_sensor_init+0x16c>)
 80028be:	4a17      	ldr	r2, [pc, #92]	@ (800291c <task_sensor_init+0x158>)
 80028c0:	213f      	movs	r1, #63	@ 0x3f
 80028c2:	f000 fd37 	bl	8003334 <sniprintf>
 80028c6:	4603      	mov	r3, r0
 80028c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002904 <task_sensor_init+0x140>)
 80028ca:	6013      	str	r3, [r2, #0]
 80028cc:	4b09      	ldr	r3, [pc, #36]	@ (80028f4 <task_sensor_init+0x130>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff fb6b 	bl	8001fac <logger_log_print_>
 80028d6:	b662      	cpsie	i
	for (index = 0; SENSOR_DTA_QTY > index; index++)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	3301      	adds	r3, #1
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d9b5      	bls.n	8002850 <task_sensor_init+0x8c>
	}
	g_task_sensor_tick_cnt = G_TASK_SEN_TICK_CNT_INI;
 80028e4:	4b13      	ldr	r3, [pc, #76]	@ (8002934 <task_sensor_init+0x170>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	601a      	str	r2, [r3, #0]
}
 80028ea:	bf00      	nop
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	080045fc 	.word	0x080045fc
 80028f8:	20000024 	.word	0x20000024
 80028fc:	08004528 	.word	0x08004528
 8002900:	0800453c 	.word	0x0800453c
 8002904:	20000168 	.word	0x20000168
 8002908:	20000028 	.word	0x20000028
 800290c:	08004554 	.word	0x08004554
 8002910:	08004560 	.word	0x08004560
 8002914:	200001d8 	.word	0x200001d8
 8002918:	08004570 	.word	0x08004570
 800291c:	08004584 	.word	0x08004584
 8002920:	200001c0 	.word	0x200001c0
 8002924:	08004594 	.word	0x08004594
 8002928:	0800459c 	.word	0x0800459c
 800292c:	080045a8 	.word	0x080045a8
 8002930:	080045b0 	.word	0x080045b0
 8002934:	200001dc 	.word	0x200001dc

08002938 <task_sensor_update>:

void task_sensor_update(void *parameters)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b087      	sub	sp, #28
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	uint32_t index;
	const task_sensor_cfg_t *p_task_sensor_cfg;
	task_sensor_dta_t *p_task_sensor_dta;
	bool b_time_update_required = false;
 8002940:	2300      	movs	r3, #0
 8002942:	74fb      	strb	r3, [r7, #19]

	/* Update Task Sensor Counter */
	g_task_sensor_cnt++;
 8002944:	4b61      	ldr	r3, [pc, #388]	@ (8002acc <task_sensor_update+0x194>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	4a60      	ldr	r2, [pc, #384]	@ (8002acc <task_sensor_update+0x194>)
 800294c:	6013      	str	r3, [r2, #0]

	/* Protect shared resource (g_task_sensor_tick_cnt) */
	__asm("CPSID i");	/* disable interrupts*/
 800294e:	b672      	cpsid	i
    if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 8002950:	4b5f      	ldr	r3, [pc, #380]	@ (8002ad0 <task_sensor_update+0x198>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d006      	beq.n	8002966 <task_sensor_update+0x2e>
    {
    	g_task_sensor_tick_cnt--;
 8002958:	4b5d      	ldr	r3, [pc, #372]	@ (8002ad0 <task_sensor_update+0x198>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	3b01      	subs	r3, #1
 800295e:	4a5c      	ldr	r2, [pc, #368]	@ (8002ad0 <task_sensor_update+0x198>)
 8002960:	6013      	str	r3, [r2, #0]
    	b_time_update_required = true;
 8002962:	2301      	movs	r3, #1
 8002964:	74fb      	strb	r3, [r7, #19]
    }
    __asm("CPSIE i");	/* enable interrupts*/
 8002966:	b662      	cpsie	i

    while (b_time_update_required)
 8002968:	e0a6      	b.n	8002ab8 <task_sensor_update+0x180>
    {
		/* Protect shared resource (g_task_sensor_tick_cnt) */
		__asm("CPSID i");	/* disable interrupts*/
 800296a:	b672      	cpsid	i
		if (G_TASK_SEN_TICK_CNT_INI < g_task_sensor_tick_cnt)
 800296c:	4b58      	ldr	r3, [pc, #352]	@ (8002ad0 <task_sensor_update+0x198>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d007      	beq.n	8002984 <task_sensor_update+0x4c>
		{
			g_task_sensor_tick_cnt--;
 8002974:	4b56      	ldr	r3, [pc, #344]	@ (8002ad0 <task_sensor_update+0x198>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3b01      	subs	r3, #1
 800297a:	4a55      	ldr	r2, [pc, #340]	@ (8002ad0 <task_sensor_update+0x198>)
 800297c:	6013      	str	r3, [r2, #0]
			b_time_update_required = true;
 800297e:	2301      	movs	r3, #1
 8002980:	74fb      	strb	r3, [r7, #19]
 8002982:	e001      	b.n	8002988 <task_sensor_update+0x50>
		}
		else
		{
			b_time_update_required = false;
 8002984:	2300      	movs	r3, #0
 8002986:	74fb      	strb	r3, [r7, #19]
		}
		__asm("CPSIE i");	/* enable interrupts*/
 8002988:	b662      	cpsie	i

    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 800298a:	2300      	movs	r3, #0
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e08f      	b.n	8002ab0 <task_sensor_update+0x178>
		{
    		/* Update Task Sensor Configuration & Data Pointer */
			p_task_sensor_cfg = &task_sensor_cfg_list[index];
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4a4e      	ldr	r2, [pc, #312]	@ (8002ad4 <task_sensor_update+0x19c>)
 800299c:	4413      	add	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
			p_task_sensor_dta = &task_sensor_dta_list[index];
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	00db      	lsls	r3, r3, #3
 80029a4:	4a4c      	ldr	r2, [pc, #304]	@ (8002ad8 <task_sensor_update+0x1a0>)
 80029a6:	4413      	add	r3, r2
 80029a8:	60bb      	str	r3, [r7, #8]

			if (p_task_sensor_cfg->pressed == HAL_GPIO_ReadPin(p_task_sensor_cfg->gpio_port, p_task_sensor_cfg->pin))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	7a9c      	ldrb	r4, [r3, #10]
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	891b      	ldrh	r3, [r3, #8]
 80029b6:	4619      	mov	r1, r3
 80029b8:	4610      	mov	r0, r2
 80029ba:	f7fe f937 	bl	8000c2c <HAL_GPIO_ReadPin>
 80029be:	4603      	mov	r3, r0
 80029c0:	429c      	cmp	r4, r3
 80029c2:	d103      	bne.n	80029cc <task_sensor_update+0x94>
			{
				p_task_sensor_dta->event =	EV_BTN_XX_DOWN;
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2201      	movs	r2, #1
 80029c8:	715a      	strb	r2, [r3, #5]
 80029ca:	e002      	b.n	80029d2 <task_sensor_update+0x9a>
			}
			else
			{
				p_task_sensor_dta->event =	EV_BTN_XX_UP;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2200      	movs	r2, #0
 80029d0:	715a      	strb	r2, [r3, #5]
			}

			switch (p_task_sensor_dta->state)
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	791b      	ldrb	r3, [r3, #4]
 80029d6:	2b03      	cmp	r3, #3
 80029d8:	d856      	bhi.n	8002a88 <task_sensor_update+0x150>
 80029da:	a201      	add	r2, pc, #4	@ (adr r2, 80029e0 <task_sensor_update+0xa8>)
 80029dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e0:	080029f1 	.word	0x080029f1
 80029e4:	08002a09 	.word	0x08002a09
 80029e8:	08002a3d 	.word	0x08002a3d
 80029ec:	08002a55 	.word	0x08002a55
			{
				case ST_BTN_XX_UP:

					if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	795b      	ldrb	r3, [r3, #5]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d151      	bne.n	8002a9c <task_sensor_update+0x164>
					{
						p_task_sensor_dta->state = ST_BTN_XX_FALLING;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	2201      	movs	r2, #1
 80029fc:	711a      	strb	r2, [r3, #4]
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	68da      	ldr	r2, [r3, #12]
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	601a      	str	r2, [r3, #0]
					}

					break;
 8002a06:	e049      	b.n	8002a9c <task_sensor_update+0x164>

				case ST_BTN_XX_FALLING:

					p_task_sensor_dta->tick--;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	1e5a      	subs	r2, r3, #1
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d142      	bne.n	8002aa0 <task_sensor_update+0x168>
					{
						if (EV_BTN_XX_DOWN == p_task_sensor_dta->event)
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	795b      	ldrb	r3, [r3, #5]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d108      	bne.n	8002a34 <task_sensor_update+0xfc>
						{
							put_event_task_menu(p_task_sensor_cfg->signal_down);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	7c5b      	ldrb	r3, [r3, #17]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fe72 	bl	8002710 <put_event_task_menu>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_UP;
						}
					}

					break;
 8002a32:	e035      	b.n	8002aa0 <task_sensor_update+0x168>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2200      	movs	r2, #0
 8002a38:	711a      	strb	r2, [r3, #4]
					break;
 8002a3a:	e031      	b.n	8002aa0 <task_sensor_update+0x168>

				case ST_BTN_XX_DOWN:

					if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	795b      	ldrb	r3, [r3, #5]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d12f      	bne.n	8002aa4 <task_sensor_update+0x16c>
					{
						p_task_sensor_dta->tick = p_task_sensor_cfg->tick_max;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	68da      	ldr	r2, [r3, #12]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	601a      	str	r2, [r3, #0]
						p_task_sensor_dta->state = ST_BTN_XX_RISING;
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2203      	movs	r2, #3
 8002a50:	711a      	strb	r2, [r3, #4]
					}

					break;
 8002a52:	e027      	b.n	8002aa4 <task_sensor_update+0x16c>

				case ST_BTN_XX_RISING:

					p_task_sensor_dta->tick--;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	1e5a      	subs	r2, r3, #1
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	601a      	str	r2, [r3, #0]
					if (DEL_BTN_XX_MIN == p_task_sensor_dta->tick)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d120      	bne.n	8002aa8 <task_sensor_update+0x170>
					{
						if (EV_BTN_XX_UP == p_task_sensor_dta->event)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	795b      	ldrb	r3, [r3, #5]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d108      	bne.n	8002a80 <task_sensor_update+0x148>
						{
							put_event_task_menu(p_task_sensor_cfg->signal_up);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	7c1b      	ldrb	r3, [r3, #16]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fe4c 	bl	8002710 <put_event_task_menu>
							p_task_sensor_dta->state = ST_BTN_XX_UP;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	711a      	strb	r2, [r3, #4]
						{
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
						}
					}

					break;
 8002a7e:	e013      	b.n	8002aa8 <task_sensor_update+0x170>
							p_task_sensor_dta->state = ST_BTN_XX_DOWN;
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	2202      	movs	r2, #2
 8002a84:	711a      	strb	r2, [r3, #4]
					break;
 8002a86:	e00f      	b.n	8002aa8 <task_sensor_update+0x170>

				default:

					p_task_sensor_dta->tick  = DEL_BTN_XX_MIN;
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	601a      	str	r2, [r3, #0]
					p_task_sensor_dta->state = ST_BTN_XX_UP;
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	2200      	movs	r2, #0
 8002a92:	711a      	strb	r2, [r3, #4]
					p_task_sensor_dta->event = EV_BTN_XX_UP;
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2200      	movs	r2, #0
 8002a98:	715a      	strb	r2, [r3, #5]

					break;
 8002a9a:	e006      	b.n	8002aaa <task_sensor_update+0x172>
					break;
 8002a9c:	bf00      	nop
 8002a9e:	e004      	b.n	8002aaa <task_sensor_update+0x172>
					break;
 8002aa0:	bf00      	nop
 8002aa2:	e002      	b.n	8002aaa <task_sensor_update+0x172>
					break;
 8002aa4:	bf00      	nop
 8002aa6:	e000      	b.n	8002aaa <task_sensor_update+0x172>
					break;
 8002aa8:	bf00      	nop
    	for (index = 0; SENSOR_DTA_QTY > index; index++)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	3301      	adds	r3, #1
 8002aae:	617b      	str	r3, [r7, #20]
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	f67f af6c 	bls.w	8002990 <task_sensor_update+0x58>
    while (b_time_update_required)
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f47f af55 	bne.w	800296a <task_sensor_update+0x32>
			}
		}
    }
}
 8002ac0:	bf00      	nop
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd90      	pop	{r4, r7, pc}
 8002aca:	bf00      	nop
 8002acc:	200001d8 	.word	0x200001d8
 8002ad0:	200001dc 	.word	0x200001dc
 8002ad4:	08004600 	.word	0x08004600
 8002ad8:	200001c0 	.word	0x200001c0

08002adc <findslot>:
 8002adc:	4b0a      	ldr	r3, [pc, #40]	@ (8002b08 <findslot+0x2c>)
 8002ade:	b510      	push	{r4, lr}
 8002ae0:	4604      	mov	r4, r0
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	b118      	cbz	r0, 8002aee <findslot+0x12>
 8002ae6:	6a03      	ldr	r3, [r0, #32]
 8002ae8:	b90b      	cbnz	r3, 8002aee <findslot+0x12>
 8002aea:	f000 fbdb 	bl	80032a4 <__sinit>
 8002aee:	2c13      	cmp	r4, #19
 8002af0:	d807      	bhi.n	8002b02 <findslot+0x26>
 8002af2:	4806      	ldr	r0, [pc, #24]	@ (8002b0c <findslot+0x30>)
 8002af4:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002af8:	3201      	adds	r2, #1
 8002afa:	d002      	beq.n	8002b02 <findslot+0x26>
 8002afc:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002b00:	bd10      	pop	{r4, pc}
 8002b02:	2000      	movs	r0, #0
 8002b04:	e7fc      	b.n	8002b00 <findslot+0x24>
 8002b06:	bf00      	nop
 8002b08:	20000040 	.word	0x20000040
 8002b0c:	200001ec 	.word	0x200001ec

08002b10 <error>:
 8002b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b12:	4604      	mov	r4, r0
 8002b14:	f000 fcd6 	bl	80034c4 <__errno>
 8002b18:	2613      	movs	r6, #19
 8002b1a:	4605      	mov	r5, r0
 8002b1c:	2700      	movs	r7, #0
 8002b1e:	4630      	mov	r0, r6
 8002b20:	4639      	mov	r1, r7
 8002b22:	beab      	bkpt	0x00ab
 8002b24:	4606      	mov	r6, r0
 8002b26:	4620      	mov	r0, r4
 8002b28:	602e      	str	r6, [r5, #0]
 8002b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002b2c <checkerror>:
 8002b2c:	1c43      	adds	r3, r0, #1
 8002b2e:	d101      	bne.n	8002b34 <checkerror+0x8>
 8002b30:	f7ff bfee 	b.w	8002b10 <error>
 8002b34:	4770      	bx	lr

08002b36 <_swiread>:
 8002b36:	b530      	push	{r4, r5, lr}
 8002b38:	b085      	sub	sp, #20
 8002b3a:	2406      	movs	r4, #6
 8002b3c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002b40:	9203      	str	r2, [sp, #12]
 8002b42:	ad01      	add	r5, sp, #4
 8002b44:	4620      	mov	r0, r4
 8002b46:	4629      	mov	r1, r5
 8002b48:	beab      	bkpt	0x00ab
 8002b4a:	4604      	mov	r4, r0
 8002b4c:	4620      	mov	r0, r4
 8002b4e:	f7ff ffed 	bl	8002b2c <checkerror>
 8002b52:	b005      	add	sp, #20
 8002b54:	bd30      	pop	{r4, r5, pc}

08002b56 <_read>:
 8002b56:	b570      	push	{r4, r5, r6, lr}
 8002b58:	460e      	mov	r6, r1
 8002b5a:	4614      	mov	r4, r2
 8002b5c:	f7ff ffbe 	bl	8002adc <findslot>
 8002b60:	4605      	mov	r5, r0
 8002b62:	b930      	cbnz	r0, 8002b72 <_read+0x1c>
 8002b64:	f000 fcae 	bl	80034c4 <__errno>
 8002b68:	2309      	movs	r3, #9
 8002b6a:	6003      	str	r3, [r0, #0]
 8002b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b70:	bd70      	pop	{r4, r5, r6, pc}
 8002b72:	4622      	mov	r2, r4
 8002b74:	4631      	mov	r1, r6
 8002b76:	6800      	ldr	r0, [r0, #0]
 8002b78:	f7ff ffdd 	bl	8002b36 <_swiread>
 8002b7c:	1c43      	adds	r3, r0, #1
 8002b7e:	d0f5      	beq.n	8002b6c <_read+0x16>
 8002b80:	686b      	ldr	r3, [r5, #4]
 8002b82:	1a20      	subs	r0, r4, r0
 8002b84:	4403      	add	r3, r0
 8002b86:	606b      	str	r3, [r5, #4]
 8002b88:	e7f2      	b.n	8002b70 <_read+0x1a>

08002b8a <_swilseek>:
 8002b8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	4616      	mov	r6, r2
 8002b90:	f7ff ffa4 	bl	8002adc <findslot>
 8002b94:	4605      	mov	r5, r0
 8002b96:	b940      	cbnz	r0, 8002baa <_swilseek+0x20>
 8002b98:	f000 fc94 	bl	80034c4 <__errno>
 8002b9c:	2309      	movs	r3, #9
 8002b9e:	6003      	str	r3, [r0, #0]
 8002ba0:	f04f 34ff 	mov.w	r4, #4294967295
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	b003      	add	sp, #12
 8002ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002baa:	2e02      	cmp	r6, #2
 8002bac:	d903      	bls.n	8002bb6 <_swilseek+0x2c>
 8002bae:	f000 fc89 	bl	80034c4 <__errno>
 8002bb2:	2316      	movs	r3, #22
 8002bb4:	e7f3      	b.n	8002b9e <_swilseek+0x14>
 8002bb6:	2e01      	cmp	r6, #1
 8002bb8:	d112      	bne.n	8002be0 <_swilseek+0x56>
 8002bba:	6843      	ldr	r3, [r0, #4]
 8002bbc:	18e4      	adds	r4, r4, r3
 8002bbe:	d4f6      	bmi.n	8002bae <_swilseek+0x24>
 8002bc0:	682b      	ldr	r3, [r5, #0]
 8002bc2:	260a      	movs	r6, #10
 8002bc4:	466f      	mov	r7, sp
 8002bc6:	e9cd 3400 	strd	r3, r4, [sp]
 8002bca:	4630      	mov	r0, r6
 8002bcc:	4639      	mov	r1, r7
 8002bce:	beab      	bkpt	0x00ab
 8002bd0:	4606      	mov	r6, r0
 8002bd2:	4630      	mov	r0, r6
 8002bd4:	f7ff ffaa 	bl	8002b2c <checkerror>
 8002bd8:	2800      	cmp	r0, #0
 8002bda:	dbe1      	blt.n	8002ba0 <_swilseek+0x16>
 8002bdc:	606c      	str	r4, [r5, #4]
 8002bde:	e7e1      	b.n	8002ba4 <_swilseek+0x1a>
 8002be0:	2e02      	cmp	r6, #2
 8002be2:	6803      	ldr	r3, [r0, #0]
 8002be4:	d1ec      	bne.n	8002bc0 <_swilseek+0x36>
 8002be6:	260c      	movs	r6, #12
 8002be8:	466f      	mov	r7, sp
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	4630      	mov	r0, r6
 8002bee:	4639      	mov	r1, r7
 8002bf0:	beab      	bkpt	0x00ab
 8002bf2:	4606      	mov	r6, r0
 8002bf4:	4630      	mov	r0, r6
 8002bf6:	f7ff ff99 	bl	8002b2c <checkerror>
 8002bfa:	1c43      	adds	r3, r0, #1
 8002bfc:	d0d0      	beq.n	8002ba0 <_swilseek+0x16>
 8002bfe:	4404      	add	r4, r0
 8002c00:	e7de      	b.n	8002bc0 <_swilseek+0x36>

08002c02 <_lseek>:
 8002c02:	f7ff bfc2 	b.w	8002b8a <_swilseek>

08002c06 <_swiwrite>:
 8002c06:	b530      	push	{r4, r5, lr}
 8002c08:	b085      	sub	sp, #20
 8002c0a:	2405      	movs	r4, #5
 8002c0c:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002c10:	9203      	str	r2, [sp, #12]
 8002c12:	ad01      	add	r5, sp, #4
 8002c14:	4620      	mov	r0, r4
 8002c16:	4629      	mov	r1, r5
 8002c18:	beab      	bkpt	0x00ab
 8002c1a:	4604      	mov	r4, r0
 8002c1c:	4620      	mov	r0, r4
 8002c1e:	f7ff ff85 	bl	8002b2c <checkerror>
 8002c22:	b005      	add	sp, #20
 8002c24:	bd30      	pop	{r4, r5, pc}

08002c26 <_write>:
 8002c26:	b570      	push	{r4, r5, r6, lr}
 8002c28:	460e      	mov	r6, r1
 8002c2a:	4615      	mov	r5, r2
 8002c2c:	f7ff ff56 	bl	8002adc <findslot>
 8002c30:	4604      	mov	r4, r0
 8002c32:	b930      	cbnz	r0, 8002c42 <_write+0x1c>
 8002c34:	f000 fc46 	bl	80034c4 <__errno>
 8002c38:	2309      	movs	r3, #9
 8002c3a:	6003      	str	r3, [r0, #0]
 8002c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c40:	bd70      	pop	{r4, r5, r6, pc}
 8002c42:	462a      	mov	r2, r5
 8002c44:	4631      	mov	r1, r6
 8002c46:	6800      	ldr	r0, [r0, #0]
 8002c48:	f7ff ffdd 	bl	8002c06 <_swiwrite>
 8002c4c:	1e03      	subs	r3, r0, #0
 8002c4e:	dbf5      	blt.n	8002c3c <_write+0x16>
 8002c50:	6862      	ldr	r2, [r4, #4]
 8002c52:	1ae8      	subs	r0, r5, r3
 8002c54:	4402      	add	r2, r0
 8002c56:	42ab      	cmp	r3, r5
 8002c58:	6062      	str	r2, [r4, #4]
 8002c5a:	d1f1      	bne.n	8002c40 <_write+0x1a>
 8002c5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7ff bf55 	b.w	8002b10 <error>

08002c66 <_swiclose>:
 8002c66:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002c68:	2402      	movs	r4, #2
 8002c6a:	9001      	str	r0, [sp, #4]
 8002c6c:	ad01      	add	r5, sp, #4
 8002c6e:	4620      	mov	r0, r4
 8002c70:	4629      	mov	r1, r5
 8002c72:	beab      	bkpt	0x00ab
 8002c74:	4604      	mov	r4, r0
 8002c76:	4620      	mov	r0, r4
 8002c78:	f7ff ff58 	bl	8002b2c <checkerror>
 8002c7c:	b003      	add	sp, #12
 8002c7e:	bd30      	pop	{r4, r5, pc}

08002c80 <_close>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4605      	mov	r5, r0
 8002c84:	f7ff ff2a 	bl	8002adc <findslot>
 8002c88:	4604      	mov	r4, r0
 8002c8a:	b930      	cbnz	r0, 8002c9a <_close+0x1a>
 8002c8c:	f000 fc1a 	bl	80034c4 <__errno>
 8002c90:	2309      	movs	r3, #9
 8002c92:	6003      	str	r3, [r0, #0]
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295
 8002c98:	bd38      	pop	{r3, r4, r5, pc}
 8002c9a:	3d01      	subs	r5, #1
 8002c9c:	2d01      	cmp	r5, #1
 8002c9e:	d809      	bhi.n	8002cb4 <_close+0x34>
 8002ca0:	4b09      	ldr	r3, [pc, #36]	@ (8002cc8 <_close+0x48>)
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d104      	bne.n	8002cb4 <_close+0x34>
 8002caa:	f04f 33ff 	mov.w	r3, #4294967295
 8002cae:	6003      	str	r3, [r0, #0]
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	e7f1      	b.n	8002c98 <_close+0x18>
 8002cb4:	6820      	ldr	r0, [r4, #0]
 8002cb6:	f7ff ffd6 	bl	8002c66 <_swiclose>
 8002cba:	2800      	cmp	r0, #0
 8002cbc:	d1ec      	bne.n	8002c98 <_close+0x18>
 8002cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc2:	6023      	str	r3, [r4, #0]
 8002cc4:	e7e8      	b.n	8002c98 <_close+0x18>
 8002cc6:	bf00      	nop
 8002cc8:	200001ec 	.word	0x200001ec

08002ccc <_swistat>:
 8002ccc:	b570      	push	{r4, r5, r6, lr}
 8002cce:	460c      	mov	r4, r1
 8002cd0:	f7ff ff04 	bl	8002adc <findslot>
 8002cd4:	4605      	mov	r5, r0
 8002cd6:	b930      	cbnz	r0, 8002ce6 <_swistat+0x1a>
 8002cd8:	f000 fbf4 	bl	80034c4 <__errno>
 8002cdc:	2309      	movs	r3, #9
 8002cde:	6003      	str	r3, [r0, #0]
 8002ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce4:	bd70      	pop	{r4, r5, r6, pc}
 8002ce6:	6863      	ldr	r3, [r4, #4]
 8002ce8:	260c      	movs	r6, #12
 8002cea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cee:	6063      	str	r3, [r4, #4]
 8002cf0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002cf4:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002cf6:	4630      	mov	r0, r6
 8002cf8:	4629      	mov	r1, r5
 8002cfa:	beab      	bkpt	0x00ab
 8002cfc:	4605      	mov	r5, r0
 8002cfe:	4628      	mov	r0, r5
 8002d00:	f7ff ff14 	bl	8002b2c <checkerror>
 8002d04:	1c43      	adds	r3, r0, #1
 8002d06:	d0eb      	beq.n	8002ce0 <_swistat+0x14>
 8002d08:	6120      	str	r0, [r4, #16]
 8002d0a:	2000      	movs	r0, #0
 8002d0c:	e7ea      	b.n	8002ce4 <_swistat+0x18>

08002d0e <_fstat>:
 8002d0e:	460b      	mov	r3, r1
 8002d10:	b510      	push	{r4, lr}
 8002d12:	2100      	movs	r1, #0
 8002d14:	4604      	mov	r4, r0
 8002d16:	2258      	movs	r2, #88	@ 0x58
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f000 fb84 	bl	8003426 <memset>
 8002d1e:	4601      	mov	r1, r0
 8002d20:	4620      	mov	r0, r4
 8002d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d26:	f7ff bfd1 	b.w	8002ccc <_swistat>

08002d2a <_stat>:
 8002d2a:	b538      	push	{r3, r4, r5, lr}
 8002d2c:	460d      	mov	r5, r1
 8002d2e:	4604      	mov	r4, r0
 8002d30:	2258      	movs	r2, #88	@ 0x58
 8002d32:	2100      	movs	r1, #0
 8002d34:	4628      	mov	r0, r5
 8002d36:	f000 fb76 	bl	8003426 <memset>
 8002d3a:	4620      	mov	r0, r4
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	f000 f811 	bl	8002d64 <_swiopen>
 8002d42:	1c43      	adds	r3, r0, #1
 8002d44:	4604      	mov	r4, r0
 8002d46:	d00b      	beq.n	8002d60 <_stat+0x36>
 8002d48:	686b      	ldr	r3, [r5, #4]
 8002d4a:	4629      	mov	r1, r5
 8002d4c:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8002d50:	606b      	str	r3, [r5, #4]
 8002d52:	f7ff ffbb 	bl	8002ccc <_swistat>
 8002d56:	4605      	mov	r5, r0
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f7ff ff91 	bl	8002c80 <_close>
 8002d5e:	462c      	mov	r4, r5
 8002d60:	4620      	mov	r0, r4
 8002d62:	bd38      	pop	{r3, r4, r5, pc}

08002d64 <_swiopen>:
 8002d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d68:	4607      	mov	r7, r0
 8002d6a:	460e      	mov	r6, r1
 8002d6c:	2400      	movs	r4, #0
 8002d6e:	f8df 90a4 	ldr.w	r9, [pc, #164]	@ 8002e14 <_swiopen+0xb0>
 8002d72:	b096      	sub	sp, #88	@ 0x58
 8002d74:	f859 3034 	ldr.w	r3, [r9, r4, lsl #3]
 8002d78:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8002d7c:	3301      	adds	r3, #1
 8002d7e:	d032      	beq.n	8002de6 <_swiopen+0x82>
 8002d80:	3401      	adds	r4, #1
 8002d82:	2c14      	cmp	r4, #20
 8002d84:	d1f6      	bne.n	8002d74 <_swiopen+0x10>
 8002d86:	f000 fb9d 	bl	80034c4 <__errno>
 8002d8a:	2318      	movs	r3, #24
 8002d8c:	e03a      	b.n	8002e04 <_swiopen+0xa0>
 8002d8e:	f240 6301 	movw	r3, #1537	@ 0x601
 8002d92:	f3c6 4500 	ubfx	r5, r6, #16, #1
 8002d96:	07b2      	lsls	r2, r6, #30
 8002d98:	bf48      	it	mi
 8002d9a:	f045 0502 	orrmi.w	r5, r5, #2
 8002d9e:	421e      	tst	r6, r3
 8002da0:	bf18      	it	ne
 8002da2:	f045 0504 	orrne.w	r5, r5, #4
 8002da6:	0733      	lsls	r3, r6, #28
 8002da8:	bf48      	it	mi
 8002daa:	f025 0504 	bicmi.w	r5, r5, #4
 8002dae:	4638      	mov	r0, r7
 8002db0:	bf48      	it	mi
 8002db2:	f045 0508 	orrmi.w	r5, r5, #8
 8002db6:	9700      	str	r7, [sp, #0]
 8002db8:	f7fd f9c8 	bl	800014c <strlen>
 8002dbc:	e9cd 5001 	strd	r5, r0, [sp, #4]
 8002dc0:	2501      	movs	r5, #1
 8002dc2:	4628      	mov	r0, r5
 8002dc4:	4651      	mov	r1, sl
 8002dc6:	beab      	bkpt	0x00ab
 8002dc8:	4605      	mov	r5, r0
 8002dca:	2d00      	cmp	r5, #0
 8002dcc:	db06      	blt.n	8002ddc <_swiopen+0x78>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	44c8      	add	r8, r9
 8002dd2:	f849 5034 	str.w	r5, [r9, r4, lsl #3]
 8002dd6:	f8c8 3004 	str.w	r3, [r8, #4]
 8002dda:	e016      	b.n	8002e0a <_swiopen+0xa6>
 8002ddc:	4628      	mov	r0, r5
 8002dde:	f7ff fe97 	bl	8002b10 <error>
 8002de2:	4604      	mov	r4, r0
 8002de4:	e011      	b.n	8002e0a <_swiopen+0xa6>
 8002de6:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 8002dea:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8002dee:	46ea      	mov	sl, sp
 8002df0:	d1cd      	bne.n	8002d8e <_swiopen+0x2a>
 8002df2:	4651      	mov	r1, sl
 8002df4:	4638      	mov	r0, r7
 8002df6:	f7ff ff98 	bl	8002d2a <_stat>
 8002dfa:	3001      	adds	r0, #1
 8002dfc:	d0c7      	beq.n	8002d8e <_swiopen+0x2a>
 8002dfe:	f000 fb61 	bl	80034c4 <__errno>
 8002e02:	2311      	movs	r3, #17
 8002e04:	f04f 34ff 	mov.w	r4, #4294967295
 8002e08:	6003      	str	r3, [r0, #0]
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	b016      	add	sp, #88	@ 0x58
 8002e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e12:	bf00      	nop
 8002e14:	200001ec 	.word	0x200001ec

08002e18 <_get_semihosting_exts>:
 8002e18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002e1c:	4606      	mov	r6, r0
 8002e1e:	460f      	mov	r7, r1
 8002e20:	4829      	ldr	r0, [pc, #164]	@ (8002ec8 <_get_semihosting_exts+0xb0>)
 8002e22:	2100      	movs	r1, #0
 8002e24:	4615      	mov	r5, r2
 8002e26:	f7ff ff9d 	bl	8002d64 <_swiopen>
 8002e2a:	4604      	mov	r4, r0
 8002e2c:	462a      	mov	r2, r5
 8002e2e:	2100      	movs	r1, #0
 8002e30:	4630      	mov	r0, r6
 8002e32:	f000 faf8 	bl	8003426 <memset>
 8002e36:	1c63      	adds	r3, r4, #1
 8002e38:	d014      	beq.n	8002e64 <_get_semihosting_exts+0x4c>
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7ff fe4e 	bl	8002adc <findslot>
 8002e40:	f04f 080c 	mov.w	r8, #12
 8002e44:	4681      	mov	r9, r0
 8002e46:	4640      	mov	r0, r8
 8002e48:	4649      	mov	r1, r9
 8002e4a:	beab      	bkpt	0x00ab
 8002e4c:	4680      	mov	r8, r0
 8002e4e:	4640      	mov	r0, r8
 8002e50:	f7ff fe6c 	bl	8002b2c <checkerror>
 8002e54:	2803      	cmp	r0, #3
 8002e56:	dd02      	ble.n	8002e5e <_get_semihosting_exts+0x46>
 8002e58:	1ec3      	subs	r3, r0, #3
 8002e5a:	42ab      	cmp	r3, r5
 8002e5c:	dc07      	bgt.n	8002e6e <_get_semihosting_exts+0x56>
 8002e5e:	4620      	mov	r0, r4
 8002e60:	f7ff ff0e 	bl	8002c80 <_close>
 8002e64:	f04f 30ff 	mov.w	r0, #4294967295
 8002e68:	b003      	add	sp, #12
 8002e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e6e:	2204      	movs	r2, #4
 8002e70:	4620      	mov	r0, r4
 8002e72:	eb0d 0102 	add.w	r1, sp, r2
 8002e76:	f7ff fe6e 	bl	8002b56 <_read>
 8002e7a:	2803      	cmp	r0, #3
 8002e7c:	ddef      	ble.n	8002e5e <_get_semihosting_exts+0x46>
 8002e7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002e82:	2b53      	cmp	r3, #83	@ 0x53
 8002e84:	d1eb      	bne.n	8002e5e <_get_semihosting_exts+0x46>
 8002e86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002e8a:	2b48      	cmp	r3, #72	@ 0x48
 8002e8c:	d1e7      	bne.n	8002e5e <_get_semihosting_exts+0x46>
 8002e8e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002e92:	2b46      	cmp	r3, #70	@ 0x46
 8002e94:	d1e3      	bne.n	8002e5e <_get_semihosting_exts+0x46>
 8002e96:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002e9a:	2b42      	cmp	r3, #66	@ 0x42
 8002e9c:	d1df      	bne.n	8002e5e <_get_semihosting_exts+0x46>
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	4639      	mov	r1, r7
 8002ea2:	4620      	mov	r0, r4
 8002ea4:	f7ff fe71 	bl	8002b8a <_swilseek>
 8002ea8:	2800      	cmp	r0, #0
 8002eaa:	dbd8      	blt.n	8002e5e <_get_semihosting_exts+0x46>
 8002eac:	462a      	mov	r2, r5
 8002eae:	4631      	mov	r1, r6
 8002eb0:	4620      	mov	r0, r4
 8002eb2:	f7ff fe50 	bl	8002b56 <_read>
 8002eb6:	4605      	mov	r5, r0
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f7ff fee1 	bl	8002c80 <_close>
 8002ebe:	4628      	mov	r0, r5
 8002ec0:	f7ff fe34 	bl	8002b2c <checkerror>
 8002ec4:	e7d0      	b.n	8002e68 <_get_semihosting_exts+0x50>
 8002ec6:	bf00      	nop
 8002ec8:	0800463c 	.word	0x0800463c

08002ecc <initialise_semihosting_exts>:
 8002ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ece:	2100      	movs	r1, #0
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	4d09      	ldr	r5, [pc, #36]	@ (8002ef8 <initialise_semihosting_exts+0x2c>)
 8002ed4:	4c09      	ldr	r4, [pc, #36]	@ (8002efc <initialise_semihosting_exts+0x30>)
 8002ed6:	a801      	add	r0, sp, #4
 8002ed8:	6029      	str	r1, [r5, #0]
 8002eda:	6022      	str	r2, [r4, #0]
 8002edc:	f7ff ff9c 	bl	8002e18 <_get_semihosting_exts>
 8002ee0:	2800      	cmp	r0, #0
 8002ee2:	dd07      	ble.n	8002ef4 <initialise_semihosting_exts+0x28>
 8002ee4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002ee8:	f003 0201 	and.w	r2, r3, #1
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	602a      	str	r2, [r5, #0]
 8002ef2:	6023      	str	r3, [r4, #0]
 8002ef4:	b003      	add	sp, #12
 8002ef6:	bd30      	pop	{r4, r5, pc}
 8002ef8:	20000030 	.word	0x20000030
 8002efc:	2000002c 	.word	0x2000002c

08002f00 <_has_ext_stdout_stderr>:
 8002f00:	b510      	push	{r4, lr}
 8002f02:	4c04      	ldr	r4, [pc, #16]	@ (8002f14 <_has_ext_stdout_stderr+0x14>)
 8002f04:	6823      	ldr	r3, [r4, #0]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	da01      	bge.n	8002f0e <_has_ext_stdout_stderr+0xe>
 8002f0a:	f7ff ffdf 	bl	8002ecc <initialise_semihosting_exts>
 8002f0e:	6820      	ldr	r0, [r4, #0]
 8002f10:	bd10      	pop	{r4, pc}
 8002f12:	bf00      	nop
 8002f14:	2000002c 	.word	0x2000002c

08002f18 <initialise_monitor_handles>:
 8002f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f1c:	2303      	movs	r3, #3
 8002f1e:	2400      	movs	r4, #0
 8002f20:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 8002fc4 <initialise_monitor_handles+0xac>
 8002f24:	b085      	sub	sp, #20
 8002f26:	f8cd 9004 	str.w	r9, [sp, #4]
 8002f2a:	af01      	add	r7, sp, #4
 8002f2c:	9303      	str	r3, [sp, #12]
 8002f2e:	2501      	movs	r5, #1
 8002f30:	9402      	str	r4, [sp, #8]
 8002f32:	4628      	mov	r0, r5
 8002f34:	4639      	mov	r1, r7
 8002f36:	beab      	bkpt	0x00ab
 8002f38:	4605      	mov	r5, r0
 8002f3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3e:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8002fc8 <initialise_monitor_handles+0xb0>
 8002f42:	4623      	mov	r3, r4
 8002f44:	4c21      	ldr	r4, [pc, #132]	@ (8002fcc <initialise_monitor_handles+0xb4>)
 8002f46:	f8c8 5000 	str.w	r5, [r8]
 8002f4a:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8002f4e:	3301      	adds	r3, #1
 8002f50:	2b14      	cmp	r3, #20
 8002f52:	d1fa      	bne.n	8002f4a <initialise_monitor_handles+0x32>
 8002f54:	f7ff ffd4 	bl	8002f00 <_has_ext_stdout_stderr>
 8002f58:	4d1d      	ldr	r5, [pc, #116]	@ (8002fd0 <initialise_monitor_handles+0xb8>)
 8002f5a:	b1d0      	cbz	r0, 8002f92 <initialise_monitor_handles+0x7a>
 8002f5c:	f04f 0a03 	mov.w	sl, #3
 8002f60:	2304      	movs	r3, #4
 8002f62:	f8cd 9004 	str.w	r9, [sp, #4]
 8002f66:	2601      	movs	r6, #1
 8002f68:	f8cd a00c 	str.w	sl, [sp, #12]
 8002f6c:	9302      	str	r3, [sp, #8]
 8002f6e:	4630      	mov	r0, r6
 8002f70:	4639      	mov	r1, r7
 8002f72:	beab      	bkpt	0x00ab
 8002f74:	4683      	mov	fp, r0
 8002f76:	4b17      	ldr	r3, [pc, #92]	@ (8002fd4 <initialise_monitor_handles+0xbc>)
 8002f78:	f8cd 9004 	str.w	r9, [sp, #4]
 8002f7c:	f8c3 b000 	str.w	fp, [r3]
 8002f80:	2308      	movs	r3, #8
 8002f82:	f8cd a00c 	str.w	sl, [sp, #12]
 8002f86:	9302      	str	r3, [sp, #8]
 8002f88:	4630      	mov	r0, r6
 8002f8a:	4639      	mov	r1, r7
 8002f8c:	beab      	bkpt	0x00ab
 8002f8e:	4606      	mov	r6, r0
 8002f90:	602e      	str	r6, [r5, #0]
 8002f92:	2600      	movs	r6, #0
 8002f94:	682b      	ldr	r3, [r5, #0]
 8002f96:	6066      	str	r6, [r4, #4]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	bf02      	ittt	eq
 8002f9c:	4b0d      	ldreq	r3, [pc, #52]	@ (8002fd4 <initialise_monitor_handles+0xbc>)
 8002f9e:	681b      	ldreq	r3, [r3, #0]
 8002fa0:	602b      	streq	r3, [r5, #0]
 8002fa2:	f8d8 3000 	ldr.w	r3, [r8]
 8002fa6:	6023      	str	r3, [r4, #0]
 8002fa8:	f7ff ffaa 	bl	8002f00 <_has_ext_stdout_stderr>
 8002fac:	b130      	cbz	r0, 8002fbc <initialise_monitor_handles+0xa4>
 8002fae:	4b09      	ldr	r3, [pc, #36]	@ (8002fd4 <initialise_monitor_handles+0xbc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	e9c4 3602 	strd	r3, r6, [r4, #8]
 8002fb6:	682b      	ldr	r3, [r5, #0]
 8002fb8:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002fbc:	b005      	add	sp, #20
 8002fbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fc2:	bf00      	nop
 8002fc4:	08004652 	.word	0x08004652
 8002fc8:	200001e8 	.word	0x200001e8
 8002fcc:	200001ec 	.word	0x200001ec
 8002fd0:	200001e0 	.word	0x200001e0
 8002fd4:	200001e4 	.word	0x200001e4

08002fd8 <_isatty>:
 8002fd8:	b570      	push	{r4, r5, r6, lr}
 8002fda:	f7ff fd7f 	bl	8002adc <findslot>
 8002fde:	2409      	movs	r4, #9
 8002fe0:	4605      	mov	r5, r0
 8002fe2:	b920      	cbnz	r0, 8002fee <_isatty+0x16>
 8002fe4:	f000 fa6e 	bl	80034c4 <__errno>
 8002fe8:	6004      	str	r4, [r0, #0]
 8002fea:	2000      	movs	r0, #0
 8002fec:	bd70      	pop	{r4, r5, r6, pc}
 8002fee:	4620      	mov	r0, r4
 8002ff0:	4629      	mov	r1, r5
 8002ff2:	beab      	bkpt	0x00ab
 8002ff4:	4604      	mov	r4, r0
 8002ff6:	2c01      	cmp	r4, #1
 8002ff8:	4620      	mov	r0, r4
 8002ffa:	d0f7      	beq.n	8002fec <_isatty+0x14>
 8002ffc:	f000 fa62 	bl	80034c4 <__errno>
 8003000:	2513      	movs	r5, #19
 8003002:	4604      	mov	r4, r0
 8003004:	2600      	movs	r6, #0
 8003006:	4628      	mov	r0, r5
 8003008:	4631      	mov	r1, r6
 800300a:	beab      	bkpt	0x00ab
 800300c:	4605      	mov	r5, r0
 800300e:	6025      	str	r5, [r4, #0]
 8003010:	e7eb      	b.n	8002fea <_isatty+0x12>
	...

08003014 <__sflush_r>:
 8003014:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	0716      	lsls	r6, r2, #28
 800301c:	4605      	mov	r5, r0
 800301e:	460c      	mov	r4, r1
 8003020:	d454      	bmi.n	80030cc <__sflush_r+0xb8>
 8003022:	684b      	ldr	r3, [r1, #4]
 8003024:	2b00      	cmp	r3, #0
 8003026:	dc02      	bgt.n	800302e <__sflush_r+0x1a>
 8003028:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	dd48      	ble.n	80030c0 <__sflush_r+0xac>
 800302e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003030:	2e00      	cmp	r6, #0
 8003032:	d045      	beq.n	80030c0 <__sflush_r+0xac>
 8003034:	2300      	movs	r3, #0
 8003036:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800303a:	682f      	ldr	r7, [r5, #0]
 800303c:	6a21      	ldr	r1, [r4, #32]
 800303e:	602b      	str	r3, [r5, #0]
 8003040:	d030      	beq.n	80030a4 <__sflush_r+0x90>
 8003042:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003044:	89a3      	ldrh	r3, [r4, #12]
 8003046:	0759      	lsls	r1, r3, #29
 8003048:	d505      	bpl.n	8003056 <__sflush_r+0x42>
 800304a:	6863      	ldr	r3, [r4, #4]
 800304c:	1ad2      	subs	r2, r2, r3
 800304e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003050:	b10b      	cbz	r3, 8003056 <__sflush_r+0x42>
 8003052:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003054:	1ad2      	subs	r2, r2, r3
 8003056:	2300      	movs	r3, #0
 8003058:	4628      	mov	r0, r5
 800305a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800305c:	6a21      	ldr	r1, [r4, #32]
 800305e:	47b0      	blx	r6
 8003060:	1c43      	adds	r3, r0, #1
 8003062:	89a3      	ldrh	r3, [r4, #12]
 8003064:	d106      	bne.n	8003074 <__sflush_r+0x60>
 8003066:	6829      	ldr	r1, [r5, #0]
 8003068:	291d      	cmp	r1, #29
 800306a:	d82b      	bhi.n	80030c4 <__sflush_r+0xb0>
 800306c:	4a28      	ldr	r2, [pc, #160]	@ (8003110 <__sflush_r+0xfc>)
 800306e:	40ca      	lsrs	r2, r1
 8003070:	07d6      	lsls	r6, r2, #31
 8003072:	d527      	bpl.n	80030c4 <__sflush_r+0xb0>
 8003074:	2200      	movs	r2, #0
 8003076:	6062      	str	r2, [r4, #4]
 8003078:	6922      	ldr	r2, [r4, #16]
 800307a:	04d9      	lsls	r1, r3, #19
 800307c:	6022      	str	r2, [r4, #0]
 800307e:	d504      	bpl.n	800308a <__sflush_r+0x76>
 8003080:	1c42      	adds	r2, r0, #1
 8003082:	d101      	bne.n	8003088 <__sflush_r+0x74>
 8003084:	682b      	ldr	r3, [r5, #0]
 8003086:	b903      	cbnz	r3, 800308a <__sflush_r+0x76>
 8003088:	6560      	str	r0, [r4, #84]	@ 0x54
 800308a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800308c:	602f      	str	r7, [r5, #0]
 800308e:	b1b9      	cbz	r1, 80030c0 <__sflush_r+0xac>
 8003090:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003094:	4299      	cmp	r1, r3
 8003096:	d002      	beq.n	800309e <__sflush_r+0x8a>
 8003098:	4628      	mov	r0, r5
 800309a:	f000 fa41 	bl	8003520 <_free_r>
 800309e:	2300      	movs	r3, #0
 80030a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80030a2:	e00d      	b.n	80030c0 <__sflush_r+0xac>
 80030a4:	2301      	movs	r3, #1
 80030a6:	4628      	mov	r0, r5
 80030a8:	47b0      	blx	r6
 80030aa:	4602      	mov	r2, r0
 80030ac:	1c50      	adds	r0, r2, #1
 80030ae:	d1c9      	bne.n	8003044 <__sflush_r+0x30>
 80030b0:	682b      	ldr	r3, [r5, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d0c6      	beq.n	8003044 <__sflush_r+0x30>
 80030b6:	2b1d      	cmp	r3, #29
 80030b8:	d001      	beq.n	80030be <__sflush_r+0xaa>
 80030ba:	2b16      	cmp	r3, #22
 80030bc:	d11d      	bne.n	80030fa <__sflush_r+0xe6>
 80030be:	602f      	str	r7, [r5, #0]
 80030c0:	2000      	movs	r0, #0
 80030c2:	e021      	b.n	8003108 <__sflush_r+0xf4>
 80030c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	e01a      	b.n	8003102 <__sflush_r+0xee>
 80030cc:	690f      	ldr	r7, [r1, #16]
 80030ce:	2f00      	cmp	r7, #0
 80030d0:	d0f6      	beq.n	80030c0 <__sflush_r+0xac>
 80030d2:	0793      	lsls	r3, r2, #30
 80030d4:	bf18      	it	ne
 80030d6:	2300      	movne	r3, #0
 80030d8:	680e      	ldr	r6, [r1, #0]
 80030da:	bf08      	it	eq
 80030dc:	694b      	ldreq	r3, [r1, #20]
 80030de:	1bf6      	subs	r6, r6, r7
 80030e0:	600f      	str	r7, [r1, #0]
 80030e2:	608b      	str	r3, [r1, #8]
 80030e4:	2e00      	cmp	r6, #0
 80030e6:	ddeb      	ble.n	80030c0 <__sflush_r+0xac>
 80030e8:	4633      	mov	r3, r6
 80030ea:	463a      	mov	r2, r7
 80030ec:	4628      	mov	r0, r5
 80030ee:	6a21      	ldr	r1, [r4, #32]
 80030f0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80030f4:	47e0      	blx	ip
 80030f6:	2800      	cmp	r0, #0
 80030f8:	dc07      	bgt.n	800310a <__sflush_r+0xf6>
 80030fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003102:	f04f 30ff 	mov.w	r0, #4294967295
 8003106:	81a3      	strh	r3, [r4, #12]
 8003108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800310a:	4407      	add	r7, r0
 800310c:	1a36      	subs	r6, r6, r0
 800310e:	e7e9      	b.n	80030e4 <__sflush_r+0xd0>
 8003110:	20400001 	.word	0x20400001

08003114 <_fflush_r>:
 8003114:	b538      	push	{r3, r4, r5, lr}
 8003116:	690b      	ldr	r3, [r1, #16]
 8003118:	4605      	mov	r5, r0
 800311a:	460c      	mov	r4, r1
 800311c:	b913      	cbnz	r3, 8003124 <_fflush_r+0x10>
 800311e:	2500      	movs	r5, #0
 8003120:	4628      	mov	r0, r5
 8003122:	bd38      	pop	{r3, r4, r5, pc}
 8003124:	b118      	cbz	r0, 800312e <_fflush_r+0x1a>
 8003126:	6a03      	ldr	r3, [r0, #32]
 8003128:	b90b      	cbnz	r3, 800312e <_fflush_r+0x1a>
 800312a:	f000 f8bb 	bl	80032a4 <__sinit>
 800312e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f3      	beq.n	800311e <_fflush_r+0xa>
 8003136:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003138:	07d0      	lsls	r0, r2, #31
 800313a:	d404      	bmi.n	8003146 <_fflush_r+0x32>
 800313c:	0599      	lsls	r1, r3, #22
 800313e:	d402      	bmi.n	8003146 <_fflush_r+0x32>
 8003140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003142:	f000 f9ea 	bl	800351a <__retarget_lock_acquire_recursive>
 8003146:	4628      	mov	r0, r5
 8003148:	4621      	mov	r1, r4
 800314a:	f7ff ff63 	bl	8003014 <__sflush_r>
 800314e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003150:	4605      	mov	r5, r0
 8003152:	07da      	lsls	r2, r3, #31
 8003154:	d4e4      	bmi.n	8003120 <_fflush_r+0xc>
 8003156:	89a3      	ldrh	r3, [r4, #12]
 8003158:	059b      	lsls	r3, r3, #22
 800315a:	d4e1      	bmi.n	8003120 <_fflush_r+0xc>
 800315c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800315e:	f000 f9dd 	bl	800351c <__retarget_lock_release_recursive>
 8003162:	e7dd      	b.n	8003120 <_fflush_r+0xc>

08003164 <fflush>:
 8003164:	4601      	mov	r1, r0
 8003166:	b920      	cbnz	r0, 8003172 <fflush+0xe>
 8003168:	4a04      	ldr	r2, [pc, #16]	@ (800317c <fflush+0x18>)
 800316a:	4905      	ldr	r1, [pc, #20]	@ (8003180 <fflush+0x1c>)
 800316c:	4805      	ldr	r0, [pc, #20]	@ (8003184 <fflush+0x20>)
 800316e:	f000 b8b1 	b.w	80032d4 <_fwalk_sglue>
 8003172:	4b05      	ldr	r3, [pc, #20]	@ (8003188 <fflush+0x24>)
 8003174:	6818      	ldr	r0, [r3, #0]
 8003176:	f7ff bfcd 	b.w	8003114 <_fflush_r>
 800317a:	bf00      	nop
 800317c:	20000034 	.word	0x20000034
 8003180:	08003115 	.word	0x08003115
 8003184:	20000044 	.word	0x20000044
 8003188:	20000040 	.word	0x20000040

0800318c <std>:
 800318c:	2300      	movs	r3, #0
 800318e:	b510      	push	{r4, lr}
 8003190:	4604      	mov	r4, r0
 8003192:	e9c0 3300 	strd	r3, r3, [r0]
 8003196:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800319a:	6083      	str	r3, [r0, #8]
 800319c:	8181      	strh	r1, [r0, #12]
 800319e:	6643      	str	r3, [r0, #100]	@ 0x64
 80031a0:	81c2      	strh	r2, [r0, #14]
 80031a2:	6183      	str	r3, [r0, #24]
 80031a4:	4619      	mov	r1, r3
 80031a6:	2208      	movs	r2, #8
 80031a8:	305c      	adds	r0, #92	@ 0x5c
 80031aa:	f000 f93c 	bl	8003426 <memset>
 80031ae:	4b0d      	ldr	r3, [pc, #52]	@ (80031e4 <std+0x58>)
 80031b0:	6224      	str	r4, [r4, #32]
 80031b2:	6263      	str	r3, [r4, #36]	@ 0x24
 80031b4:	4b0c      	ldr	r3, [pc, #48]	@ (80031e8 <std+0x5c>)
 80031b6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80031b8:	4b0c      	ldr	r3, [pc, #48]	@ (80031ec <std+0x60>)
 80031ba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80031bc:	4b0c      	ldr	r3, [pc, #48]	@ (80031f0 <std+0x64>)
 80031be:	6323      	str	r3, [r4, #48]	@ 0x30
 80031c0:	4b0c      	ldr	r3, [pc, #48]	@ (80031f4 <std+0x68>)
 80031c2:	429c      	cmp	r4, r3
 80031c4:	d006      	beq.n	80031d4 <std+0x48>
 80031c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80031ca:	4294      	cmp	r4, r2
 80031cc:	d002      	beq.n	80031d4 <std+0x48>
 80031ce:	33d0      	adds	r3, #208	@ 0xd0
 80031d0:	429c      	cmp	r4, r3
 80031d2:	d105      	bne.n	80031e0 <std+0x54>
 80031d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80031d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80031dc:	f000 b99c 	b.w	8003518 <__retarget_lock_init_recursive>
 80031e0:	bd10      	pop	{r4, pc}
 80031e2:	bf00      	nop
 80031e4:	080033a1 	.word	0x080033a1
 80031e8:	080033c3 	.word	0x080033c3
 80031ec:	080033fb 	.word	0x080033fb
 80031f0:	0800341f 	.word	0x0800341f
 80031f4:	2000028c 	.word	0x2000028c

080031f8 <stdio_exit_handler>:
 80031f8:	4a02      	ldr	r2, [pc, #8]	@ (8003204 <stdio_exit_handler+0xc>)
 80031fa:	4903      	ldr	r1, [pc, #12]	@ (8003208 <stdio_exit_handler+0x10>)
 80031fc:	4803      	ldr	r0, [pc, #12]	@ (800320c <stdio_exit_handler+0x14>)
 80031fe:	f000 b869 	b.w	80032d4 <_fwalk_sglue>
 8003202:	bf00      	nop
 8003204:	20000034 	.word	0x20000034
 8003208:	08003115 	.word	0x08003115
 800320c:	20000044 	.word	0x20000044

08003210 <cleanup_stdio>:
 8003210:	6841      	ldr	r1, [r0, #4]
 8003212:	4b0c      	ldr	r3, [pc, #48]	@ (8003244 <cleanup_stdio+0x34>)
 8003214:	b510      	push	{r4, lr}
 8003216:	4299      	cmp	r1, r3
 8003218:	4604      	mov	r4, r0
 800321a:	d001      	beq.n	8003220 <cleanup_stdio+0x10>
 800321c:	f7ff ff7a 	bl	8003114 <_fflush_r>
 8003220:	68a1      	ldr	r1, [r4, #8]
 8003222:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <cleanup_stdio+0x38>)
 8003224:	4299      	cmp	r1, r3
 8003226:	d002      	beq.n	800322e <cleanup_stdio+0x1e>
 8003228:	4620      	mov	r0, r4
 800322a:	f7ff ff73 	bl	8003114 <_fflush_r>
 800322e:	68e1      	ldr	r1, [r4, #12]
 8003230:	4b06      	ldr	r3, [pc, #24]	@ (800324c <cleanup_stdio+0x3c>)
 8003232:	4299      	cmp	r1, r3
 8003234:	d004      	beq.n	8003240 <cleanup_stdio+0x30>
 8003236:	4620      	mov	r0, r4
 8003238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800323c:	f7ff bf6a 	b.w	8003114 <_fflush_r>
 8003240:	bd10      	pop	{r4, pc}
 8003242:	bf00      	nop
 8003244:	2000028c 	.word	0x2000028c
 8003248:	200002f4 	.word	0x200002f4
 800324c:	2000035c 	.word	0x2000035c

08003250 <global_stdio_init.part.0>:
 8003250:	b510      	push	{r4, lr}
 8003252:	4b0b      	ldr	r3, [pc, #44]	@ (8003280 <global_stdio_init.part.0+0x30>)
 8003254:	4c0b      	ldr	r4, [pc, #44]	@ (8003284 <global_stdio_init.part.0+0x34>)
 8003256:	4a0c      	ldr	r2, [pc, #48]	@ (8003288 <global_stdio_init.part.0+0x38>)
 8003258:	4620      	mov	r0, r4
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	2104      	movs	r1, #4
 800325e:	2200      	movs	r2, #0
 8003260:	f7ff ff94 	bl	800318c <std>
 8003264:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003268:	2201      	movs	r2, #1
 800326a:	2109      	movs	r1, #9
 800326c:	f7ff ff8e 	bl	800318c <std>
 8003270:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003274:	2202      	movs	r2, #2
 8003276:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800327a:	2112      	movs	r1, #18
 800327c:	f7ff bf86 	b.w	800318c <std>
 8003280:	200003c4 	.word	0x200003c4
 8003284:	2000028c 	.word	0x2000028c
 8003288:	080031f9 	.word	0x080031f9

0800328c <__sfp_lock_acquire>:
 800328c:	4801      	ldr	r0, [pc, #4]	@ (8003294 <__sfp_lock_acquire+0x8>)
 800328e:	f000 b944 	b.w	800351a <__retarget_lock_acquire_recursive>
 8003292:	bf00      	nop
 8003294:	200003cd 	.word	0x200003cd

08003298 <__sfp_lock_release>:
 8003298:	4801      	ldr	r0, [pc, #4]	@ (80032a0 <__sfp_lock_release+0x8>)
 800329a:	f000 b93f 	b.w	800351c <__retarget_lock_release_recursive>
 800329e:	bf00      	nop
 80032a0:	200003cd 	.word	0x200003cd

080032a4 <__sinit>:
 80032a4:	b510      	push	{r4, lr}
 80032a6:	4604      	mov	r4, r0
 80032a8:	f7ff fff0 	bl	800328c <__sfp_lock_acquire>
 80032ac:	6a23      	ldr	r3, [r4, #32]
 80032ae:	b11b      	cbz	r3, 80032b8 <__sinit+0x14>
 80032b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032b4:	f7ff bff0 	b.w	8003298 <__sfp_lock_release>
 80032b8:	4b04      	ldr	r3, [pc, #16]	@ (80032cc <__sinit+0x28>)
 80032ba:	6223      	str	r3, [r4, #32]
 80032bc:	4b04      	ldr	r3, [pc, #16]	@ (80032d0 <__sinit+0x2c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1f5      	bne.n	80032b0 <__sinit+0xc>
 80032c4:	f7ff ffc4 	bl	8003250 <global_stdio_init.part.0>
 80032c8:	e7f2      	b.n	80032b0 <__sinit+0xc>
 80032ca:	bf00      	nop
 80032cc:	08003211 	.word	0x08003211
 80032d0:	200003c4 	.word	0x200003c4

080032d4 <_fwalk_sglue>:
 80032d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80032d8:	4607      	mov	r7, r0
 80032da:	4688      	mov	r8, r1
 80032dc:	4614      	mov	r4, r2
 80032de:	2600      	movs	r6, #0
 80032e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80032e4:	f1b9 0901 	subs.w	r9, r9, #1
 80032e8:	d505      	bpl.n	80032f6 <_fwalk_sglue+0x22>
 80032ea:	6824      	ldr	r4, [r4, #0]
 80032ec:	2c00      	cmp	r4, #0
 80032ee:	d1f7      	bne.n	80032e0 <_fwalk_sglue+0xc>
 80032f0:	4630      	mov	r0, r6
 80032f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032f6:	89ab      	ldrh	r3, [r5, #12]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d907      	bls.n	800330c <_fwalk_sglue+0x38>
 80032fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003300:	3301      	adds	r3, #1
 8003302:	d003      	beq.n	800330c <_fwalk_sglue+0x38>
 8003304:	4629      	mov	r1, r5
 8003306:	4638      	mov	r0, r7
 8003308:	47c0      	blx	r8
 800330a:	4306      	orrs	r6, r0
 800330c:	3568      	adds	r5, #104	@ 0x68
 800330e:	e7e9      	b.n	80032e4 <_fwalk_sglue+0x10>

08003310 <iprintf>:
 8003310:	b40f      	push	{r0, r1, r2, r3}
 8003312:	b507      	push	{r0, r1, r2, lr}
 8003314:	4906      	ldr	r1, [pc, #24]	@ (8003330 <iprintf+0x20>)
 8003316:	ab04      	add	r3, sp, #16
 8003318:	6808      	ldr	r0, [r1, #0]
 800331a:	f853 2b04 	ldr.w	r2, [r3], #4
 800331e:	6881      	ldr	r1, [r0, #8]
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	f000 fb73 	bl	8003a0c <_vfiprintf_r>
 8003326:	b003      	add	sp, #12
 8003328:	f85d eb04 	ldr.w	lr, [sp], #4
 800332c:	b004      	add	sp, #16
 800332e:	4770      	bx	lr
 8003330:	20000040 	.word	0x20000040

08003334 <sniprintf>:
 8003334:	b40c      	push	{r2, r3}
 8003336:	b530      	push	{r4, r5, lr}
 8003338:	4b18      	ldr	r3, [pc, #96]	@ (800339c <sniprintf+0x68>)
 800333a:	1e0c      	subs	r4, r1, #0
 800333c:	681d      	ldr	r5, [r3, #0]
 800333e:	b09d      	sub	sp, #116	@ 0x74
 8003340:	da08      	bge.n	8003354 <sniprintf+0x20>
 8003342:	238b      	movs	r3, #139	@ 0x8b
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	602b      	str	r3, [r5, #0]
 800334a:	b01d      	add	sp, #116	@ 0x74
 800334c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003350:	b002      	add	sp, #8
 8003352:	4770      	bx	lr
 8003354:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003358:	f8ad 3014 	strh.w	r3, [sp, #20]
 800335c:	f04f 0300 	mov.w	r3, #0
 8003360:	931b      	str	r3, [sp, #108]	@ 0x6c
 8003362:	bf0c      	ite	eq
 8003364:	4623      	moveq	r3, r4
 8003366:	f104 33ff 	addne.w	r3, r4, #4294967295
 800336a:	9304      	str	r3, [sp, #16]
 800336c:	9307      	str	r3, [sp, #28]
 800336e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003372:	9002      	str	r0, [sp, #8]
 8003374:	9006      	str	r0, [sp, #24]
 8003376:	f8ad 3016 	strh.w	r3, [sp, #22]
 800337a:	4628      	mov	r0, r5
 800337c:	ab21      	add	r3, sp, #132	@ 0x84
 800337e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003380:	a902      	add	r1, sp, #8
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	f000 fa1e 	bl	80037c4 <_svfiprintf_r>
 8003388:	1c43      	adds	r3, r0, #1
 800338a:	bfbc      	itt	lt
 800338c:	238b      	movlt	r3, #139	@ 0x8b
 800338e:	602b      	strlt	r3, [r5, #0]
 8003390:	2c00      	cmp	r4, #0
 8003392:	d0da      	beq.n	800334a <sniprintf+0x16>
 8003394:	2200      	movs	r2, #0
 8003396:	9b02      	ldr	r3, [sp, #8]
 8003398:	701a      	strb	r2, [r3, #0]
 800339a:	e7d6      	b.n	800334a <sniprintf+0x16>
 800339c:	20000040 	.word	0x20000040

080033a0 <__sread>:
 80033a0:	b510      	push	{r4, lr}
 80033a2:	460c      	mov	r4, r1
 80033a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033a8:	f000 f868 	bl	800347c <_read_r>
 80033ac:	2800      	cmp	r0, #0
 80033ae:	bfab      	itete	ge
 80033b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80033b2:	89a3      	ldrhlt	r3, [r4, #12]
 80033b4:	181b      	addge	r3, r3, r0
 80033b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80033ba:	bfac      	ite	ge
 80033bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80033be:	81a3      	strhlt	r3, [r4, #12]
 80033c0:	bd10      	pop	{r4, pc}

080033c2 <__swrite>:
 80033c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80033c6:	461f      	mov	r7, r3
 80033c8:	898b      	ldrh	r3, [r1, #12]
 80033ca:	4605      	mov	r5, r0
 80033cc:	05db      	lsls	r3, r3, #23
 80033ce:	460c      	mov	r4, r1
 80033d0:	4616      	mov	r6, r2
 80033d2:	d505      	bpl.n	80033e0 <__swrite+0x1e>
 80033d4:	2302      	movs	r3, #2
 80033d6:	2200      	movs	r2, #0
 80033d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80033dc:	f000 f83c 	bl	8003458 <_lseek_r>
 80033e0:	89a3      	ldrh	r3, [r4, #12]
 80033e2:	4632      	mov	r2, r6
 80033e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80033e8:	81a3      	strh	r3, [r4, #12]
 80033ea:	4628      	mov	r0, r5
 80033ec:	463b      	mov	r3, r7
 80033ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033f6:	f000 b853 	b.w	80034a0 <_write_r>

080033fa <__sseek>:
 80033fa:	b510      	push	{r4, lr}
 80033fc:	460c      	mov	r4, r1
 80033fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003402:	f000 f829 	bl	8003458 <_lseek_r>
 8003406:	1c43      	adds	r3, r0, #1
 8003408:	89a3      	ldrh	r3, [r4, #12]
 800340a:	bf15      	itete	ne
 800340c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800340e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003412:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003416:	81a3      	strheq	r3, [r4, #12]
 8003418:	bf18      	it	ne
 800341a:	81a3      	strhne	r3, [r4, #12]
 800341c:	bd10      	pop	{r4, pc}

0800341e <__sclose>:
 800341e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003422:	f000 b809 	b.w	8003438 <_close_r>

08003426 <memset>:
 8003426:	4603      	mov	r3, r0
 8003428:	4402      	add	r2, r0
 800342a:	4293      	cmp	r3, r2
 800342c:	d100      	bne.n	8003430 <memset+0xa>
 800342e:	4770      	bx	lr
 8003430:	f803 1b01 	strb.w	r1, [r3], #1
 8003434:	e7f9      	b.n	800342a <memset+0x4>
	...

08003438 <_close_r>:
 8003438:	b538      	push	{r3, r4, r5, lr}
 800343a:	2300      	movs	r3, #0
 800343c:	4d05      	ldr	r5, [pc, #20]	@ (8003454 <_close_r+0x1c>)
 800343e:	4604      	mov	r4, r0
 8003440:	4608      	mov	r0, r1
 8003442:	602b      	str	r3, [r5, #0]
 8003444:	f7ff fc1c 	bl	8002c80 <_close>
 8003448:	1c43      	adds	r3, r0, #1
 800344a:	d102      	bne.n	8003452 <_close_r+0x1a>
 800344c:	682b      	ldr	r3, [r5, #0]
 800344e:	b103      	cbz	r3, 8003452 <_close_r+0x1a>
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	bd38      	pop	{r3, r4, r5, pc}
 8003454:	200003c8 	.word	0x200003c8

08003458 <_lseek_r>:
 8003458:	b538      	push	{r3, r4, r5, lr}
 800345a:	4604      	mov	r4, r0
 800345c:	4608      	mov	r0, r1
 800345e:	4611      	mov	r1, r2
 8003460:	2200      	movs	r2, #0
 8003462:	4d05      	ldr	r5, [pc, #20]	@ (8003478 <_lseek_r+0x20>)
 8003464:	602a      	str	r2, [r5, #0]
 8003466:	461a      	mov	r2, r3
 8003468:	f7ff fbcb 	bl	8002c02 <_lseek>
 800346c:	1c43      	adds	r3, r0, #1
 800346e:	d102      	bne.n	8003476 <_lseek_r+0x1e>
 8003470:	682b      	ldr	r3, [r5, #0]
 8003472:	b103      	cbz	r3, 8003476 <_lseek_r+0x1e>
 8003474:	6023      	str	r3, [r4, #0]
 8003476:	bd38      	pop	{r3, r4, r5, pc}
 8003478:	200003c8 	.word	0x200003c8

0800347c <_read_r>:
 800347c:	b538      	push	{r3, r4, r5, lr}
 800347e:	4604      	mov	r4, r0
 8003480:	4608      	mov	r0, r1
 8003482:	4611      	mov	r1, r2
 8003484:	2200      	movs	r2, #0
 8003486:	4d05      	ldr	r5, [pc, #20]	@ (800349c <_read_r+0x20>)
 8003488:	602a      	str	r2, [r5, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	f7ff fb63 	bl	8002b56 <_read>
 8003490:	1c43      	adds	r3, r0, #1
 8003492:	d102      	bne.n	800349a <_read_r+0x1e>
 8003494:	682b      	ldr	r3, [r5, #0]
 8003496:	b103      	cbz	r3, 800349a <_read_r+0x1e>
 8003498:	6023      	str	r3, [r4, #0]
 800349a:	bd38      	pop	{r3, r4, r5, pc}
 800349c:	200003c8 	.word	0x200003c8

080034a0 <_write_r>:
 80034a0:	b538      	push	{r3, r4, r5, lr}
 80034a2:	4604      	mov	r4, r0
 80034a4:	4608      	mov	r0, r1
 80034a6:	4611      	mov	r1, r2
 80034a8:	2200      	movs	r2, #0
 80034aa:	4d05      	ldr	r5, [pc, #20]	@ (80034c0 <_write_r+0x20>)
 80034ac:	602a      	str	r2, [r5, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	f7ff fbb9 	bl	8002c26 <_write>
 80034b4:	1c43      	adds	r3, r0, #1
 80034b6:	d102      	bne.n	80034be <_write_r+0x1e>
 80034b8:	682b      	ldr	r3, [r5, #0]
 80034ba:	b103      	cbz	r3, 80034be <_write_r+0x1e>
 80034bc:	6023      	str	r3, [r4, #0]
 80034be:	bd38      	pop	{r3, r4, r5, pc}
 80034c0:	200003c8 	.word	0x200003c8

080034c4 <__errno>:
 80034c4:	4b01      	ldr	r3, [pc, #4]	@ (80034cc <__errno+0x8>)
 80034c6:	6818      	ldr	r0, [r3, #0]
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000040 	.word	0x20000040

080034d0 <__libc_init_array>:
 80034d0:	b570      	push	{r4, r5, r6, lr}
 80034d2:	2600      	movs	r6, #0
 80034d4:	4d0c      	ldr	r5, [pc, #48]	@ (8003508 <__libc_init_array+0x38>)
 80034d6:	4c0d      	ldr	r4, [pc, #52]	@ (800350c <__libc_init_array+0x3c>)
 80034d8:	1b64      	subs	r4, r4, r5
 80034da:	10a4      	asrs	r4, r4, #2
 80034dc:	42a6      	cmp	r6, r4
 80034de:	d109      	bne.n	80034f4 <__libc_init_array+0x24>
 80034e0:	f000 fed0 	bl	8004284 <_init>
 80034e4:	2600      	movs	r6, #0
 80034e6:	4d0a      	ldr	r5, [pc, #40]	@ (8003510 <__libc_init_array+0x40>)
 80034e8:	4c0a      	ldr	r4, [pc, #40]	@ (8003514 <__libc_init_array+0x44>)
 80034ea:	1b64      	subs	r4, r4, r5
 80034ec:	10a4      	asrs	r4, r4, #2
 80034ee:	42a6      	cmp	r6, r4
 80034f0:	d105      	bne.n	80034fe <__libc_init_array+0x2e>
 80034f2:	bd70      	pop	{r4, r5, r6, pc}
 80034f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034f8:	4798      	blx	r3
 80034fa:	3601      	adds	r6, #1
 80034fc:	e7ee      	b.n	80034dc <__libc_init_array+0xc>
 80034fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003502:	4798      	blx	r3
 8003504:	3601      	adds	r6, #1
 8003506:	e7f2      	b.n	80034ee <__libc_init_array+0x1e>
 8003508:	08004694 	.word	0x08004694
 800350c:	08004694 	.word	0x08004694
 8003510:	08004694 	.word	0x08004694
 8003514:	08004698 	.word	0x08004698

08003518 <__retarget_lock_init_recursive>:
 8003518:	4770      	bx	lr

0800351a <__retarget_lock_acquire_recursive>:
 800351a:	4770      	bx	lr

0800351c <__retarget_lock_release_recursive>:
 800351c:	4770      	bx	lr
	...

08003520 <_free_r>:
 8003520:	b538      	push	{r3, r4, r5, lr}
 8003522:	4605      	mov	r5, r0
 8003524:	2900      	cmp	r1, #0
 8003526:	d040      	beq.n	80035aa <_free_r+0x8a>
 8003528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800352c:	1f0c      	subs	r4, r1, #4
 800352e:	2b00      	cmp	r3, #0
 8003530:	bfb8      	it	lt
 8003532:	18e4      	addlt	r4, r4, r3
 8003534:	f000 f8de 	bl	80036f4 <__malloc_lock>
 8003538:	4a1c      	ldr	r2, [pc, #112]	@ (80035ac <_free_r+0x8c>)
 800353a:	6813      	ldr	r3, [r2, #0]
 800353c:	b933      	cbnz	r3, 800354c <_free_r+0x2c>
 800353e:	6063      	str	r3, [r4, #4]
 8003540:	6014      	str	r4, [r2, #0]
 8003542:	4628      	mov	r0, r5
 8003544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003548:	f000 b8da 	b.w	8003700 <__malloc_unlock>
 800354c:	42a3      	cmp	r3, r4
 800354e:	d908      	bls.n	8003562 <_free_r+0x42>
 8003550:	6820      	ldr	r0, [r4, #0]
 8003552:	1821      	adds	r1, r4, r0
 8003554:	428b      	cmp	r3, r1
 8003556:	bf01      	itttt	eq
 8003558:	6819      	ldreq	r1, [r3, #0]
 800355a:	685b      	ldreq	r3, [r3, #4]
 800355c:	1809      	addeq	r1, r1, r0
 800355e:	6021      	streq	r1, [r4, #0]
 8003560:	e7ed      	b.n	800353e <_free_r+0x1e>
 8003562:	461a      	mov	r2, r3
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	b10b      	cbz	r3, 800356c <_free_r+0x4c>
 8003568:	42a3      	cmp	r3, r4
 800356a:	d9fa      	bls.n	8003562 <_free_r+0x42>
 800356c:	6811      	ldr	r1, [r2, #0]
 800356e:	1850      	adds	r0, r2, r1
 8003570:	42a0      	cmp	r0, r4
 8003572:	d10b      	bne.n	800358c <_free_r+0x6c>
 8003574:	6820      	ldr	r0, [r4, #0]
 8003576:	4401      	add	r1, r0
 8003578:	1850      	adds	r0, r2, r1
 800357a:	4283      	cmp	r3, r0
 800357c:	6011      	str	r1, [r2, #0]
 800357e:	d1e0      	bne.n	8003542 <_free_r+0x22>
 8003580:	6818      	ldr	r0, [r3, #0]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	4408      	add	r0, r1
 8003586:	6010      	str	r0, [r2, #0]
 8003588:	6053      	str	r3, [r2, #4]
 800358a:	e7da      	b.n	8003542 <_free_r+0x22>
 800358c:	d902      	bls.n	8003594 <_free_r+0x74>
 800358e:	230c      	movs	r3, #12
 8003590:	602b      	str	r3, [r5, #0]
 8003592:	e7d6      	b.n	8003542 <_free_r+0x22>
 8003594:	6820      	ldr	r0, [r4, #0]
 8003596:	1821      	adds	r1, r4, r0
 8003598:	428b      	cmp	r3, r1
 800359a:	bf01      	itttt	eq
 800359c:	6819      	ldreq	r1, [r3, #0]
 800359e:	685b      	ldreq	r3, [r3, #4]
 80035a0:	1809      	addeq	r1, r1, r0
 80035a2:	6021      	streq	r1, [r4, #0]
 80035a4:	6063      	str	r3, [r4, #4]
 80035a6:	6054      	str	r4, [r2, #4]
 80035a8:	e7cb      	b.n	8003542 <_free_r+0x22>
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
 80035ac:	200003d4 	.word	0x200003d4

080035b0 <sbrk_aligned>:
 80035b0:	b570      	push	{r4, r5, r6, lr}
 80035b2:	4e0f      	ldr	r6, [pc, #60]	@ (80035f0 <sbrk_aligned+0x40>)
 80035b4:	460c      	mov	r4, r1
 80035b6:	6831      	ldr	r1, [r6, #0]
 80035b8:	4605      	mov	r5, r0
 80035ba:	b911      	cbnz	r1, 80035c2 <sbrk_aligned+0x12>
 80035bc:	f000 fd7c 	bl	80040b8 <_sbrk_r>
 80035c0:	6030      	str	r0, [r6, #0]
 80035c2:	4621      	mov	r1, r4
 80035c4:	4628      	mov	r0, r5
 80035c6:	f000 fd77 	bl	80040b8 <_sbrk_r>
 80035ca:	1c43      	adds	r3, r0, #1
 80035cc:	d103      	bne.n	80035d6 <sbrk_aligned+0x26>
 80035ce:	f04f 34ff 	mov.w	r4, #4294967295
 80035d2:	4620      	mov	r0, r4
 80035d4:	bd70      	pop	{r4, r5, r6, pc}
 80035d6:	1cc4      	adds	r4, r0, #3
 80035d8:	f024 0403 	bic.w	r4, r4, #3
 80035dc:	42a0      	cmp	r0, r4
 80035de:	d0f8      	beq.n	80035d2 <sbrk_aligned+0x22>
 80035e0:	1a21      	subs	r1, r4, r0
 80035e2:	4628      	mov	r0, r5
 80035e4:	f000 fd68 	bl	80040b8 <_sbrk_r>
 80035e8:	3001      	adds	r0, #1
 80035ea:	d1f2      	bne.n	80035d2 <sbrk_aligned+0x22>
 80035ec:	e7ef      	b.n	80035ce <sbrk_aligned+0x1e>
 80035ee:	bf00      	nop
 80035f0:	200003d0 	.word	0x200003d0

080035f4 <_malloc_r>:
 80035f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035f8:	1ccd      	adds	r5, r1, #3
 80035fa:	f025 0503 	bic.w	r5, r5, #3
 80035fe:	3508      	adds	r5, #8
 8003600:	2d0c      	cmp	r5, #12
 8003602:	bf38      	it	cc
 8003604:	250c      	movcc	r5, #12
 8003606:	2d00      	cmp	r5, #0
 8003608:	4606      	mov	r6, r0
 800360a:	db01      	blt.n	8003610 <_malloc_r+0x1c>
 800360c:	42a9      	cmp	r1, r5
 800360e:	d904      	bls.n	800361a <_malloc_r+0x26>
 8003610:	230c      	movs	r3, #12
 8003612:	6033      	str	r3, [r6, #0]
 8003614:	2000      	movs	r0, #0
 8003616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800361a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80036f0 <_malloc_r+0xfc>
 800361e:	f000 f869 	bl	80036f4 <__malloc_lock>
 8003622:	f8d8 3000 	ldr.w	r3, [r8]
 8003626:	461c      	mov	r4, r3
 8003628:	bb44      	cbnz	r4, 800367c <_malloc_r+0x88>
 800362a:	4629      	mov	r1, r5
 800362c:	4630      	mov	r0, r6
 800362e:	f7ff ffbf 	bl	80035b0 <sbrk_aligned>
 8003632:	1c43      	adds	r3, r0, #1
 8003634:	4604      	mov	r4, r0
 8003636:	d158      	bne.n	80036ea <_malloc_r+0xf6>
 8003638:	f8d8 4000 	ldr.w	r4, [r8]
 800363c:	4627      	mov	r7, r4
 800363e:	2f00      	cmp	r7, #0
 8003640:	d143      	bne.n	80036ca <_malloc_r+0xd6>
 8003642:	2c00      	cmp	r4, #0
 8003644:	d04b      	beq.n	80036de <_malloc_r+0xea>
 8003646:	6823      	ldr	r3, [r4, #0]
 8003648:	4639      	mov	r1, r7
 800364a:	4630      	mov	r0, r6
 800364c:	eb04 0903 	add.w	r9, r4, r3
 8003650:	f000 fd32 	bl	80040b8 <_sbrk_r>
 8003654:	4581      	cmp	r9, r0
 8003656:	d142      	bne.n	80036de <_malloc_r+0xea>
 8003658:	6821      	ldr	r1, [r4, #0]
 800365a:	4630      	mov	r0, r6
 800365c:	1a6d      	subs	r5, r5, r1
 800365e:	4629      	mov	r1, r5
 8003660:	f7ff ffa6 	bl	80035b0 <sbrk_aligned>
 8003664:	3001      	adds	r0, #1
 8003666:	d03a      	beq.n	80036de <_malloc_r+0xea>
 8003668:	6823      	ldr	r3, [r4, #0]
 800366a:	442b      	add	r3, r5
 800366c:	6023      	str	r3, [r4, #0]
 800366e:	f8d8 3000 	ldr.w	r3, [r8]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	bb62      	cbnz	r2, 80036d0 <_malloc_r+0xdc>
 8003676:	f8c8 7000 	str.w	r7, [r8]
 800367a:	e00f      	b.n	800369c <_malloc_r+0xa8>
 800367c:	6822      	ldr	r2, [r4, #0]
 800367e:	1b52      	subs	r2, r2, r5
 8003680:	d420      	bmi.n	80036c4 <_malloc_r+0xd0>
 8003682:	2a0b      	cmp	r2, #11
 8003684:	d917      	bls.n	80036b6 <_malloc_r+0xc2>
 8003686:	1961      	adds	r1, r4, r5
 8003688:	42a3      	cmp	r3, r4
 800368a:	6025      	str	r5, [r4, #0]
 800368c:	bf18      	it	ne
 800368e:	6059      	strne	r1, [r3, #4]
 8003690:	6863      	ldr	r3, [r4, #4]
 8003692:	bf08      	it	eq
 8003694:	f8c8 1000 	streq.w	r1, [r8]
 8003698:	5162      	str	r2, [r4, r5]
 800369a:	604b      	str	r3, [r1, #4]
 800369c:	4630      	mov	r0, r6
 800369e:	f000 f82f 	bl	8003700 <__malloc_unlock>
 80036a2:	f104 000b 	add.w	r0, r4, #11
 80036a6:	1d23      	adds	r3, r4, #4
 80036a8:	f020 0007 	bic.w	r0, r0, #7
 80036ac:	1ac2      	subs	r2, r0, r3
 80036ae:	bf1c      	itt	ne
 80036b0:	1a1b      	subne	r3, r3, r0
 80036b2:	50a3      	strne	r3, [r4, r2]
 80036b4:	e7af      	b.n	8003616 <_malloc_r+0x22>
 80036b6:	6862      	ldr	r2, [r4, #4]
 80036b8:	42a3      	cmp	r3, r4
 80036ba:	bf0c      	ite	eq
 80036bc:	f8c8 2000 	streq.w	r2, [r8]
 80036c0:	605a      	strne	r2, [r3, #4]
 80036c2:	e7eb      	b.n	800369c <_malloc_r+0xa8>
 80036c4:	4623      	mov	r3, r4
 80036c6:	6864      	ldr	r4, [r4, #4]
 80036c8:	e7ae      	b.n	8003628 <_malloc_r+0x34>
 80036ca:	463c      	mov	r4, r7
 80036cc:	687f      	ldr	r7, [r7, #4]
 80036ce:	e7b6      	b.n	800363e <_malloc_r+0x4a>
 80036d0:	461a      	mov	r2, r3
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	42a3      	cmp	r3, r4
 80036d6:	d1fb      	bne.n	80036d0 <_malloc_r+0xdc>
 80036d8:	2300      	movs	r3, #0
 80036da:	6053      	str	r3, [r2, #4]
 80036dc:	e7de      	b.n	800369c <_malloc_r+0xa8>
 80036de:	230c      	movs	r3, #12
 80036e0:	4630      	mov	r0, r6
 80036e2:	6033      	str	r3, [r6, #0]
 80036e4:	f000 f80c 	bl	8003700 <__malloc_unlock>
 80036e8:	e794      	b.n	8003614 <_malloc_r+0x20>
 80036ea:	6005      	str	r5, [r0, #0]
 80036ec:	e7d6      	b.n	800369c <_malloc_r+0xa8>
 80036ee:	bf00      	nop
 80036f0:	200003d4 	.word	0x200003d4

080036f4 <__malloc_lock>:
 80036f4:	4801      	ldr	r0, [pc, #4]	@ (80036fc <__malloc_lock+0x8>)
 80036f6:	f7ff bf10 	b.w	800351a <__retarget_lock_acquire_recursive>
 80036fa:	bf00      	nop
 80036fc:	200003cc 	.word	0x200003cc

08003700 <__malloc_unlock>:
 8003700:	4801      	ldr	r0, [pc, #4]	@ (8003708 <__malloc_unlock+0x8>)
 8003702:	f7ff bf0b 	b.w	800351c <__retarget_lock_release_recursive>
 8003706:	bf00      	nop
 8003708:	200003cc 	.word	0x200003cc

0800370c <__ssputs_r>:
 800370c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003710:	461f      	mov	r7, r3
 8003712:	688e      	ldr	r6, [r1, #8]
 8003714:	4682      	mov	sl, r0
 8003716:	42be      	cmp	r6, r7
 8003718:	460c      	mov	r4, r1
 800371a:	4690      	mov	r8, r2
 800371c:	680b      	ldr	r3, [r1, #0]
 800371e:	d82d      	bhi.n	800377c <__ssputs_r+0x70>
 8003720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003724:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003728:	d026      	beq.n	8003778 <__ssputs_r+0x6c>
 800372a:	6965      	ldr	r5, [r4, #20]
 800372c:	6909      	ldr	r1, [r1, #16]
 800372e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003732:	eba3 0901 	sub.w	r9, r3, r1
 8003736:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800373a:	1c7b      	adds	r3, r7, #1
 800373c:	444b      	add	r3, r9
 800373e:	106d      	asrs	r5, r5, #1
 8003740:	429d      	cmp	r5, r3
 8003742:	bf38      	it	cc
 8003744:	461d      	movcc	r5, r3
 8003746:	0553      	lsls	r3, r2, #21
 8003748:	d527      	bpl.n	800379a <__ssputs_r+0x8e>
 800374a:	4629      	mov	r1, r5
 800374c:	f7ff ff52 	bl	80035f4 <_malloc_r>
 8003750:	4606      	mov	r6, r0
 8003752:	b360      	cbz	r0, 80037ae <__ssputs_r+0xa2>
 8003754:	464a      	mov	r2, r9
 8003756:	6921      	ldr	r1, [r4, #16]
 8003758:	f000 fccc 	bl	80040f4 <memcpy>
 800375c:	89a3      	ldrh	r3, [r4, #12]
 800375e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003762:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003766:	81a3      	strh	r3, [r4, #12]
 8003768:	6126      	str	r6, [r4, #16]
 800376a:	444e      	add	r6, r9
 800376c:	6026      	str	r6, [r4, #0]
 800376e:	463e      	mov	r6, r7
 8003770:	6165      	str	r5, [r4, #20]
 8003772:	eba5 0509 	sub.w	r5, r5, r9
 8003776:	60a5      	str	r5, [r4, #8]
 8003778:	42be      	cmp	r6, r7
 800377a:	d900      	bls.n	800377e <__ssputs_r+0x72>
 800377c:	463e      	mov	r6, r7
 800377e:	4632      	mov	r2, r6
 8003780:	4641      	mov	r1, r8
 8003782:	6820      	ldr	r0, [r4, #0]
 8003784:	f000 fc7e 	bl	8004084 <memmove>
 8003788:	2000      	movs	r0, #0
 800378a:	68a3      	ldr	r3, [r4, #8]
 800378c:	1b9b      	subs	r3, r3, r6
 800378e:	60a3      	str	r3, [r4, #8]
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	4433      	add	r3, r6
 8003794:	6023      	str	r3, [r4, #0]
 8003796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800379a:	462a      	mov	r2, r5
 800379c:	f000 fcb8 	bl	8004110 <_realloc_r>
 80037a0:	4606      	mov	r6, r0
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d1e0      	bne.n	8003768 <__ssputs_r+0x5c>
 80037a6:	4650      	mov	r0, sl
 80037a8:	6921      	ldr	r1, [r4, #16]
 80037aa:	f7ff feb9 	bl	8003520 <_free_r>
 80037ae:	230c      	movs	r3, #12
 80037b0:	f8ca 3000 	str.w	r3, [sl]
 80037b4:	89a3      	ldrh	r3, [r4, #12]
 80037b6:	f04f 30ff 	mov.w	r0, #4294967295
 80037ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80037be:	81a3      	strh	r3, [r4, #12]
 80037c0:	e7e9      	b.n	8003796 <__ssputs_r+0x8a>
	...

080037c4 <_svfiprintf_r>:
 80037c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037c8:	4698      	mov	r8, r3
 80037ca:	898b      	ldrh	r3, [r1, #12]
 80037cc:	4607      	mov	r7, r0
 80037ce:	061b      	lsls	r3, r3, #24
 80037d0:	460d      	mov	r5, r1
 80037d2:	4614      	mov	r4, r2
 80037d4:	b09d      	sub	sp, #116	@ 0x74
 80037d6:	d510      	bpl.n	80037fa <_svfiprintf_r+0x36>
 80037d8:	690b      	ldr	r3, [r1, #16]
 80037da:	b973      	cbnz	r3, 80037fa <_svfiprintf_r+0x36>
 80037dc:	2140      	movs	r1, #64	@ 0x40
 80037de:	f7ff ff09 	bl	80035f4 <_malloc_r>
 80037e2:	6028      	str	r0, [r5, #0]
 80037e4:	6128      	str	r0, [r5, #16]
 80037e6:	b930      	cbnz	r0, 80037f6 <_svfiprintf_r+0x32>
 80037e8:	230c      	movs	r3, #12
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	f04f 30ff 	mov.w	r0, #4294967295
 80037f0:	b01d      	add	sp, #116	@ 0x74
 80037f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037f6:	2340      	movs	r3, #64	@ 0x40
 80037f8:	616b      	str	r3, [r5, #20]
 80037fa:	2300      	movs	r3, #0
 80037fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80037fe:	2320      	movs	r3, #32
 8003800:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003804:	2330      	movs	r3, #48	@ 0x30
 8003806:	f04f 0901 	mov.w	r9, #1
 800380a:	f8cd 800c 	str.w	r8, [sp, #12]
 800380e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80039a8 <_svfiprintf_r+0x1e4>
 8003812:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003816:	4623      	mov	r3, r4
 8003818:	469a      	mov	sl, r3
 800381a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800381e:	b10a      	cbz	r2, 8003824 <_svfiprintf_r+0x60>
 8003820:	2a25      	cmp	r2, #37	@ 0x25
 8003822:	d1f9      	bne.n	8003818 <_svfiprintf_r+0x54>
 8003824:	ebba 0b04 	subs.w	fp, sl, r4
 8003828:	d00b      	beq.n	8003842 <_svfiprintf_r+0x7e>
 800382a:	465b      	mov	r3, fp
 800382c:	4622      	mov	r2, r4
 800382e:	4629      	mov	r1, r5
 8003830:	4638      	mov	r0, r7
 8003832:	f7ff ff6b 	bl	800370c <__ssputs_r>
 8003836:	3001      	adds	r0, #1
 8003838:	f000 80a7 	beq.w	800398a <_svfiprintf_r+0x1c6>
 800383c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800383e:	445a      	add	r2, fp
 8003840:	9209      	str	r2, [sp, #36]	@ 0x24
 8003842:	f89a 3000 	ldrb.w	r3, [sl]
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 809f 	beq.w	800398a <_svfiprintf_r+0x1c6>
 800384c:	2300      	movs	r3, #0
 800384e:	f04f 32ff 	mov.w	r2, #4294967295
 8003852:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003856:	f10a 0a01 	add.w	sl, sl, #1
 800385a:	9304      	str	r3, [sp, #16]
 800385c:	9307      	str	r3, [sp, #28]
 800385e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003862:	931a      	str	r3, [sp, #104]	@ 0x68
 8003864:	4654      	mov	r4, sl
 8003866:	2205      	movs	r2, #5
 8003868:	f814 1b01 	ldrb.w	r1, [r4], #1
 800386c:	484e      	ldr	r0, [pc, #312]	@ (80039a8 <_svfiprintf_r+0x1e4>)
 800386e:	f000 fc33 	bl	80040d8 <memchr>
 8003872:	9a04      	ldr	r2, [sp, #16]
 8003874:	b9d8      	cbnz	r0, 80038ae <_svfiprintf_r+0xea>
 8003876:	06d0      	lsls	r0, r2, #27
 8003878:	bf44      	itt	mi
 800387a:	2320      	movmi	r3, #32
 800387c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003880:	0711      	lsls	r1, r2, #28
 8003882:	bf44      	itt	mi
 8003884:	232b      	movmi	r3, #43	@ 0x2b
 8003886:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800388a:	f89a 3000 	ldrb.w	r3, [sl]
 800388e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003890:	d015      	beq.n	80038be <_svfiprintf_r+0xfa>
 8003892:	4654      	mov	r4, sl
 8003894:	2000      	movs	r0, #0
 8003896:	f04f 0c0a 	mov.w	ip, #10
 800389a:	9a07      	ldr	r2, [sp, #28]
 800389c:	4621      	mov	r1, r4
 800389e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038a2:	3b30      	subs	r3, #48	@ 0x30
 80038a4:	2b09      	cmp	r3, #9
 80038a6:	d94b      	bls.n	8003940 <_svfiprintf_r+0x17c>
 80038a8:	b1b0      	cbz	r0, 80038d8 <_svfiprintf_r+0x114>
 80038aa:	9207      	str	r2, [sp, #28]
 80038ac:	e014      	b.n	80038d8 <_svfiprintf_r+0x114>
 80038ae:	eba0 0308 	sub.w	r3, r0, r8
 80038b2:	fa09 f303 	lsl.w	r3, r9, r3
 80038b6:	4313      	orrs	r3, r2
 80038b8:	46a2      	mov	sl, r4
 80038ba:	9304      	str	r3, [sp, #16]
 80038bc:	e7d2      	b.n	8003864 <_svfiprintf_r+0xa0>
 80038be:	9b03      	ldr	r3, [sp, #12]
 80038c0:	1d19      	adds	r1, r3, #4
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	9103      	str	r1, [sp, #12]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	bfbb      	ittet	lt
 80038ca:	425b      	neglt	r3, r3
 80038cc:	f042 0202 	orrlt.w	r2, r2, #2
 80038d0:	9307      	strge	r3, [sp, #28]
 80038d2:	9307      	strlt	r3, [sp, #28]
 80038d4:	bfb8      	it	lt
 80038d6:	9204      	strlt	r2, [sp, #16]
 80038d8:	7823      	ldrb	r3, [r4, #0]
 80038da:	2b2e      	cmp	r3, #46	@ 0x2e
 80038dc:	d10a      	bne.n	80038f4 <_svfiprintf_r+0x130>
 80038de:	7863      	ldrb	r3, [r4, #1]
 80038e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80038e2:	d132      	bne.n	800394a <_svfiprintf_r+0x186>
 80038e4:	9b03      	ldr	r3, [sp, #12]
 80038e6:	3402      	adds	r4, #2
 80038e8:	1d1a      	adds	r2, r3, #4
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	9203      	str	r2, [sp, #12]
 80038ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80038f2:	9305      	str	r3, [sp, #20]
 80038f4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80039ac <_svfiprintf_r+0x1e8>
 80038f8:	2203      	movs	r2, #3
 80038fa:	4650      	mov	r0, sl
 80038fc:	7821      	ldrb	r1, [r4, #0]
 80038fe:	f000 fbeb 	bl	80040d8 <memchr>
 8003902:	b138      	cbz	r0, 8003914 <_svfiprintf_r+0x150>
 8003904:	2240      	movs	r2, #64	@ 0x40
 8003906:	9b04      	ldr	r3, [sp, #16]
 8003908:	eba0 000a 	sub.w	r0, r0, sl
 800390c:	4082      	lsls	r2, r0
 800390e:	4313      	orrs	r3, r2
 8003910:	3401      	adds	r4, #1
 8003912:	9304      	str	r3, [sp, #16]
 8003914:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003918:	2206      	movs	r2, #6
 800391a:	4825      	ldr	r0, [pc, #148]	@ (80039b0 <_svfiprintf_r+0x1ec>)
 800391c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003920:	f000 fbda 	bl	80040d8 <memchr>
 8003924:	2800      	cmp	r0, #0
 8003926:	d036      	beq.n	8003996 <_svfiprintf_r+0x1d2>
 8003928:	4b22      	ldr	r3, [pc, #136]	@ (80039b4 <_svfiprintf_r+0x1f0>)
 800392a:	bb1b      	cbnz	r3, 8003974 <_svfiprintf_r+0x1b0>
 800392c:	9b03      	ldr	r3, [sp, #12]
 800392e:	3307      	adds	r3, #7
 8003930:	f023 0307 	bic.w	r3, r3, #7
 8003934:	3308      	adds	r3, #8
 8003936:	9303      	str	r3, [sp, #12]
 8003938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800393a:	4433      	add	r3, r6
 800393c:	9309      	str	r3, [sp, #36]	@ 0x24
 800393e:	e76a      	b.n	8003816 <_svfiprintf_r+0x52>
 8003940:	460c      	mov	r4, r1
 8003942:	2001      	movs	r0, #1
 8003944:	fb0c 3202 	mla	r2, ip, r2, r3
 8003948:	e7a8      	b.n	800389c <_svfiprintf_r+0xd8>
 800394a:	2300      	movs	r3, #0
 800394c:	f04f 0c0a 	mov.w	ip, #10
 8003950:	4619      	mov	r1, r3
 8003952:	3401      	adds	r4, #1
 8003954:	9305      	str	r3, [sp, #20]
 8003956:	4620      	mov	r0, r4
 8003958:	f810 2b01 	ldrb.w	r2, [r0], #1
 800395c:	3a30      	subs	r2, #48	@ 0x30
 800395e:	2a09      	cmp	r2, #9
 8003960:	d903      	bls.n	800396a <_svfiprintf_r+0x1a6>
 8003962:	2b00      	cmp	r3, #0
 8003964:	d0c6      	beq.n	80038f4 <_svfiprintf_r+0x130>
 8003966:	9105      	str	r1, [sp, #20]
 8003968:	e7c4      	b.n	80038f4 <_svfiprintf_r+0x130>
 800396a:	4604      	mov	r4, r0
 800396c:	2301      	movs	r3, #1
 800396e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003972:	e7f0      	b.n	8003956 <_svfiprintf_r+0x192>
 8003974:	ab03      	add	r3, sp, #12
 8003976:	9300      	str	r3, [sp, #0]
 8003978:	462a      	mov	r2, r5
 800397a:	4638      	mov	r0, r7
 800397c:	4b0e      	ldr	r3, [pc, #56]	@ (80039b8 <_svfiprintf_r+0x1f4>)
 800397e:	a904      	add	r1, sp, #16
 8003980:	f3af 8000 	nop.w
 8003984:	1c42      	adds	r2, r0, #1
 8003986:	4606      	mov	r6, r0
 8003988:	d1d6      	bne.n	8003938 <_svfiprintf_r+0x174>
 800398a:	89ab      	ldrh	r3, [r5, #12]
 800398c:	065b      	lsls	r3, r3, #25
 800398e:	f53f af2d 	bmi.w	80037ec <_svfiprintf_r+0x28>
 8003992:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003994:	e72c      	b.n	80037f0 <_svfiprintf_r+0x2c>
 8003996:	ab03      	add	r3, sp, #12
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	462a      	mov	r2, r5
 800399c:	4638      	mov	r0, r7
 800399e:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <_svfiprintf_r+0x1f4>)
 80039a0:	a904      	add	r1, sp, #16
 80039a2:	f000 f9bd 	bl	8003d20 <_printf_i>
 80039a6:	e7ed      	b.n	8003984 <_svfiprintf_r+0x1c0>
 80039a8:	08004656 	.word	0x08004656
 80039ac:	0800465c 	.word	0x0800465c
 80039b0:	08004660 	.word	0x08004660
 80039b4:	00000000 	.word	0x00000000
 80039b8:	0800370d 	.word	0x0800370d

080039bc <__sfputc_r>:
 80039bc:	6893      	ldr	r3, [r2, #8]
 80039be:	b410      	push	{r4}
 80039c0:	3b01      	subs	r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	6093      	str	r3, [r2, #8]
 80039c6:	da07      	bge.n	80039d8 <__sfputc_r+0x1c>
 80039c8:	6994      	ldr	r4, [r2, #24]
 80039ca:	42a3      	cmp	r3, r4
 80039cc:	db01      	blt.n	80039d2 <__sfputc_r+0x16>
 80039ce:	290a      	cmp	r1, #10
 80039d0:	d102      	bne.n	80039d8 <__sfputc_r+0x1c>
 80039d2:	bc10      	pop	{r4}
 80039d4:	f000 bac2 	b.w	8003f5c <__swbuf_r>
 80039d8:	6813      	ldr	r3, [r2, #0]
 80039da:	1c58      	adds	r0, r3, #1
 80039dc:	6010      	str	r0, [r2, #0]
 80039de:	7019      	strb	r1, [r3, #0]
 80039e0:	4608      	mov	r0, r1
 80039e2:	bc10      	pop	{r4}
 80039e4:	4770      	bx	lr

080039e6 <__sfputs_r>:
 80039e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039e8:	4606      	mov	r6, r0
 80039ea:	460f      	mov	r7, r1
 80039ec:	4614      	mov	r4, r2
 80039ee:	18d5      	adds	r5, r2, r3
 80039f0:	42ac      	cmp	r4, r5
 80039f2:	d101      	bne.n	80039f8 <__sfputs_r+0x12>
 80039f4:	2000      	movs	r0, #0
 80039f6:	e007      	b.n	8003a08 <__sfputs_r+0x22>
 80039f8:	463a      	mov	r2, r7
 80039fa:	4630      	mov	r0, r6
 80039fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a00:	f7ff ffdc 	bl	80039bc <__sfputc_r>
 8003a04:	1c43      	adds	r3, r0, #1
 8003a06:	d1f3      	bne.n	80039f0 <__sfputs_r+0xa>
 8003a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003a0c <_vfiprintf_r>:
 8003a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a10:	460d      	mov	r5, r1
 8003a12:	4614      	mov	r4, r2
 8003a14:	4698      	mov	r8, r3
 8003a16:	4606      	mov	r6, r0
 8003a18:	b09d      	sub	sp, #116	@ 0x74
 8003a1a:	b118      	cbz	r0, 8003a24 <_vfiprintf_r+0x18>
 8003a1c:	6a03      	ldr	r3, [r0, #32]
 8003a1e:	b90b      	cbnz	r3, 8003a24 <_vfiprintf_r+0x18>
 8003a20:	f7ff fc40 	bl	80032a4 <__sinit>
 8003a24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a26:	07d9      	lsls	r1, r3, #31
 8003a28:	d405      	bmi.n	8003a36 <_vfiprintf_r+0x2a>
 8003a2a:	89ab      	ldrh	r3, [r5, #12]
 8003a2c:	059a      	lsls	r2, r3, #22
 8003a2e:	d402      	bmi.n	8003a36 <_vfiprintf_r+0x2a>
 8003a30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a32:	f7ff fd72 	bl	800351a <__retarget_lock_acquire_recursive>
 8003a36:	89ab      	ldrh	r3, [r5, #12]
 8003a38:	071b      	lsls	r3, r3, #28
 8003a3a:	d501      	bpl.n	8003a40 <_vfiprintf_r+0x34>
 8003a3c:	692b      	ldr	r3, [r5, #16]
 8003a3e:	b99b      	cbnz	r3, 8003a68 <_vfiprintf_r+0x5c>
 8003a40:	4629      	mov	r1, r5
 8003a42:	4630      	mov	r0, r6
 8003a44:	f000 fac8 	bl	8003fd8 <__swsetup_r>
 8003a48:	b170      	cbz	r0, 8003a68 <_vfiprintf_r+0x5c>
 8003a4a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003a4c:	07dc      	lsls	r4, r3, #31
 8003a4e:	d504      	bpl.n	8003a5a <_vfiprintf_r+0x4e>
 8003a50:	f04f 30ff 	mov.w	r0, #4294967295
 8003a54:	b01d      	add	sp, #116	@ 0x74
 8003a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a5a:	89ab      	ldrh	r3, [r5, #12]
 8003a5c:	0598      	lsls	r0, r3, #22
 8003a5e:	d4f7      	bmi.n	8003a50 <_vfiprintf_r+0x44>
 8003a60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003a62:	f7ff fd5b 	bl	800351c <__retarget_lock_release_recursive>
 8003a66:	e7f3      	b.n	8003a50 <_vfiprintf_r+0x44>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8003a6c:	2320      	movs	r3, #32
 8003a6e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003a72:	2330      	movs	r3, #48	@ 0x30
 8003a74:	f04f 0901 	mov.w	r9, #1
 8003a78:	f8cd 800c 	str.w	r8, [sp, #12]
 8003a7c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003c28 <_vfiprintf_r+0x21c>
 8003a80:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003a84:	4623      	mov	r3, r4
 8003a86:	469a      	mov	sl, r3
 8003a88:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a8c:	b10a      	cbz	r2, 8003a92 <_vfiprintf_r+0x86>
 8003a8e:	2a25      	cmp	r2, #37	@ 0x25
 8003a90:	d1f9      	bne.n	8003a86 <_vfiprintf_r+0x7a>
 8003a92:	ebba 0b04 	subs.w	fp, sl, r4
 8003a96:	d00b      	beq.n	8003ab0 <_vfiprintf_r+0xa4>
 8003a98:	465b      	mov	r3, fp
 8003a9a:	4622      	mov	r2, r4
 8003a9c:	4629      	mov	r1, r5
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	f7ff ffa1 	bl	80039e6 <__sfputs_r>
 8003aa4:	3001      	adds	r0, #1
 8003aa6:	f000 80a7 	beq.w	8003bf8 <_vfiprintf_r+0x1ec>
 8003aaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003aac:	445a      	add	r2, fp
 8003aae:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ab0:	f89a 3000 	ldrb.w	r3, [sl]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	f000 809f 	beq.w	8003bf8 <_vfiprintf_r+0x1ec>
 8003aba:	2300      	movs	r3, #0
 8003abc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ac0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003ac4:	f10a 0a01 	add.w	sl, sl, #1
 8003ac8:	9304      	str	r3, [sp, #16]
 8003aca:	9307      	str	r3, [sp, #28]
 8003acc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003ad0:	931a      	str	r3, [sp, #104]	@ 0x68
 8003ad2:	4654      	mov	r4, sl
 8003ad4:	2205      	movs	r2, #5
 8003ad6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ada:	4853      	ldr	r0, [pc, #332]	@ (8003c28 <_vfiprintf_r+0x21c>)
 8003adc:	f000 fafc 	bl	80040d8 <memchr>
 8003ae0:	9a04      	ldr	r2, [sp, #16]
 8003ae2:	b9d8      	cbnz	r0, 8003b1c <_vfiprintf_r+0x110>
 8003ae4:	06d1      	lsls	r1, r2, #27
 8003ae6:	bf44      	itt	mi
 8003ae8:	2320      	movmi	r3, #32
 8003aea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003aee:	0713      	lsls	r3, r2, #28
 8003af0:	bf44      	itt	mi
 8003af2:	232b      	movmi	r3, #43	@ 0x2b
 8003af4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003af8:	f89a 3000 	ldrb.w	r3, [sl]
 8003afc:	2b2a      	cmp	r3, #42	@ 0x2a
 8003afe:	d015      	beq.n	8003b2c <_vfiprintf_r+0x120>
 8003b00:	4654      	mov	r4, sl
 8003b02:	2000      	movs	r0, #0
 8003b04:	f04f 0c0a 	mov.w	ip, #10
 8003b08:	9a07      	ldr	r2, [sp, #28]
 8003b0a:	4621      	mov	r1, r4
 8003b0c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b10:	3b30      	subs	r3, #48	@ 0x30
 8003b12:	2b09      	cmp	r3, #9
 8003b14:	d94b      	bls.n	8003bae <_vfiprintf_r+0x1a2>
 8003b16:	b1b0      	cbz	r0, 8003b46 <_vfiprintf_r+0x13a>
 8003b18:	9207      	str	r2, [sp, #28]
 8003b1a:	e014      	b.n	8003b46 <_vfiprintf_r+0x13a>
 8003b1c:	eba0 0308 	sub.w	r3, r0, r8
 8003b20:	fa09 f303 	lsl.w	r3, r9, r3
 8003b24:	4313      	orrs	r3, r2
 8003b26:	46a2      	mov	sl, r4
 8003b28:	9304      	str	r3, [sp, #16]
 8003b2a:	e7d2      	b.n	8003ad2 <_vfiprintf_r+0xc6>
 8003b2c:	9b03      	ldr	r3, [sp, #12]
 8003b2e:	1d19      	adds	r1, r3, #4
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	9103      	str	r1, [sp, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	bfbb      	ittet	lt
 8003b38:	425b      	neglt	r3, r3
 8003b3a:	f042 0202 	orrlt.w	r2, r2, #2
 8003b3e:	9307      	strge	r3, [sp, #28]
 8003b40:	9307      	strlt	r3, [sp, #28]
 8003b42:	bfb8      	it	lt
 8003b44:	9204      	strlt	r2, [sp, #16]
 8003b46:	7823      	ldrb	r3, [r4, #0]
 8003b48:	2b2e      	cmp	r3, #46	@ 0x2e
 8003b4a:	d10a      	bne.n	8003b62 <_vfiprintf_r+0x156>
 8003b4c:	7863      	ldrb	r3, [r4, #1]
 8003b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b50:	d132      	bne.n	8003bb8 <_vfiprintf_r+0x1ac>
 8003b52:	9b03      	ldr	r3, [sp, #12]
 8003b54:	3402      	adds	r4, #2
 8003b56:	1d1a      	adds	r2, r3, #4
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	9203      	str	r2, [sp, #12]
 8003b5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003b60:	9305      	str	r3, [sp, #20]
 8003b62:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003c2c <_vfiprintf_r+0x220>
 8003b66:	2203      	movs	r2, #3
 8003b68:	4650      	mov	r0, sl
 8003b6a:	7821      	ldrb	r1, [r4, #0]
 8003b6c:	f000 fab4 	bl	80040d8 <memchr>
 8003b70:	b138      	cbz	r0, 8003b82 <_vfiprintf_r+0x176>
 8003b72:	2240      	movs	r2, #64	@ 0x40
 8003b74:	9b04      	ldr	r3, [sp, #16]
 8003b76:	eba0 000a 	sub.w	r0, r0, sl
 8003b7a:	4082      	lsls	r2, r0
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	3401      	adds	r4, #1
 8003b80:	9304      	str	r3, [sp, #16]
 8003b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b86:	2206      	movs	r2, #6
 8003b88:	4829      	ldr	r0, [pc, #164]	@ (8003c30 <_vfiprintf_r+0x224>)
 8003b8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003b8e:	f000 faa3 	bl	80040d8 <memchr>
 8003b92:	2800      	cmp	r0, #0
 8003b94:	d03f      	beq.n	8003c16 <_vfiprintf_r+0x20a>
 8003b96:	4b27      	ldr	r3, [pc, #156]	@ (8003c34 <_vfiprintf_r+0x228>)
 8003b98:	bb1b      	cbnz	r3, 8003be2 <_vfiprintf_r+0x1d6>
 8003b9a:	9b03      	ldr	r3, [sp, #12]
 8003b9c:	3307      	adds	r3, #7
 8003b9e:	f023 0307 	bic.w	r3, r3, #7
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	9303      	str	r3, [sp, #12]
 8003ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ba8:	443b      	add	r3, r7
 8003baa:	9309      	str	r3, [sp, #36]	@ 0x24
 8003bac:	e76a      	b.n	8003a84 <_vfiprintf_r+0x78>
 8003bae:	460c      	mov	r4, r1
 8003bb0:	2001      	movs	r0, #1
 8003bb2:	fb0c 3202 	mla	r2, ip, r2, r3
 8003bb6:	e7a8      	b.n	8003b0a <_vfiprintf_r+0xfe>
 8003bb8:	2300      	movs	r3, #0
 8003bba:	f04f 0c0a 	mov.w	ip, #10
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	3401      	adds	r4, #1
 8003bc2:	9305      	str	r3, [sp, #20]
 8003bc4:	4620      	mov	r0, r4
 8003bc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003bca:	3a30      	subs	r2, #48	@ 0x30
 8003bcc:	2a09      	cmp	r2, #9
 8003bce:	d903      	bls.n	8003bd8 <_vfiprintf_r+0x1cc>
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d0c6      	beq.n	8003b62 <_vfiprintf_r+0x156>
 8003bd4:	9105      	str	r1, [sp, #20]
 8003bd6:	e7c4      	b.n	8003b62 <_vfiprintf_r+0x156>
 8003bd8:	4604      	mov	r4, r0
 8003bda:	2301      	movs	r3, #1
 8003bdc:	fb0c 2101 	mla	r1, ip, r1, r2
 8003be0:	e7f0      	b.n	8003bc4 <_vfiprintf_r+0x1b8>
 8003be2:	ab03      	add	r3, sp, #12
 8003be4:	9300      	str	r3, [sp, #0]
 8003be6:	462a      	mov	r2, r5
 8003be8:	4630      	mov	r0, r6
 8003bea:	4b13      	ldr	r3, [pc, #76]	@ (8003c38 <_vfiprintf_r+0x22c>)
 8003bec:	a904      	add	r1, sp, #16
 8003bee:	f3af 8000 	nop.w
 8003bf2:	4607      	mov	r7, r0
 8003bf4:	1c78      	adds	r0, r7, #1
 8003bf6:	d1d6      	bne.n	8003ba6 <_vfiprintf_r+0x19a>
 8003bf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003bfa:	07d9      	lsls	r1, r3, #31
 8003bfc:	d405      	bmi.n	8003c0a <_vfiprintf_r+0x1fe>
 8003bfe:	89ab      	ldrh	r3, [r5, #12]
 8003c00:	059a      	lsls	r2, r3, #22
 8003c02:	d402      	bmi.n	8003c0a <_vfiprintf_r+0x1fe>
 8003c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003c06:	f7ff fc89 	bl	800351c <__retarget_lock_release_recursive>
 8003c0a:	89ab      	ldrh	r3, [r5, #12]
 8003c0c:	065b      	lsls	r3, r3, #25
 8003c0e:	f53f af1f 	bmi.w	8003a50 <_vfiprintf_r+0x44>
 8003c12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c14:	e71e      	b.n	8003a54 <_vfiprintf_r+0x48>
 8003c16:	ab03      	add	r3, sp, #12
 8003c18:	9300      	str	r3, [sp, #0]
 8003c1a:	462a      	mov	r2, r5
 8003c1c:	4630      	mov	r0, r6
 8003c1e:	4b06      	ldr	r3, [pc, #24]	@ (8003c38 <_vfiprintf_r+0x22c>)
 8003c20:	a904      	add	r1, sp, #16
 8003c22:	f000 f87d 	bl	8003d20 <_printf_i>
 8003c26:	e7e4      	b.n	8003bf2 <_vfiprintf_r+0x1e6>
 8003c28:	08004656 	.word	0x08004656
 8003c2c:	0800465c 	.word	0x0800465c
 8003c30:	08004660 	.word	0x08004660
 8003c34:	00000000 	.word	0x00000000
 8003c38:	080039e7 	.word	0x080039e7

08003c3c <_printf_common>:
 8003c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c40:	4616      	mov	r6, r2
 8003c42:	4698      	mov	r8, r3
 8003c44:	688a      	ldr	r2, [r1, #8]
 8003c46:	690b      	ldr	r3, [r1, #16]
 8003c48:	4607      	mov	r7, r0
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	bfb8      	it	lt
 8003c4e:	4613      	movlt	r3, r2
 8003c50:	6033      	str	r3, [r6, #0]
 8003c52:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003c56:	460c      	mov	r4, r1
 8003c58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003c5c:	b10a      	cbz	r2, 8003c62 <_printf_common+0x26>
 8003c5e:	3301      	adds	r3, #1
 8003c60:	6033      	str	r3, [r6, #0]
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	0699      	lsls	r1, r3, #26
 8003c66:	bf42      	ittt	mi
 8003c68:	6833      	ldrmi	r3, [r6, #0]
 8003c6a:	3302      	addmi	r3, #2
 8003c6c:	6033      	strmi	r3, [r6, #0]
 8003c6e:	6825      	ldr	r5, [r4, #0]
 8003c70:	f015 0506 	ands.w	r5, r5, #6
 8003c74:	d106      	bne.n	8003c84 <_printf_common+0x48>
 8003c76:	f104 0a19 	add.w	sl, r4, #25
 8003c7a:	68e3      	ldr	r3, [r4, #12]
 8003c7c:	6832      	ldr	r2, [r6, #0]
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	42ab      	cmp	r3, r5
 8003c82:	dc2b      	bgt.n	8003cdc <_printf_common+0xa0>
 8003c84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003c88:	6822      	ldr	r2, [r4, #0]
 8003c8a:	3b00      	subs	r3, #0
 8003c8c:	bf18      	it	ne
 8003c8e:	2301      	movne	r3, #1
 8003c90:	0692      	lsls	r2, r2, #26
 8003c92:	d430      	bmi.n	8003cf6 <_printf_common+0xba>
 8003c94:	4641      	mov	r1, r8
 8003c96:	4638      	mov	r0, r7
 8003c98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003c9c:	47c8      	blx	r9
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	d023      	beq.n	8003cea <_printf_common+0xae>
 8003ca2:	6823      	ldr	r3, [r4, #0]
 8003ca4:	6922      	ldr	r2, [r4, #16]
 8003ca6:	f003 0306 	and.w	r3, r3, #6
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	bf14      	ite	ne
 8003cae:	2500      	movne	r5, #0
 8003cb0:	6833      	ldreq	r3, [r6, #0]
 8003cb2:	f04f 0600 	mov.w	r6, #0
 8003cb6:	bf08      	it	eq
 8003cb8:	68e5      	ldreq	r5, [r4, #12]
 8003cba:	f104 041a 	add.w	r4, r4, #26
 8003cbe:	bf08      	it	eq
 8003cc0:	1aed      	subeq	r5, r5, r3
 8003cc2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003cc6:	bf08      	it	eq
 8003cc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	bfc4      	itt	gt
 8003cd0:	1a9b      	subgt	r3, r3, r2
 8003cd2:	18ed      	addgt	r5, r5, r3
 8003cd4:	42b5      	cmp	r5, r6
 8003cd6:	d11a      	bne.n	8003d0e <_printf_common+0xd2>
 8003cd8:	2000      	movs	r0, #0
 8003cda:	e008      	b.n	8003cee <_printf_common+0xb2>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	4652      	mov	r2, sl
 8003ce0:	4641      	mov	r1, r8
 8003ce2:	4638      	mov	r0, r7
 8003ce4:	47c8      	blx	r9
 8003ce6:	3001      	adds	r0, #1
 8003ce8:	d103      	bne.n	8003cf2 <_printf_common+0xb6>
 8003cea:	f04f 30ff 	mov.w	r0, #4294967295
 8003cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cf2:	3501      	adds	r5, #1
 8003cf4:	e7c1      	b.n	8003c7a <_printf_common+0x3e>
 8003cf6:	2030      	movs	r0, #48	@ 0x30
 8003cf8:	18e1      	adds	r1, r4, r3
 8003cfa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d04:	4422      	add	r2, r4
 8003d06:	3302      	adds	r3, #2
 8003d08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d0c:	e7c2      	b.n	8003c94 <_printf_common+0x58>
 8003d0e:	2301      	movs	r3, #1
 8003d10:	4622      	mov	r2, r4
 8003d12:	4641      	mov	r1, r8
 8003d14:	4638      	mov	r0, r7
 8003d16:	47c8      	blx	r9
 8003d18:	3001      	adds	r0, #1
 8003d1a:	d0e6      	beq.n	8003cea <_printf_common+0xae>
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	e7d9      	b.n	8003cd4 <_printf_common+0x98>

08003d20 <_printf_i>:
 8003d20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d24:	7e0f      	ldrb	r7, [r1, #24]
 8003d26:	4691      	mov	r9, r2
 8003d28:	2f78      	cmp	r7, #120	@ 0x78
 8003d2a:	4680      	mov	r8, r0
 8003d2c:	460c      	mov	r4, r1
 8003d2e:	469a      	mov	sl, r3
 8003d30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d36:	d807      	bhi.n	8003d48 <_printf_i+0x28>
 8003d38:	2f62      	cmp	r7, #98	@ 0x62
 8003d3a:	d80a      	bhi.n	8003d52 <_printf_i+0x32>
 8003d3c:	2f00      	cmp	r7, #0
 8003d3e:	f000 80d1 	beq.w	8003ee4 <_printf_i+0x1c4>
 8003d42:	2f58      	cmp	r7, #88	@ 0x58
 8003d44:	f000 80b8 	beq.w	8003eb8 <_printf_i+0x198>
 8003d48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003d4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003d50:	e03a      	b.n	8003dc8 <_printf_i+0xa8>
 8003d52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003d56:	2b15      	cmp	r3, #21
 8003d58:	d8f6      	bhi.n	8003d48 <_printf_i+0x28>
 8003d5a:	a101      	add	r1, pc, #4	@ (adr r1, 8003d60 <_printf_i+0x40>)
 8003d5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003d60:	08003db9 	.word	0x08003db9
 8003d64:	08003dcd 	.word	0x08003dcd
 8003d68:	08003d49 	.word	0x08003d49
 8003d6c:	08003d49 	.word	0x08003d49
 8003d70:	08003d49 	.word	0x08003d49
 8003d74:	08003d49 	.word	0x08003d49
 8003d78:	08003dcd 	.word	0x08003dcd
 8003d7c:	08003d49 	.word	0x08003d49
 8003d80:	08003d49 	.word	0x08003d49
 8003d84:	08003d49 	.word	0x08003d49
 8003d88:	08003d49 	.word	0x08003d49
 8003d8c:	08003ecb 	.word	0x08003ecb
 8003d90:	08003df7 	.word	0x08003df7
 8003d94:	08003e85 	.word	0x08003e85
 8003d98:	08003d49 	.word	0x08003d49
 8003d9c:	08003d49 	.word	0x08003d49
 8003da0:	08003eed 	.word	0x08003eed
 8003da4:	08003d49 	.word	0x08003d49
 8003da8:	08003df7 	.word	0x08003df7
 8003dac:	08003d49 	.word	0x08003d49
 8003db0:	08003d49 	.word	0x08003d49
 8003db4:	08003e8d 	.word	0x08003e8d
 8003db8:	6833      	ldr	r3, [r6, #0]
 8003dba:	1d1a      	adds	r2, r3, #4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6032      	str	r2, [r6, #0]
 8003dc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003dc4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e09c      	b.n	8003f06 <_printf_i+0x1e6>
 8003dcc:	6833      	ldr	r3, [r6, #0]
 8003dce:	6820      	ldr	r0, [r4, #0]
 8003dd0:	1d19      	adds	r1, r3, #4
 8003dd2:	6031      	str	r1, [r6, #0]
 8003dd4:	0606      	lsls	r6, r0, #24
 8003dd6:	d501      	bpl.n	8003ddc <_printf_i+0xbc>
 8003dd8:	681d      	ldr	r5, [r3, #0]
 8003dda:	e003      	b.n	8003de4 <_printf_i+0xc4>
 8003ddc:	0645      	lsls	r5, r0, #25
 8003dde:	d5fb      	bpl.n	8003dd8 <_printf_i+0xb8>
 8003de0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003de4:	2d00      	cmp	r5, #0
 8003de6:	da03      	bge.n	8003df0 <_printf_i+0xd0>
 8003de8:	232d      	movs	r3, #45	@ 0x2d
 8003dea:	426d      	negs	r5, r5
 8003dec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003df0:	230a      	movs	r3, #10
 8003df2:	4858      	ldr	r0, [pc, #352]	@ (8003f54 <_printf_i+0x234>)
 8003df4:	e011      	b.n	8003e1a <_printf_i+0xfa>
 8003df6:	6821      	ldr	r1, [r4, #0]
 8003df8:	6833      	ldr	r3, [r6, #0]
 8003dfa:	0608      	lsls	r0, r1, #24
 8003dfc:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e00:	d402      	bmi.n	8003e08 <_printf_i+0xe8>
 8003e02:	0649      	lsls	r1, r1, #25
 8003e04:	bf48      	it	mi
 8003e06:	b2ad      	uxthmi	r5, r5
 8003e08:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e0a:	6033      	str	r3, [r6, #0]
 8003e0c:	bf14      	ite	ne
 8003e0e:	230a      	movne	r3, #10
 8003e10:	2308      	moveq	r3, #8
 8003e12:	4850      	ldr	r0, [pc, #320]	@ (8003f54 <_printf_i+0x234>)
 8003e14:	2100      	movs	r1, #0
 8003e16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e1a:	6866      	ldr	r6, [r4, #4]
 8003e1c:	2e00      	cmp	r6, #0
 8003e1e:	60a6      	str	r6, [r4, #8]
 8003e20:	db05      	blt.n	8003e2e <_printf_i+0x10e>
 8003e22:	6821      	ldr	r1, [r4, #0]
 8003e24:	432e      	orrs	r6, r5
 8003e26:	f021 0104 	bic.w	r1, r1, #4
 8003e2a:	6021      	str	r1, [r4, #0]
 8003e2c:	d04b      	beq.n	8003ec6 <_printf_i+0x1a6>
 8003e2e:	4616      	mov	r6, r2
 8003e30:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e34:	fb03 5711 	mls	r7, r3, r1, r5
 8003e38:	5dc7      	ldrb	r7, [r0, r7]
 8003e3a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e3e:	462f      	mov	r7, r5
 8003e40:	42bb      	cmp	r3, r7
 8003e42:	460d      	mov	r5, r1
 8003e44:	d9f4      	bls.n	8003e30 <_printf_i+0x110>
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d10b      	bne.n	8003e62 <_printf_i+0x142>
 8003e4a:	6823      	ldr	r3, [r4, #0]
 8003e4c:	07df      	lsls	r7, r3, #31
 8003e4e:	d508      	bpl.n	8003e62 <_printf_i+0x142>
 8003e50:	6923      	ldr	r3, [r4, #16]
 8003e52:	6861      	ldr	r1, [r4, #4]
 8003e54:	4299      	cmp	r1, r3
 8003e56:	bfde      	ittt	le
 8003e58:	2330      	movle	r3, #48	@ 0x30
 8003e5a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003e5e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003e62:	1b92      	subs	r2, r2, r6
 8003e64:	6122      	str	r2, [r4, #16]
 8003e66:	464b      	mov	r3, r9
 8003e68:	4621      	mov	r1, r4
 8003e6a:	4640      	mov	r0, r8
 8003e6c:	f8cd a000 	str.w	sl, [sp]
 8003e70:	aa03      	add	r2, sp, #12
 8003e72:	f7ff fee3 	bl	8003c3c <_printf_common>
 8003e76:	3001      	adds	r0, #1
 8003e78:	d14a      	bne.n	8003f10 <_printf_i+0x1f0>
 8003e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7e:	b004      	add	sp, #16
 8003e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e84:	6823      	ldr	r3, [r4, #0]
 8003e86:	f043 0320 	orr.w	r3, r3, #32
 8003e8a:	6023      	str	r3, [r4, #0]
 8003e8c:	2778      	movs	r7, #120	@ 0x78
 8003e8e:	4832      	ldr	r0, [pc, #200]	@ (8003f58 <_printf_i+0x238>)
 8003e90:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003e94:	6823      	ldr	r3, [r4, #0]
 8003e96:	6831      	ldr	r1, [r6, #0]
 8003e98:	061f      	lsls	r7, r3, #24
 8003e9a:	f851 5b04 	ldr.w	r5, [r1], #4
 8003e9e:	d402      	bmi.n	8003ea6 <_printf_i+0x186>
 8003ea0:	065f      	lsls	r7, r3, #25
 8003ea2:	bf48      	it	mi
 8003ea4:	b2ad      	uxthmi	r5, r5
 8003ea6:	6031      	str	r1, [r6, #0]
 8003ea8:	07d9      	lsls	r1, r3, #31
 8003eaa:	bf44      	itt	mi
 8003eac:	f043 0320 	orrmi.w	r3, r3, #32
 8003eb0:	6023      	strmi	r3, [r4, #0]
 8003eb2:	b11d      	cbz	r5, 8003ebc <_printf_i+0x19c>
 8003eb4:	2310      	movs	r3, #16
 8003eb6:	e7ad      	b.n	8003e14 <_printf_i+0xf4>
 8003eb8:	4826      	ldr	r0, [pc, #152]	@ (8003f54 <_printf_i+0x234>)
 8003eba:	e7e9      	b.n	8003e90 <_printf_i+0x170>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	f023 0320 	bic.w	r3, r3, #32
 8003ec2:	6023      	str	r3, [r4, #0]
 8003ec4:	e7f6      	b.n	8003eb4 <_printf_i+0x194>
 8003ec6:	4616      	mov	r6, r2
 8003ec8:	e7bd      	b.n	8003e46 <_printf_i+0x126>
 8003eca:	6833      	ldr	r3, [r6, #0]
 8003ecc:	6825      	ldr	r5, [r4, #0]
 8003ece:	1d18      	adds	r0, r3, #4
 8003ed0:	6961      	ldr	r1, [r4, #20]
 8003ed2:	6030      	str	r0, [r6, #0]
 8003ed4:	062e      	lsls	r6, r5, #24
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	d501      	bpl.n	8003ede <_printf_i+0x1be>
 8003eda:	6019      	str	r1, [r3, #0]
 8003edc:	e002      	b.n	8003ee4 <_printf_i+0x1c4>
 8003ede:	0668      	lsls	r0, r5, #25
 8003ee0:	d5fb      	bpl.n	8003eda <_printf_i+0x1ba>
 8003ee2:	8019      	strh	r1, [r3, #0]
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	4616      	mov	r6, r2
 8003ee8:	6123      	str	r3, [r4, #16]
 8003eea:	e7bc      	b.n	8003e66 <_printf_i+0x146>
 8003eec:	6833      	ldr	r3, [r6, #0]
 8003eee:	2100      	movs	r1, #0
 8003ef0:	1d1a      	adds	r2, r3, #4
 8003ef2:	6032      	str	r2, [r6, #0]
 8003ef4:	681e      	ldr	r6, [r3, #0]
 8003ef6:	6862      	ldr	r2, [r4, #4]
 8003ef8:	4630      	mov	r0, r6
 8003efa:	f000 f8ed 	bl	80040d8 <memchr>
 8003efe:	b108      	cbz	r0, 8003f04 <_printf_i+0x1e4>
 8003f00:	1b80      	subs	r0, r0, r6
 8003f02:	6060      	str	r0, [r4, #4]
 8003f04:	6863      	ldr	r3, [r4, #4]
 8003f06:	6123      	str	r3, [r4, #16]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f0e:	e7aa      	b.n	8003e66 <_printf_i+0x146>
 8003f10:	4632      	mov	r2, r6
 8003f12:	4649      	mov	r1, r9
 8003f14:	4640      	mov	r0, r8
 8003f16:	6923      	ldr	r3, [r4, #16]
 8003f18:	47d0      	blx	sl
 8003f1a:	3001      	adds	r0, #1
 8003f1c:	d0ad      	beq.n	8003e7a <_printf_i+0x15a>
 8003f1e:	6823      	ldr	r3, [r4, #0]
 8003f20:	079b      	lsls	r3, r3, #30
 8003f22:	d413      	bmi.n	8003f4c <_printf_i+0x22c>
 8003f24:	68e0      	ldr	r0, [r4, #12]
 8003f26:	9b03      	ldr	r3, [sp, #12]
 8003f28:	4298      	cmp	r0, r3
 8003f2a:	bfb8      	it	lt
 8003f2c:	4618      	movlt	r0, r3
 8003f2e:	e7a6      	b.n	8003e7e <_printf_i+0x15e>
 8003f30:	2301      	movs	r3, #1
 8003f32:	4632      	mov	r2, r6
 8003f34:	4649      	mov	r1, r9
 8003f36:	4640      	mov	r0, r8
 8003f38:	47d0      	blx	sl
 8003f3a:	3001      	adds	r0, #1
 8003f3c:	d09d      	beq.n	8003e7a <_printf_i+0x15a>
 8003f3e:	3501      	adds	r5, #1
 8003f40:	68e3      	ldr	r3, [r4, #12]
 8003f42:	9903      	ldr	r1, [sp, #12]
 8003f44:	1a5b      	subs	r3, r3, r1
 8003f46:	42ab      	cmp	r3, r5
 8003f48:	dcf2      	bgt.n	8003f30 <_printf_i+0x210>
 8003f4a:	e7eb      	b.n	8003f24 <_printf_i+0x204>
 8003f4c:	2500      	movs	r5, #0
 8003f4e:	f104 0619 	add.w	r6, r4, #25
 8003f52:	e7f5      	b.n	8003f40 <_printf_i+0x220>
 8003f54:	08004667 	.word	0x08004667
 8003f58:	08004678 	.word	0x08004678

08003f5c <__swbuf_r>:
 8003f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5e:	460e      	mov	r6, r1
 8003f60:	4614      	mov	r4, r2
 8003f62:	4605      	mov	r5, r0
 8003f64:	b118      	cbz	r0, 8003f6e <__swbuf_r+0x12>
 8003f66:	6a03      	ldr	r3, [r0, #32]
 8003f68:	b90b      	cbnz	r3, 8003f6e <__swbuf_r+0x12>
 8003f6a:	f7ff f99b 	bl	80032a4 <__sinit>
 8003f6e:	69a3      	ldr	r3, [r4, #24]
 8003f70:	60a3      	str	r3, [r4, #8]
 8003f72:	89a3      	ldrh	r3, [r4, #12]
 8003f74:	071a      	lsls	r2, r3, #28
 8003f76:	d501      	bpl.n	8003f7c <__swbuf_r+0x20>
 8003f78:	6923      	ldr	r3, [r4, #16]
 8003f7a:	b943      	cbnz	r3, 8003f8e <__swbuf_r+0x32>
 8003f7c:	4621      	mov	r1, r4
 8003f7e:	4628      	mov	r0, r5
 8003f80:	f000 f82a 	bl	8003fd8 <__swsetup_r>
 8003f84:	b118      	cbz	r0, 8003f8e <__swbuf_r+0x32>
 8003f86:	f04f 37ff 	mov.w	r7, #4294967295
 8003f8a:	4638      	mov	r0, r7
 8003f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f8e:	6823      	ldr	r3, [r4, #0]
 8003f90:	6922      	ldr	r2, [r4, #16]
 8003f92:	b2f6      	uxtb	r6, r6
 8003f94:	1a98      	subs	r0, r3, r2
 8003f96:	6963      	ldr	r3, [r4, #20]
 8003f98:	4637      	mov	r7, r6
 8003f9a:	4283      	cmp	r3, r0
 8003f9c:	dc05      	bgt.n	8003faa <__swbuf_r+0x4e>
 8003f9e:	4621      	mov	r1, r4
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	f7ff f8b7 	bl	8003114 <_fflush_r>
 8003fa6:	2800      	cmp	r0, #0
 8003fa8:	d1ed      	bne.n	8003f86 <__swbuf_r+0x2a>
 8003faa:	68a3      	ldr	r3, [r4, #8]
 8003fac:	3b01      	subs	r3, #1
 8003fae:	60a3      	str	r3, [r4, #8]
 8003fb0:	6823      	ldr	r3, [r4, #0]
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	6022      	str	r2, [r4, #0]
 8003fb6:	701e      	strb	r6, [r3, #0]
 8003fb8:	6962      	ldr	r2, [r4, #20]
 8003fba:	1c43      	adds	r3, r0, #1
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d004      	beq.n	8003fca <__swbuf_r+0x6e>
 8003fc0:	89a3      	ldrh	r3, [r4, #12]
 8003fc2:	07db      	lsls	r3, r3, #31
 8003fc4:	d5e1      	bpl.n	8003f8a <__swbuf_r+0x2e>
 8003fc6:	2e0a      	cmp	r6, #10
 8003fc8:	d1df      	bne.n	8003f8a <__swbuf_r+0x2e>
 8003fca:	4621      	mov	r1, r4
 8003fcc:	4628      	mov	r0, r5
 8003fce:	f7ff f8a1 	bl	8003114 <_fflush_r>
 8003fd2:	2800      	cmp	r0, #0
 8003fd4:	d0d9      	beq.n	8003f8a <__swbuf_r+0x2e>
 8003fd6:	e7d6      	b.n	8003f86 <__swbuf_r+0x2a>

08003fd8 <__swsetup_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4b29      	ldr	r3, [pc, #164]	@ (8004080 <__swsetup_r+0xa8>)
 8003fdc:	4605      	mov	r5, r0
 8003fde:	6818      	ldr	r0, [r3, #0]
 8003fe0:	460c      	mov	r4, r1
 8003fe2:	b118      	cbz	r0, 8003fec <__swsetup_r+0x14>
 8003fe4:	6a03      	ldr	r3, [r0, #32]
 8003fe6:	b90b      	cbnz	r3, 8003fec <__swsetup_r+0x14>
 8003fe8:	f7ff f95c 	bl	80032a4 <__sinit>
 8003fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ff0:	0719      	lsls	r1, r3, #28
 8003ff2:	d422      	bmi.n	800403a <__swsetup_r+0x62>
 8003ff4:	06da      	lsls	r2, r3, #27
 8003ff6:	d407      	bmi.n	8004008 <__swsetup_r+0x30>
 8003ff8:	2209      	movs	r2, #9
 8003ffa:	602a      	str	r2, [r5, #0]
 8003ffc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004000:	f04f 30ff 	mov.w	r0, #4294967295
 8004004:	81a3      	strh	r3, [r4, #12]
 8004006:	e033      	b.n	8004070 <__swsetup_r+0x98>
 8004008:	0758      	lsls	r0, r3, #29
 800400a:	d512      	bpl.n	8004032 <__swsetup_r+0x5a>
 800400c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800400e:	b141      	cbz	r1, 8004022 <__swsetup_r+0x4a>
 8004010:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004014:	4299      	cmp	r1, r3
 8004016:	d002      	beq.n	800401e <__swsetup_r+0x46>
 8004018:	4628      	mov	r0, r5
 800401a:	f7ff fa81 	bl	8003520 <_free_r>
 800401e:	2300      	movs	r3, #0
 8004020:	6363      	str	r3, [r4, #52]	@ 0x34
 8004022:	89a3      	ldrh	r3, [r4, #12]
 8004024:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004028:	81a3      	strh	r3, [r4, #12]
 800402a:	2300      	movs	r3, #0
 800402c:	6063      	str	r3, [r4, #4]
 800402e:	6923      	ldr	r3, [r4, #16]
 8004030:	6023      	str	r3, [r4, #0]
 8004032:	89a3      	ldrh	r3, [r4, #12]
 8004034:	f043 0308 	orr.w	r3, r3, #8
 8004038:	81a3      	strh	r3, [r4, #12]
 800403a:	6923      	ldr	r3, [r4, #16]
 800403c:	b94b      	cbnz	r3, 8004052 <__swsetup_r+0x7a>
 800403e:	89a3      	ldrh	r3, [r4, #12]
 8004040:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004044:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004048:	d003      	beq.n	8004052 <__swsetup_r+0x7a>
 800404a:	4621      	mov	r1, r4
 800404c:	4628      	mov	r0, r5
 800404e:	f000 f8b2 	bl	80041b6 <__smakebuf_r>
 8004052:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004056:	f013 0201 	ands.w	r2, r3, #1
 800405a:	d00a      	beq.n	8004072 <__swsetup_r+0x9a>
 800405c:	2200      	movs	r2, #0
 800405e:	60a2      	str	r2, [r4, #8]
 8004060:	6962      	ldr	r2, [r4, #20]
 8004062:	4252      	negs	r2, r2
 8004064:	61a2      	str	r2, [r4, #24]
 8004066:	6922      	ldr	r2, [r4, #16]
 8004068:	b942      	cbnz	r2, 800407c <__swsetup_r+0xa4>
 800406a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800406e:	d1c5      	bne.n	8003ffc <__swsetup_r+0x24>
 8004070:	bd38      	pop	{r3, r4, r5, pc}
 8004072:	0799      	lsls	r1, r3, #30
 8004074:	bf58      	it	pl
 8004076:	6962      	ldrpl	r2, [r4, #20]
 8004078:	60a2      	str	r2, [r4, #8]
 800407a:	e7f4      	b.n	8004066 <__swsetup_r+0x8e>
 800407c:	2000      	movs	r0, #0
 800407e:	e7f7      	b.n	8004070 <__swsetup_r+0x98>
 8004080:	20000040 	.word	0x20000040

08004084 <memmove>:
 8004084:	4288      	cmp	r0, r1
 8004086:	b510      	push	{r4, lr}
 8004088:	eb01 0402 	add.w	r4, r1, r2
 800408c:	d902      	bls.n	8004094 <memmove+0x10>
 800408e:	4284      	cmp	r4, r0
 8004090:	4623      	mov	r3, r4
 8004092:	d807      	bhi.n	80040a4 <memmove+0x20>
 8004094:	1e43      	subs	r3, r0, #1
 8004096:	42a1      	cmp	r1, r4
 8004098:	d008      	beq.n	80040ac <memmove+0x28>
 800409a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800409e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80040a2:	e7f8      	b.n	8004096 <memmove+0x12>
 80040a4:	4601      	mov	r1, r0
 80040a6:	4402      	add	r2, r0
 80040a8:	428a      	cmp	r2, r1
 80040aa:	d100      	bne.n	80040ae <memmove+0x2a>
 80040ac:	bd10      	pop	{r4, pc}
 80040ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80040b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80040b6:	e7f7      	b.n	80040a8 <memmove+0x24>

080040b8 <_sbrk_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	2300      	movs	r3, #0
 80040bc:	4d05      	ldr	r5, [pc, #20]	@ (80040d4 <_sbrk_r+0x1c>)
 80040be:	4604      	mov	r4, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	602b      	str	r3, [r5, #0]
 80040c4:	f7fc fa32 	bl	800052c <_sbrk>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d102      	bne.n	80040d2 <_sbrk_r+0x1a>
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	b103      	cbz	r3, 80040d2 <_sbrk_r+0x1a>
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	200003c8 	.word	0x200003c8

080040d8 <memchr>:
 80040d8:	4603      	mov	r3, r0
 80040da:	b510      	push	{r4, lr}
 80040dc:	b2c9      	uxtb	r1, r1
 80040de:	4402      	add	r2, r0
 80040e0:	4293      	cmp	r3, r2
 80040e2:	4618      	mov	r0, r3
 80040e4:	d101      	bne.n	80040ea <memchr+0x12>
 80040e6:	2000      	movs	r0, #0
 80040e8:	e003      	b.n	80040f2 <memchr+0x1a>
 80040ea:	7804      	ldrb	r4, [r0, #0]
 80040ec:	3301      	adds	r3, #1
 80040ee:	428c      	cmp	r4, r1
 80040f0:	d1f6      	bne.n	80040e0 <memchr+0x8>
 80040f2:	bd10      	pop	{r4, pc}

080040f4 <memcpy>:
 80040f4:	440a      	add	r2, r1
 80040f6:	4291      	cmp	r1, r2
 80040f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80040fc:	d100      	bne.n	8004100 <memcpy+0xc>
 80040fe:	4770      	bx	lr
 8004100:	b510      	push	{r4, lr}
 8004102:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004106:	4291      	cmp	r1, r2
 8004108:	f803 4f01 	strb.w	r4, [r3, #1]!
 800410c:	d1f9      	bne.n	8004102 <memcpy+0xe>
 800410e:	bd10      	pop	{r4, pc}

08004110 <_realloc_r>:
 8004110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004114:	4607      	mov	r7, r0
 8004116:	4614      	mov	r4, r2
 8004118:	460d      	mov	r5, r1
 800411a:	b921      	cbnz	r1, 8004126 <_realloc_r+0x16>
 800411c:	4611      	mov	r1, r2
 800411e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004122:	f7ff ba67 	b.w	80035f4 <_malloc_r>
 8004126:	b92a      	cbnz	r2, 8004134 <_realloc_r+0x24>
 8004128:	f7ff f9fa 	bl	8003520 <_free_r>
 800412c:	4625      	mov	r5, r4
 800412e:	4628      	mov	r0, r5
 8004130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004134:	f000 f89e 	bl	8004274 <_malloc_usable_size_r>
 8004138:	4284      	cmp	r4, r0
 800413a:	4606      	mov	r6, r0
 800413c:	d802      	bhi.n	8004144 <_realloc_r+0x34>
 800413e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004142:	d8f4      	bhi.n	800412e <_realloc_r+0x1e>
 8004144:	4621      	mov	r1, r4
 8004146:	4638      	mov	r0, r7
 8004148:	f7ff fa54 	bl	80035f4 <_malloc_r>
 800414c:	4680      	mov	r8, r0
 800414e:	b908      	cbnz	r0, 8004154 <_realloc_r+0x44>
 8004150:	4645      	mov	r5, r8
 8004152:	e7ec      	b.n	800412e <_realloc_r+0x1e>
 8004154:	42b4      	cmp	r4, r6
 8004156:	4622      	mov	r2, r4
 8004158:	4629      	mov	r1, r5
 800415a:	bf28      	it	cs
 800415c:	4632      	movcs	r2, r6
 800415e:	f7ff ffc9 	bl	80040f4 <memcpy>
 8004162:	4629      	mov	r1, r5
 8004164:	4638      	mov	r0, r7
 8004166:	f7ff f9db 	bl	8003520 <_free_r>
 800416a:	e7f1      	b.n	8004150 <_realloc_r+0x40>

0800416c <__swhatbuf_r>:
 800416c:	b570      	push	{r4, r5, r6, lr}
 800416e:	460c      	mov	r4, r1
 8004170:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004174:	4615      	mov	r5, r2
 8004176:	2900      	cmp	r1, #0
 8004178:	461e      	mov	r6, r3
 800417a:	b096      	sub	sp, #88	@ 0x58
 800417c:	da0c      	bge.n	8004198 <__swhatbuf_r+0x2c>
 800417e:	89a3      	ldrh	r3, [r4, #12]
 8004180:	2100      	movs	r1, #0
 8004182:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004186:	bf14      	ite	ne
 8004188:	2340      	movne	r3, #64	@ 0x40
 800418a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800418e:	2000      	movs	r0, #0
 8004190:	6031      	str	r1, [r6, #0]
 8004192:	602b      	str	r3, [r5, #0]
 8004194:	b016      	add	sp, #88	@ 0x58
 8004196:	bd70      	pop	{r4, r5, r6, pc}
 8004198:	466a      	mov	r2, sp
 800419a:	f000 f849 	bl	8004230 <_fstat_r>
 800419e:	2800      	cmp	r0, #0
 80041a0:	dbed      	blt.n	800417e <__swhatbuf_r+0x12>
 80041a2:	9901      	ldr	r1, [sp, #4]
 80041a4:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80041a8:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80041ac:	4259      	negs	r1, r3
 80041ae:	4159      	adcs	r1, r3
 80041b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80041b4:	e7eb      	b.n	800418e <__swhatbuf_r+0x22>

080041b6 <__smakebuf_r>:
 80041b6:	898b      	ldrh	r3, [r1, #12]
 80041b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041ba:	079d      	lsls	r5, r3, #30
 80041bc:	4606      	mov	r6, r0
 80041be:	460c      	mov	r4, r1
 80041c0:	d507      	bpl.n	80041d2 <__smakebuf_r+0x1c>
 80041c2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80041c6:	6023      	str	r3, [r4, #0]
 80041c8:	6123      	str	r3, [r4, #16]
 80041ca:	2301      	movs	r3, #1
 80041cc:	6163      	str	r3, [r4, #20]
 80041ce:	b003      	add	sp, #12
 80041d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041d2:	466a      	mov	r2, sp
 80041d4:	ab01      	add	r3, sp, #4
 80041d6:	f7ff ffc9 	bl	800416c <__swhatbuf_r>
 80041da:	9f00      	ldr	r7, [sp, #0]
 80041dc:	4605      	mov	r5, r0
 80041de:	4639      	mov	r1, r7
 80041e0:	4630      	mov	r0, r6
 80041e2:	f7ff fa07 	bl	80035f4 <_malloc_r>
 80041e6:	b948      	cbnz	r0, 80041fc <__smakebuf_r+0x46>
 80041e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80041ec:	059a      	lsls	r2, r3, #22
 80041ee:	d4ee      	bmi.n	80041ce <__smakebuf_r+0x18>
 80041f0:	f023 0303 	bic.w	r3, r3, #3
 80041f4:	f043 0302 	orr.w	r3, r3, #2
 80041f8:	81a3      	strh	r3, [r4, #12]
 80041fa:	e7e2      	b.n	80041c2 <__smakebuf_r+0xc>
 80041fc:	89a3      	ldrh	r3, [r4, #12]
 80041fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004202:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004206:	81a3      	strh	r3, [r4, #12]
 8004208:	9b01      	ldr	r3, [sp, #4]
 800420a:	6020      	str	r0, [r4, #0]
 800420c:	b15b      	cbz	r3, 8004226 <__smakebuf_r+0x70>
 800420e:	4630      	mov	r0, r6
 8004210:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004214:	f000 f81e 	bl	8004254 <_isatty_r>
 8004218:	b128      	cbz	r0, 8004226 <__smakebuf_r+0x70>
 800421a:	89a3      	ldrh	r3, [r4, #12]
 800421c:	f023 0303 	bic.w	r3, r3, #3
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	81a3      	strh	r3, [r4, #12]
 8004226:	89a3      	ldrh	r3, [r4, #12]
 8004228:	431d      	orrs	r5, r3
 800422a:	81a5      	strh	r5, [r4, #12]
 800422c:	e7cf      	b.n	80041ce <__smakebuf_r+0x18>
	...

08004230 <_fstat_r>:
 8004230:	b538      	push	{r3, r4, r5, lr}
 8004232:	2300      	movs	r3, #0
 8004234:	4d06      	ldr	r5, [pc, #24]	@ (8004250 <_fstat_r+0x20>)
 8004236:	4604      	mov	r4, r0
 8004238:	4608      	mov	r0, r1
 800423a:	4611      	mov	r1, r2
 800423c:	602b      	str	r3, [r5, #0]
 800423e:	f7fe fd66 	bl	8002d0e <_fstat>
 8004242:	1c43      	adds	r3, r0, #1
 8004244:	d102      	bne.n	800424c <_fstat_r+0x1c>
 8004246:	682b      	ldr	r3, [r5, #0]
 8004248:	b103      	cbz	r3, 800424c <_fstat_r+0x1c>
 800424a:	6023      	str	r3, [r4, #0]
 800424c:	bd38      	pop	{r3, r4, r5, pc}
 800424e:	bf00      	nop
 8004250:	200003c8 	.word	0x200003c8

08004254 <_isatty_r>:
 8004254:	b538      	push	{r3, r4, r5, lr}
 8004256:	2300      	movs	r3, #0
 8004258:	4d05      	ldr	r5, [pc, #20]	@ (8004270 <_isatty_r+0x1c>)
 800425a:	4604      	mov	r4, r0
 800425c:	4608      	mov	r0, r1
 800425e:	602b      	str	r3, [r5, #0]
 8004260:	f7fe feba 	bl	8002fd8 <_isatty>
 8004264:	1c43      	adds	r3, r0, #1
 8004266:	d102      	bne.n	800426e <_isatty_r+0x1a>
 8004268:	682b      	ldr	r3, [r5, #0]
 800426a:	b103      	cbz	r3, 800426e <_isatty_r+0x1a>
 800426c:	6023      	str	r3, [r4, #0]
 800426e:	bd38      	pop	{r3, r4, r5, pc}
 8004270:	200003c8 	.word	0x200003c8

08004274 <_malloc_usable_size_r>:
 8004274:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004278:	1f18      	subs	r0, r3, #4
 800427a:	2b00      	cmp	r3, #0
 800427c:	bfbc      	itt	lt
 800427e:	580b      	ldrlt	r3, [r1, r0]
 8004280:	18c0      	addlt	r0, r0, r3
 8004282:	4770      	bx	lr

08004284 <_init>:
 8004284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004286:	bf00      	nop
 8004288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428a:	bc08      	pop	{r3}
 800428c:	469e      	mov	lr, r3
 800428e:	4770      	bx	lr

08004290 <_fini>:
 8004290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004292:	bf00      	nop
 8004294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004296:	bc08      	pop	{r3}
 8004298:	469e      	mov	lr, r3
 800429a:	4770      	bx	lr
